/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing GeneralWidgetsApi
    /// </summary>
    public sealed class GeneralWidgetsApiTests : ApiTestsBase
    {
        private readonly IGeneralWidgetsApi _instance;

        public GeneralWidgetsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IGeneralWidgetsApi>();
        }

        /// <summary>
        /// Test InstallationsIdSiteWidgetsGPS
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InstallationsIdSiteWidgetsGPSAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            Client.Option<int> instance = default!;
            var response = await _instance.InstallationsIdSiteWidgetsGPSAsync(xAuthorization, idSite, instance);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteWidgetsGPS200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteWidgetsGraph
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InstallationsIdSiteWidgetsGraphAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            Client.Option<string> attributeCodes = default!;
            Client.Option<int> attributeIds = default!;
            Client.Option<int> instance = default!;
            Client.Option<int> start = default!;
            Client.Option<int> end = default!;
            Client.Option<int> width = default!;
            Client.Option<decimal> pointsPerPixel = default!;
            Client.Option<decimal> useMinMax = default!;
            var response = await _instance.InstallationsIdSiteWidgetsGraphAsync(xAuthorization, idSite, attributeCodes, attributeIds, instance, start, end, width, pointsPerPixel, useMinMax);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteWidgetsGraph200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteWidgetsHoursOfAc
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InstallationsIdSiteWidgetsHoursOfAcAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            Client.Option<int> instance = default!;
            Client.Option<int> start = default!;
            Client.Option<int> end = default!;
            var response = await _instance.InstallationsIdSiteWidgetsHoursOfAcAsync(xAuthorization, idSite, instance, start, end);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteWidgetsHoursOfAc200Response>(model);
        }
    }
}
