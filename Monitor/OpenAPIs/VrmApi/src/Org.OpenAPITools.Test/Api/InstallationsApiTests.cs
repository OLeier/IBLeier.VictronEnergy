/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Xunit;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing InstallationsApi
    /// </summary>
    public sealed class InstallationsApiTests : ApiTestsBase
    {
        private readonly IInstallationsApi _instance;

        public InstallationsApiTests() : base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IInstallationsApi>();
        }

        /// <summary>
        /// Test InstallationOverviewDownload
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationOverviewDownloadAsyncTest()
        {
            InstallationOverviewDownloadRequest installationOverviewDownloadRequest = default!;
            Client.Option<string> UNKNOWN_PARAMETER_NAME = default!;
            var response = await _instance.InstallationOverviewDownloadAsync(installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME);
            var model = response.Ok();
            Assert.IsType<InstallationOverviewDownload200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteAlarmsDelete
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteAlarmsDeleteAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest = default!;
            var response = await _instance.InstallationsIdSiteAlarmsDeleteAsync(xAuthorization, idSite, installationsIdSiteAlarmsDeleteRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteAlarmsDelete200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteAlarmsGet
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteAlarmsGetAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            var response = await _instance.InstallationsIdSiteAlarmsGetAsync(xAuthorization, idSite);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteAlarmsGet200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteAlarmsPost
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteAlarmsPostAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest = default!;
            var response = await _instance.InstallationsIdSiteAlarmsPostAsync(xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteAlarmsPost200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteAlarmsPut
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteAlarmsPutAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest = default!;
            var response = await _instance.InstallationsIdSiteAlarmsPutAsync(xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteAlarmsPut200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteClearAlarm
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteClearAlarmAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest = default!;
            var response = await _instance.InstallationsIdSiteClearAlarmAsync(xAuthorization, idSite, installationsIdSiteClearAlarmRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteClearAlarm200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteCustomWidgetDelete
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteCustomWidgetDeleteAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest = default!;
            var response = await _instance.InstallationsIdSiteCustomWidgetDeleteAsync(xAuthorization, idSite, installationsIdSiteCustomWidgetDeleteRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteResetForecastsPost200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteCustomWidgetGet
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteCustomWidgetGetAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            decimal idCustomWidget = default!;
            var response = await _instance.InstallationsIdSiteCustomWidgetGetAsync(xAuthorization, idSite, idCustomWidget);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteCustomWidgetGet200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteCustomWidgetPatch
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteCustomWidgetPatchAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest = default!;
            var response = await _instance.InstallationsIdSiteCustomWidgetPatchAsync(xAuthorization, idSite, installationsIdSiteCustomWidgetPatchRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteResetForecastsPost200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteCustomWidgetPost
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteCustomWidgetPostAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest = default!;
            var response = await _instance.InstallationsIdSiteCustomWidgetPostAsync(xAuthorization, idSite, installationsIdSiteCustomWidgetPostRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteCustomWidgetPost200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteDataDownload
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteDataDownloadAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            Client.Option<int> start = default!;
            Client.Option<int> end = default!;
            Client.Option<string> datatype = default!;
            Client.Option<string> format = default!;
            Client.Option<bool> debug = default!;
            Client.Option<bool> async = default!;
            var response = await _instance.InstallationsIdSiteDataDownloadAsync(xAuthorization, idSite, start, end, datatype, format, debug, async);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteDataDownload200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteDiagnostics
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteDiagnosticsAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            Client.Option<int> count = default!;
            Client.Option<int> page = default!;
            var response = await _instance.InstallationsIdSiteDiagnosticsAsync(xAuthorization, idSite, count, page);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteDiagnostics200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteDynamicEssSettingsGet
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteDynamicEssSettingsGetAsyncTest()
        {
            int id = default!;
            string xAuthorization = default!;
            var response = await _instance.InstallationsIdSiteDynamicEssSettingsGetAsync(id, xAuthorization);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteDynamicEssSettingsGet200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteDynamicEssSettingsPost
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteDynamicEssSettingsPostAsyncTest()
        {
            int id = default!;
            string xAuthorization = default!;
            Client.Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest = default!;
            var response = await _instance.InstallationsIdSiteDynamicEssSettingsPostAsync(id, xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteDynamicEssSettingsGet200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteGpsDownload
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteGpsDownloadAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            int start = default!;
            int end = default!;
            await _instance.InstallationsIdSiteGpsDownloadAsync(xAuthorization, idSite, start, end);
        }

        /// <summary>
        /// Test InstallationsIdSiteInvitePost
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteInvitePostAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest = default!;
            var response = await _instance.InstallationsIdSiteInvitePostAsync(xAuthorization, idSite, installationsIdSiteInvitePostRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteInvitePost200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteOverallstats
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteOverallstatsAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            Client.Option<string> type = default!;
            Client.Option<string> attributeCodes = default!;
            var response = await _instance.InstallationsIdSiteOverallstatsAsync(xAuthorization, idSite, type, attributeCodes);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteOverallstats200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteResetForecastsGet
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteResetForecastsGetAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            var response = await _instance.InstallationsIdSiteResetForecastsGetAsync(xAuthorization, idSite);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteResetForecastsGet200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteResetForecastsPost
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteResetForecastsPostAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest = default!;
            var response = await _instance.InstallationsIdSiteResetForecastsPostAsync(xAuthorization, idSite, installationsIdSiteResetForecastsPostRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteResetForecastsPost200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteSettings
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteSettingsAsyncTest()
        {
            int id = default!;
            string xAuthorization = default!;
            Client.Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest = default!;
            var response = await _instance.InstallationsIdSiteSettingsAsync(id, xAuthorization, installationsIdSiteSettingsRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteSettings200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteStats
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteStatsAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            Client.Option<int> start = default!;
            Client.Option<int> end = default!;
            Client.Option<string> type = default!;
            Client.Option<string> interval = default!;
            Client.Option<string> attributeCodes = default!;
            Client.Option<bool> showInstance = default!;
            var response = await _instance.InstallationsIdSiteStatsAsync(xAuthorization, idSite, start, end, type, interval, attributeCodes, showInstance);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteStats200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteSystemOverview
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteSystemOverviewAsyncTest()
        {
            string xAuthorization = default!;
            string idSite = default!;
            var response = await _instance.InstallationsIdSiteSystemOverviewAsync(xAuthorization, idSite);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteSystemOverview200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteTagsDelete
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteTagsDeleteAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest = default!;
            var response = await _instance.InstallationsIdSiteTagsDeleteAsync(xAuthorization, idSite, installationsIdSiteTagsPutRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteTagsDelete200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteTagsGet
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteTagsGetAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            var response = await _instance.InstallationsIdSiteTagsGetAsync(xAuthorization, idSite);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteTagsGet200Response>(model);
        }

        /// <summary>
        /// Test InstallationsIdSiteTagsPut
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task InstallationsIdSiteTagsPutAsyncTest()
        {
            string xAuthorization = default!;
            decimal idSite = default!;
            InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest = default!;
            var response = await _instance.InstallationsIdSiteTagsPutAsync(xAuthorization, idSite, installationsIdSiteTagsPutRequest);
            var model = response.Ok();
            Assert.IsType<InstallationsIdSiteTagsPut200Response>(model);
        }
    }
}
