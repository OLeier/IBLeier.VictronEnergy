/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing InstallationsIdSiteDynamicEssSettingsGet200ResponseData
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class InstallationsIdSiteDynamicEssSettingsGet200ResponseDataTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for InstallationsIdSiteDynamicEssSettingsGet200ResponseData
        //private InstallationsIdSiteDynamicEssSettingsGet200ResponseData instance;

        public InstallationsIdSiteDynamicEssSettingsGet200ResponseDataTests()
        {
            // TODO uncomment below to create an instance of InstallationsIdSiteDynamicEssSettingsGet200ResponseData
            //instance = new InstallationsIdSiteDynamicEssSettingsGet200ResponseData();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InstallationsIdSiteDynamicEssSettingsGet200ResponseData
        /// </summary>
        [Fact]
        public void InstallationsIdSiteDynamicEssSettingsGet200ResponseDataInstanceTest()
        {
            // TODO uncomment below to test "IsType" InstallationsIdSiteDynamicEssSettingsGet200ResponseData
            //Assert.IsType<InstallationsIdSiteDynamicEssSettingsGet200ResponseData>(instance);
        }

        /// <summary>
        /// Test the property 'BatteryCapacity'
        /// </summary>
        [Fact]
        public void BatteryCapacityTest()
        {
            // TODO unit test for the property 'BatteryCapacity'
        }

        /// <summary>
        /// Test the property 'BatteryCosts'
        /// </summary>
        [Fact]
        public void BatteryCostsTest()
        {
            // TODO unit test for the property 'BatteryCosts'
        }

        /// <summary>
        /// Test the property 'BatteryFlowRestriction'
        /// </summary>
        [Fact]
        public void BatteryFlowRestrictionTest()
        {
            // TODO unit test for the property 'BatteryFlowRestriction'
        }

        /// <summary>
        /// Test the property 'BuyPriceType'
        /// </summary>
        [Fact]
        public void BuyPriceTypeTest()
        {
            // TODO unit test for the property 'BuyPriceType'
        }

        /// <summary>
        /// Test the property 'ChargePower'
        /// </summary>
        [Fact]
        public void ChargePowerTest()
        {
            // TODO unit test for the property 'ChargePower'
        }

        /// <summary>
        /// Test the property 'DischargePower'
        /// </summary>
        [Fact]
        public void DischargePowerTest()
        {
            // TODO unit test for the property 'DischargePower'
        }

        /// <summary>
        /// Test the property 'GridSell'
        /// </summary>
        [Fact]
        public void GridSellTest()
        {
            // TODO unit test for the property 'GridSell'
        }

        /// <summary>
        /// Test the property 'IsOn'
        /// </summary>
        [Fact]
        public void IsOnTest()
        {
            // TODO unit test for the property 'IsOn'
        }

        /// <summary>
        /// Test the property 'MaxPowerFromGrid'
        /// </summary>
        [Fact]
        public void MaxPowerFromGridTest()
        {
            // TODO unit test for the property 'MaxPowerFromGrid'
        }

        /// <summary>
        /// Test the property 'MaxPowerToGrid'
        /// </summary>
        [Fact]
        public void MaxPowerToGridTest()
        {
            // TODO unit test for the property 'MaxPowerToGrid'
        }

        /// <summary>
        /// Test the property 'SellPriceType'
        /// </summary>
        [Fact]
        public void SellPriceTypeTest()
        {
            // TODO unit test for the property 'SellPriceType'
        }

        /// <summary>
        /// Test the property 'BatteryPrice'
        /// </summary>
        [Fact]
        public void BatteryPriceTest()
        {
            // TODO unit test for the property 'BatteryPrice'
        }

        /// <summary>
        /// Test the property 'BuyEnergyProviderId'
        /// </summary>
        [Fact]
        public void BuyEnergyProviderIdTest()
        {
            // TODO unit test for the property 'BuyEnergyProviderId'
        }

        /// <summary>
        /// Test the property 'BuyPriceFormula'
        /// </summary>
        [Fact]
        public void BuyPriceFormulaTest()
        {
            // TODO unit test for the property 'BuyPriceFormula'
        }

        /// <summary>
        /// Test the property 'BuyPriceSchedule'
        /// </summary>
        [Fact]
        public void BuyPriceScheduleTest()
        {
            // TODO unit test for the property 'BuyPriceSchedule'
        }

        /// <summary>
        /// Test the property 'IdBiddingZone'
        /// </summary>
        [Fact]
        public void IdBiddingZoneTest()
        {
            // TODO unit test for the property 'IdBiddingZone'
        }

        /// <summary>
        /// Test the property 'IsDessSocDifferent'
        /// </summary>
        [Fact]
        public void IsDessSocDifferentTest()
        {
            // TODO unit test for the property 'IsDessSocDifferent'
        }

        /// <summary>
        /// Test the property 'IsGreenModeOn'
        /// </summary>
        [Fact]
        public void IsGreenModeOnTest()
        {
            // TODO unit test for the property 'IsGreenModeOn'
        }

        /// <summary>
        /// Test the property 'SellEnergyProviderId'
        /// </summary>
        [Fact]
        public void SellEnergyProviderIdTest()
        {
            // TODO unit test for the property 'SellEnergyProviderId'
        }

        /// <summary>
        /// Test the property 'SellPriceSchedule'
        /// </summary>
        [Fact]
        public void SellPriceScheduleTest()
        {
            // TODO unit test for the property 'SellPriceSchedule'
        }

        /// <summary>
        /// Test the property 'SellPriceFormula'
        /// </summary>
        [Fact]
        public void SellPriceFormulaTest()
        {
            // TODO unit test for the property 'SellPriceFormula'
        }

        /// <summary>
        /// Test the property 'IsPeriodicFullChargeOn'
        /// </summary>
        [Fact]
        public void IsPeriodicFullChargeOnTest()
        {
            // TODO unit test for the property 'IsPeriodicFullChargeOn'
        }

        /// <summary>
        /// Test the property 'PeriodicFullChargeDuration'
        /// </summary>
        [Fact]
        public void PeriodicFullChargeDurationTest()
        {
            // TODO unit test for the property 'PeriodicFullChargeDuration'
        }

        /// <summary>
        /// Test the property 'PeriodicFullChargeInterval'
        /// </summary>
        [Fact]
        public void PeriodicFullChargeIntervalTest()
        {
            // TODO unit test for the property 'PeriodicFullChargeInterval'
        }
    }
}
