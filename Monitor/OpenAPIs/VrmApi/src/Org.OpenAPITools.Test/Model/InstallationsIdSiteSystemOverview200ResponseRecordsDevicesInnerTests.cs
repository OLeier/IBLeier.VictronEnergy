/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner
        //private InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner instance;

        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerTests()
        {
            // TODO uncomment below to create an instance of InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner
            //instance = new InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner
        /// </summary>
        [Fact]
        public void InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerInstanceTest()
        {
            // TODO uncomment below to test "IsType" InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner
            //Assert.IsType<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner>(instance);
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

        /// <summary>
        /// Test the property 'ProductCode'
        /// </summary>
        [Fact]
        public void ProductCodeTest()
        {
            // TODO unit test for the property 'ProductCode'
        }

        /// <summary>
        /// Test the property 'IdSite'
        /// </summary>
        [Fact]
        public void IdSiteTest()
        {
            // TODO unit test for the property 'IdSite'
        }

        /// <summary>
        /// Test the property 'LastConnection'
        /// </summary>
        [Fact]
        public void LastConnectionTest()
        {
            // TODO unit test for the property 'LastConnection'
        }

        /// <summary>
        /// Test the property 'Settings'
        /// </summary>
        [Fact]
        public void SettingsTest()
        {
            // TODO unit test for the property 'Settings'
        }

        /// <summary>
        /// Test the property 'CustomName'
        /// </summary>
        [Fact]
        public void CustomNameTest()
        {
            // TODO unit test for the property 'CustomName'
        }

        /// <summary>
        /// Test the property 'ProductName'
        /// </summary>
        [Fact]
        public void ProductNameTest()
        {
            // TODO unit test for the property 'ProductName'
        }

        /// <summary>
        /// Test the property 'FirmwareVersion'
        /// </summary>
        [Fact]
        public void FirmwareVersionTest()
        {
            // TODO unit test for the property 'FirmwareVersion'
        }

        /// <summary>
        /// Test the property 'Class'
        /// </summary>
        [Fact]
        public void ClassTest()
        {
            // TODO unit test for the property 'Class'
        }

        /// <summary>
        /// Test the property 'Connection'
        /// </summary>
        [Fact]
        public void ConnectionTest()
        {
            // TODO unit test for the property 'Connection'
        }

        /// <summary>
        /// Test the property 'Instance'
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO unit test for the property 'Instance'
        }

        /// <summary>
        /// Test the property 'IdDeviceType'
        /// </summary>
        [Fact]
        public void IdDeviceTypeTest()
        {
            // TODO unit test for the property 'IdDeviceType'
        }

        /// <summary>
        /// Test the property 'SignalRSSI'
        /// </summary>
        [Fact]
        public void SignalRSSITest()
        {
            // TODO unit test for the property 'SignalRSSI'
        }

        /// <summary>
        /// Test the property 'SignalSNR'
        /// </summary>
        [Fact]
        public void SignalSNRTest()
        {
            // TODO unit test for the property 'SignalSNR'
        }

        /// <summary>
        /// Test the property 'SignalFrequency'
        /// </summary>
        [Fact]
        public void SignalFrequencyTest()
        {
            // TODO unit test for the property 'SignalFrequency'
        }

        /// <summary>
        /// Test the property 'AntennaType'
        /// </summary>
        [Fact]
        public void AntennaTypeTest()
        {
            // TODO unit test for the property 'AntennaType'
        }

        /// <summary>
        /// Test the property 'NetworkName'
        /// </summary>
        [Fact]
        public void NetworkNameTest()
        {
            // TODO unit test for the property 'NetworkName'
        }

        /// <summary>
        /// Test the property 'LoggingInterval'
        /// </summary>
        [Fact]
        public void LoggingIntervalTest()
        {
            // TODO unit test for the property 'LoggingInterval'
        }

        /// <summary>
        /// Test the property 'Identifier'
        /// </summary>
        [Fact]
        public void IdentifierTest()
        {
            // TODO unit test for the property 'Identifier'
        }

        /// <summary>
        /// Test the property 'LastPowerUpOrRestart'
        /// </summary>
        [Fact]
        public void LastPowerUpOrRestartTest()
        {
            // TODO unit test for the property 'LastPowerUpOrRestart'
        }

        /// <summary>
        /// Test the property 'MachineSerialNumber'
        /// </summary>
        [Fact]
        public void MachineSerialNumberTest()
        {
            // TODO unit test for the property 'MachineSerialNumber'
        }

        /// <summary>
        /// Test the property 'RemoteOnLan'
        /// </summary>
        [Fact]
        public void RemoteOnLanTest()
        {
            // TODO unit test for the property 'RemoteOnLan'
        }

        /// <summary>
        /// Test the property 'AutoUpdate'
        /// </summary>
        [Fact]
        public void AutoUpdateTest()
        {
            // TODO unit test for the property 'AutoUpdate'
        }

        /// <summary>
        /// Test the property 'UpdateTo'
        /// </summary>
        [Fact]
        public void UpdateToTest()
        {
            // TODO unit test for the property 'UpdateTo'
        }

        /// <summary>
        /// Test the property 'VncSshAuth'
        /// </summary>
        [Fact]
        public void VncSshAuthTest()
        {
            // TODO unit test for the property 'VncSshAuth'
        }

        /// <summary>
        /// Test the property 'VncStatus'
        /// </summary>
        [Fact]
        public void VncStatusTest()
        {
            // TODO unit test for the property 'VncStatus'
        }

        /// <summary>
        /// Test the property 'VncPort'
        /// </summary>
        [Fact]
        public void VncPortTest()
        {
            // TODO unit test for the property 'VncPort'
        }

        /// <summary>
        /// Test the property 'TwoWayCommunication'
        /// </summary>
        [Fact]
        public void TwoWayCommunicationTest()
        {
            // TODO unit test for the property 'TwoWayCommunication'
        }

        /// <summary>
        /// Test the property 'RemoteSupportEnabled'
        /// </summary>
        [Fact]
        public void RemoteSupportEnabledTest()
        {
            // TODO unit test for the property 'RemoteSupportEnabled'
        }

        /// <summary>
        /// Test the property 'RemoteSupportPort'
        /// </summary>
        [Fact]
        public void RemoteSupportPortTest()
        {
            // TODO unit test for the property 'RemoteSupportPort'
        }

        /// <summary>
        /// Test the property 'RemoteSupportIp'
        /// </summary>
        [Fact]
        public void RemoteSupportIpTest()
        {
            // TODO unit test for the property 'RemoteSupportIp'
        }

        /// <summary>
        /// Test the property 'RemoteSupport'
        /// </summary>
        [Fact]
        public void RemoteSupportTest()
        {
            // TODO unit test for the property 'RemoteSupport'
        }

        /// <summary>
        /// Test the property 'ProductId'
        /// </summary>
        [Fact]
        public void ProductIdTest()
        {
            // TODO unit test for the property 'ProductId'
        }

        /// <summary>
        /// Test the property 'Vmc'
        /// </summary>
        [Fact]
        public void VmcTest()
        {
            // TODO unit test for the property 'Vmc'
        }

        /// <summary>
        /// Test the property 'Vid'
        /// </summary>
        [Fact]
        public void VidTest()
        {
            // TODO unit test for the property 'Vid'
        }

        /// <summary>
        /// Test the property 'TempSensorConnected'
        /// </summary>
        [Fact]
        public void TempSensorConnectedTest()
        {
            // TODO unit test for the property 'TempSensorConnected'
        }

        /// <summary>
        /// Test the property 'FroniusDeviceType'
        /// </summary>
        [Fact]
        public void FroniusDeviceTypeTest()
        {
            // TODO unit test for the property 'FroniusDeviceType'
        }

        /// <summary>
        /// Test the property 'PL'
        /// </summary>
        [Fact]
        public void PLTest()
        {
            // TODO unit test for the property 'PL'
        }

        /// <summary>
        /// Test the property 'PdV'
        /// </summary>
        [Fact]
        public void PdVTest()
        {
            // TODO unit test for the property 'PdV'
        }

        /// <summary>
        /// Test the property 'InputType'
        /// </summary>
        [Fact]
        public void InputTypeTest()
        {
            // TODO unit test for the property 'InputType'
        }

        /// <summary>
        /// Test the property 'InputState'
        /// </summary>
        [Fact]
        public void InputStateTest()
        {
            // TODO unit test for the property 'InputState'
        }
    }
}
