/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using Xunit;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing UsersIdUserInstallations200ResponseRecordsInner
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class UsersIdUserInstallations200ResponseRecordsInnerTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for UsersIdUserInstallations200ResponseRecordsInner
        //private UsersIdUserInstallations200ResponseRecordsInner instance;

        public UsersIdUserInstallations200ResponseRecordsInnerTests()
        {
            // TODO uncomment below to create an instance of UsersIdUserInstallations200ResponseRecordsInner
            //instance = new UsersIdUserInstallations200ResponseRecordsInner();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersIdUserInstallations200ResponseRecordsInner
        /// </summary>
        [Fact]
        public void UsersIdUserInstallations200ResponseRecordsInnerInstanceTest()
        {
            // TODO uncomment below to test "IsType" UsersIdUserInstallations200ResponseRecordsInner
            //Assert.IsType<UsersIdUserInstallations200ResponseRecordsInner>(instance);
        }

        /// <summary>
        /// Test the property 'IdSite'
        /// </summary>
        [Fact]
        public void IdSiteTest()
        {
            // TODO unit test for the property 'IdSite'
        }

        /// <summary>
        /// Test the property 'AccessLevel'
        /// </summary>
        [Fact]
        public void AccessLevelTest()
        {
            // TODO unit test for the property 'AccessLevel'
        }

        /// <summary>
        /// Test the property 'Owner'
        /// </summary>
        [Fact]
        public void OwnerTest()
        {
            // TODO unit test for the property 'Owner'
        }

        /// <summary>
        /// Test the property 'IsAdmin'
        /// </summary>
        [Fact]
        public void IsAdminTest()
        {
            // TODO unit test for the property 'IsAdmin'
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

        /// <summary>
        /// Test the property 'Identifier'
        /// </summary>
        [Fact]
        public void IdentifierTest()
        {
            // TODO unit test for the property 'Identifier'
        }

        /// <summary>
        /// Test the property 'IdUser'
        /// </summary>
        [Fact]
        public void IdUserTest()
        {
            // TODO unit test for the property 'IdUser'
        }

        /// <summary>
        /// Test the property 'PvMax'
        /// </summary>
        [Fact]
        public void PvMaxTest()
        {
            // TODO unit test for the property 'PvMax'
        }

        /// <summary>
        /// Test the property 'Timezone'
        /// </summary>
        [Fact]
        public void TimezoneTest()
        {
            // TODO unit test for the property 'Timezone'
        }

        /// <summary>
        /// Test the property 'GeofenceEnabled'
        /// </summary>
        [Fact]
        public void GeofenceEnabledTest()
        {
            // TODO unit test for the property 'GeofenceEnabled'
        }

        /// <summary>
        /// Test the property 'RealtimeUpdates'
        /// </summary>
        [Fact]
        public void RealtimeUpdatesTest()
        {
            // TODO unit test for the property 'RealtimeUpdates'
        }

        /// <summary>
        /// Test the property 'HasMains'
        /// </summary>
        [Fact]
        public void HasMainsTest()
        {
            // TODO unit test for the property 'HasMains'
        }

        /// <summary>
        /// Test the property 'HasGenerator'
        /// </summary>
        [Fact]
        public void HasGeneratorTest()
        {
            // TODO unit test for the property 'HasGenerator'
        }

        /// <summary>
        /// Test the property 'AlarmMonitoring'
        /// </summary>
        [Fact]
        public void AlarmMonitoringTest()
        {
            // TODO unit test for the property 'AlarmMonitoring'
        }

        /// <summary>
        /// Test the property 'InvalidVRMAuthTokenUsedInLogRequest'
        /// </summary>
        [Fact]
        public void InvalidVRMAuthTokenUsedInLogRequestTest()
        {
            // TODO unit test for the property 'InvalidVRMAuthTokenUsedInLogRequest'
        }

        /// <summary>
        /// Test the property 'Syscreated'
        /// </summary>
        [Fact]
        public void SyscreatedTest()
        {
            // TODO unit test for the property 'Syscreated'
        }

        /// <summary>
        /// Test the property 'Shared'
        /// </summary>
        [Fact]
        public void SharedTest()
        {
            // TODO unit test for the property 'Shared'
        }

        /// <summary>
        /// Test the property 'DeviceIcon'
        /// </summary>
        [Fact]
        public void DeviceIconTest()
        {
            // TODO unit test for the property 'DeviceIcon'
        }

        /// <summary>
        /// Test the property 'Phonenumber'
        /// </summary>
        [Fact]
        public void PhonenumberTest()
        {
            // TODO unit test for the property 'Phonenumber'
        }

        /// <summary>
        /// Test the property 'Notes'
        /// </summary>
        [Fact]
        public void NotesTest()
        {
            // TODO unit test for the property 'Notes'
        }

        /// <summary>
        /// Test the property 'Geofence'
        /// </summary>
        [Fact]
        public void GeofenceTest()
        {
            // TODO unit test for the property 'Geofence'
        }

        /// <summary>
        /// Test the property 'NoDataAlarmTimeout'
        /// </summary>
        [Fact]
        public void NoDataAlarmTimeoutTest()
        {
            // TODO unit test for the property 'NoDataAlarmTimeout'
        }

        /// <summary>
        /// Test the property 'Alarm'
        /// </summary>
        [Fact]
        public void AlarmTest()
        {
            // TODO unit test for the property 'Alarm'
        }

        /// <summary>
        /// Test the property 'LastTimestamp'
        /// </summary>
        [Fact]
        public void LastTimestampTest()
        {
            // TODO unit test for the property 'LastTimestamp'
        }

        /// <summary>
        /// Test the property 'CurrentTime'
        /// </summary>
        [Fact]
        public void CurrentTimeTest()
        {
            // TODO unit test for the property 'CurrentTime'
        }

        /// <summary>
        /// Test the property 'TimezoneOffset'
        /// </summary>
        [Fact]
        public void TimezoneOffsetTest()
        {
            // TODO unit test for the property 'TimezoneOffset'
        }

        /// <summary>
        /// Test the property 'DemoMode'
        /// </summary>
        [Fact]
        public void DemoModeTest()
        {
            // TODO unit test for the property 'DemoMode'
        }

        /// <summary>
        /// Test the property 'MqttWebhost'
        /// </summary>
        [Fact]
        public void MqttWebhostTest()
        {
            // TODO unit test for the property 'MqttWebhost'
        }

        /// <summary>
        /// Test the property 'MqttHost'
        /// </summary>
        [Fact]
        public void MqttHostTest()
        {
            // TODO unit test for the property 'MqttHost'
        }

        /// <summary>
        /// Test the property 'HighWorkload'
        /// </summary>
        [Fact]
        public void HighWorkloadTest()
        {
            // TODO unit test for the property 'HighWorkload'
        }

        /// <summary>
        /// Test the property 'CurrentAlarms'
        /// </summary>
        [Fact]
        public void CurrentAlarmsTest()
        {
            // TODO unit test for the property 'CurrentAlarms'
        }

        /// <summary>
        /// Test the property 'NumAlarms'
        /// </summary>
        [Fact]
        public void NumAlarmsTest()
        {
            // TODO unit test for the property 'NumAlarms'
        }

        /// <summary>
        /// Test the property 'AvatarUrl'
        /// </summary>
        [Fact]
        public void AvatarUrlTest()
        {
            // TODO unit test for the property 'AvatarUrl'
        }

        /// <summary>
        /// Test the property 'Tags'
        /// </summary>
        [Fact]
        public void TagsTest()
        {
            // TODO unit test for the property 'Tags'
        }

        /// <summary>
        /// Test the property 'Images'
        /// </summary>
        [Fact]
        public void ImagesTest()
        {
            // TODO unit test for the property 'Images'
        }

        /// <summary>
        /// Test the property 'ViewPermissions'
        /// </summary>
        [Fact]
        public void ViewPermissionsTest()
        {
            // TODO unit test for the property 'ViewPermissions'
        }

        /// <summary>
        /// Test the property 'Extended'
        /// </summary>
        [Fact]
        public void ExtendedTest()
        {
            // TODO unit test for the property 'Extended'
        }
    }
}
