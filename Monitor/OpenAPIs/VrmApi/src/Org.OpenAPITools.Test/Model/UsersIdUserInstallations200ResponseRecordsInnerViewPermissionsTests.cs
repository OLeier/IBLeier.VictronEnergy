/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing UsersIdUserInstallations200ResponseRecordsInnerViewPermissions
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class UsersIdUserInstallations200ResponseRecordsInnerViewPermissionsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for UsersIdUserInstallations200ResponseRecordsInnerViewPermissions
        //private UsersIdUserInstallations200ResponseRecordsInnerViewPermissions instance;

        public UsersIdUserInstallations200ResponseRecordsInnerViewPermissionsTests()
        {
            // TODO uncomment below to create an instance of UsersIdUserInstallations200ResponseRecordsInnerViewPermissions
            //instance = new UsersIdUserInstallations200ResponseRecordsInnerViewPermissions();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersIdUserInstallations200ResponseRecordsInnerViewPermissions
        /// </summary>
        [Fact]
        public void UsersIdUserInstallations200ResponseRecordsInnerViewPermissionsInstanceTest()
        {
            // TODO uncomment below to test "IsType" UsersIdUserInstallations200ResponseRecordsInnerViewPermissions
            //Assert.IsType<UsersIdUserInstallations200ResponseRecordsInnerViewPermissions>(instance);
        }

        /// <summary>
        /// Test the property 'UpdateSettings'
        /// </summary>
        [Fact]
        public void UpdateSettingsTest()
        {
            // TODO unit test for the property 'UpdateSettings'
        }

        /// <summary>
        /// Test the property 'Settings'
        /// </summary>
        [Fact]
        public void SettingsTest()
        {
            // TODO unit test for the property 'Settings'
        }

        /// <summary>
        /// Test the property 'Diagnostics'
        /// </summary>
        [Fact]
        public void DiagnosticsTest()
        {
            // TODO unit test for the property 'Diagnostics'
        }

        /// <summary>
        /// Test the property 'Share'
        /// </summary>
        [Fact]
        public void ShareTest()
        {
            // TODO unit test for the property 'Share'
        }

        /// <summary>
        /// Test the property 'Vnc'
        /// </summary>
        [Fact]
        public void VncTest()
        {
            // TODO unit test for the property 'Vnc'
        }

        /// <summary>
        /// Test the property 'MqttRpc'
        /// </summary>
        [Fact]
        public void MqttRpcTest()
        {
            // TODO unit test for the property 'MqttRpc'
        }

        /// <summary>
        /// Test the property 'Vebus'
        /// </summary>
        [Fact]
        public void VebusTest()
        {
            // TODO unit test for the property 'Vebus'
        }

        /// <summary>
        /// Test the property 'Twoway'
        /// </summary>
        [Fact]
        public void TwowayTest()
        {
            // TODO unit test for the property 'Twoway'
        }

        /// <summary>
        /// Test the property 'ExactLocation'
        /// </summary>
        [Fact]
        public void ExactLocationTest()
        {
            // TODO unit test for the property 'ExactLocation'
        }

        /// <summary>
        /// Test the property 'Nodered'
        /// </summary>
        [Fact]
        public void NoderedTest()
        {
            // TODO unit test for the property 'Nodered'
        }

        /// <summary>
        /// Test the property 'NoderedDash'
        /// </summary>
        [Fact]
        public void NoderedDashTest()
        {
            // TODO unit test for the property 'NoderedDash'
        }

        /// <summary>
        /// Test the property 'Signalk'
        /// </summary>
        [Fact]
        public void SignalkTest()
        {
            // TODO unit test for the property 'Signalk'
        }
    }
}
