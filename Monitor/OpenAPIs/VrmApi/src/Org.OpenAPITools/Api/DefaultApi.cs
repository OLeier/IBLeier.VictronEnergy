// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDefaultApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DefaultApiEvents Events { get; }

        /// <summary>
        /// Log in using an e-mail and password
        /// </summary>
        /// <remarks>
        /// Used to authenticate as a user to access authenticated routes. 2FA token must be included if 2FA is enabled on the account. Returns a bearer token (JWT).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authLoginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginApiResponse"/>&gt;</returns>
        Task<IAuthLoginApiResponse> AuthLoginAsync(AuthLoginRequest authLoginRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Log in using an e-mail and password
        /// </summary>
        /// <remarks>
        /// Used to authenticate as a user to access authenticated routes. 2FA token must be included if 2FA is enabled on the account. Returns a bearer token (JWT).
        /// </remarks>
        /// <param name="authLoginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginApiResponse"/>?&gt;</returns>
        Task<IAuthLoginApiResponse?> AuthLoginOrDefaultAsync(AuthLoginRequest authLoginRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Log in as the demo account
        /// </summary>
        /// <remarks>
        /// Used to authenticate as the demo account. The demo user has limited access to a few demo installations and endpoints, intended for demonstration usage. Returns a bearer token (JWT).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAsDemoApiResponse"/>&gt;</returns>
        Task<IAuthLoginAsDemoApiResponse> AuthLoginAsDemoAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Log in as the demo account
        /// </summary>
        /// <remarks>
        /// Used to authenticate as the demo account. The demo user has limited access to a few demo installations and endpoints, intended for demonstration usage. Returns a bearer token (JWT).
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAsDemoApiResponse"/>?&gt;</returns>
        Task<IAuthLoginAsDemoApiResponse?> AuthLoginAsDemoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Log out using a token
        /// </summary>
        /// <remarks>
        /// Used to log out a user. The token provided in the authorization header will be blacklisted from the server and can no longer be used for authentication purposes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>&gt;</returns>
        Task<IAuthLogoutApiResponse> AuthLogoutAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Log out using a token
        /// </summary>
        /// <remarks>
        /// Used to log out a user. The token provided in the authorization header will be blacklisted from the server and can no longer be used for authentication purposes.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>?&gt;</returns>
        Task<IAuthLogoutApiResponse?> AuthLogoutOrDefaultAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve filtered and sorted attributes
        /// </summary>
        /// <remarks>
        /// Returns a JSON object of attributes with &#x60;idDataAttribute&#x60; as string keys. Filters out &#x60;targetTable&#x60;, &#x60;idDeviceType&#x60;, and &#x60;idDataAttribute&#x60; fields.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDataAttributesGetApiResponse"/>&gt;</returns>
        Task<IDataAttributesGetApiResponse> DataAttributesGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve filtered and sorted attributes
        /// </summary>
        /// <remarks>
        /// Returns a JSON object of attributes with &#x60;idDataAttribute&#x60; as string keys. Filters out &#x60;targetTable&#x60;, &#x60;idDeviceType&#x60;, and &#x60;idDataAttribute&#x60; fields.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDataAttributesGetApiResponse"/>?&gt;</returns>
        Task<IDataAttributesGetApiResponse?> DataAttributesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAuthLoginApiResponse"/>
    /// </summary>
    public interface IAuthLoginApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AuthLogin200Response?>, IUnauthorized<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IAuthLoginAsDemoApiResponse"/>
    /// </summary>
    public interface IAuthLoginAsDemoApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AuthLoginAsDemo200Response?>, IBadRequest<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IAuthLogoutApiResponse"/>
    /// </summary>
    public interface IAuthLogoutApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AuthLogout200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IDataAttributesGetApiResponse"/>
    /// </summary>
    public interface IDataAttributesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Dictionary<string, DataAttributesGet200ResponseValue>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefaultApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthLogin;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthLogin;

        internal void ExecuteOnAuthLogin(DefaultApi.AuthLoginApiResponse apiResponse)
        {
            OnAuthLogin?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthLogin(Exception exception)
        {
            OnErrorAuthLogin?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthLoginAsDemo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthLoginAsDemo;

        internal void ExecuteOnAuthLoginAsDemo(DefaultApi.AuthLoginAsDemoApiResponse apiResponse)
        {
            OnAuthLoginAsDemo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthLoginAsDemo(Exception exception)
        {
            OnErrorAuthLoginAsDemo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthLogout;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthLogout;

        internal void ExecuteOnAuthLogout(DefaultApi.AuthLogoutApiResponse apiResponse)
        {
            OnAuthLogout?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthLogout(Exception exception)
        {
            OnErrorAuthLogout?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDataAttributesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDataAttributesGet;

        internal void ExecuteOnDataAttributesGet(DefaultApi.DataAttributesGetApiResponse apiResponse)
        {
            OnDataAttributesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDataAttributesGet(Exception exception)
        {
            OnErrorDataAttributesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DefaultApi : IDefaultApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DefaultApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DefaultApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(ILogger<DefaultApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DefaultApiEvents defaultApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DefaultApi>();
            HttpClient = httpClient;
            Events = defaultApiEvents;
        }

        partial void FormatAuthLogin(AuthLoginRequest authLoginRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="authLoginRequest"></param>
        /// <returns></returns>
        private void ValidateAuthLogin(AuthLoginRequest authLoginRequest)
        {
            if (authLoginRequest == null)
                throw new ArgumentNullException(nameof(authLoginRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="authLoginRequest"></param>
        private void AfterAuthLoginDefaultImplementation(IAuthLoginApiResponse apiResponseLocalVar, AuthLoginRequest authLoginRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthLogin(ref suppressDefaultLog, apiResponseLocalVar, authLoginRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="authLoginRequest"></param>
        partial void AfterAuthLogin(ref bool suppressDefaultLog, IAuthLoginApiResponse apiResponseLocalVar, AuthLoginRequest authLoginRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="authLoginRequest"></param>
        private void OnErrorAuthLoginDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AuthLoginRequest authLoginRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAuthLogin(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, authLoginRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="authLoginRequest"></param>
        partial void OnErrorAuthLogin(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AuthLoginRequest authLoginRequest);

        /// <summary>
        /// Log in using an e-mail and password Used to authenticate as a user to access authenticated routes. 2FA token must be included if 2FA is enabled on the account. Returns a bearer token (JWT).
        /// </summary>
        /// <param name="authLoginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginApiResponse?> AuthLoginOrDefaultAsync(AuthLoginRequest authLoginRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AuthLoginAsync(authLoginRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Log in using an e-mail and password Used to authenticate as a user to access authenticated routes. 2FA token must be included if 2FA is enabled on the account. Returns a bearer token (JWT).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authLoginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginApiResponse> AuthLoginAsync(AuthLoginRequest authLoginRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthLogin(authLoginRequest);

                FormatAuthLogin(authLoginRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/auth/login"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/auth/login");

                    httpRequestMessageLocalVar.Content = (authLoginRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(authLoginRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AuthLoginApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AuthLoginApiResponse>();

                        AuthLoginApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/auth/login", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthLoginDefaultImplementation(apiResponseLocalVar, authLoginRequest);

                        Events.ExecuteOnAuthLogin(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthLoginDefaultImplementation(e, "/auth/login", uriBuilderLocalVar.Path, authLoginRequest);
                Events.ExecuteOnErrorAuthLogin(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AuthLoginApiResponse"/>
        /// </summary>
        public partial class AuthLoginApiResponse : Org.OpenAPITools.Client.ApiResponse, IAuthLoginApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AuthLoginApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AuthLoginApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthLoginApiResponse(ILogger<AuthLoginApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterAuthLoginAsDemoDefaultImplementation(IAuthLoginAsDemoApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterAuthLoginAsDemo(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterAuthLoginAsDemo(ref bool suppressDefaultLog, IAuthLoginAsDemoApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorAuthLoginAsDemoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAuthLoginAsDemo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorAuthLoginAsDemo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Log in as the demo account Used to authenticate as the demo account. The demo user has limited access to a few demo installations and endpoints, intended for demonstration usage. Returns a bearer token (JWT).
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAsDemoApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginAsDemoApiResponse?> AuthLoginAsDemoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AuthLoginAsDemoAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Log in as the demo account Used to authenticate as the demo account. The demo user has limited access to a few demo installations and endpoints, intended for demonstration usage. Returns a bearer token (JWT).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAsDemoApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginAsDemoApiResponse> AuthLoginAsDemoAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/auth/loginAsDemo"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/auth/loginAsDemo");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AuthLoginAsDemoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AuthLoginAsDemoApiResponse>();

                        AuthLoginAsDemoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/auth/loginAsDemo", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthLoginAsDemoDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnAuthLoginAsDemo(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthLoginAsDemoDefaultImplementation(e, "/auth/loginAsDemo", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorAuthLoginAsDemo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AuthLoginAsDemoApiResponse"/>
        /// </summary>
        public partial class AuthLoginAsDemoApiResponse : Org.OpenAPITools.Client.ApiResponse, IAuthLoginAsDemoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AuthLoginAsDemoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AuthLoginAsDemoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthLoginAsDemoApiResponse(ILogger<AuthLoginAsDemoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLoginAsDemo200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLoginAsDemo200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLoginAsDemo200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthLogout(ref string xAuthorization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <returns></returns>
        private void ValidateAuthLogout(string xAuthorization)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        private void AfterAuthLogoutDefaultImplementation(IAuthLogoutApiResponse apiResponseLocalVar, string xAuthorization)
        {
            bool suppressDefaultLog = false;
            AfterAuthLogout(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        partial void AfterAuthLogout(ref bool suppressDefaultLog, IAuthLogoutApiResponse apiResponseLocalVar, string xAuthorization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        private void OnErrorAuthLogoutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAuthLogout(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        partial void OnErrorAuthLogout(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization);

        /// <summary>
        /// Log out using a token Used to log out a user. The token provided in the authorization header will be blacklisted from the server and can no longer be used for authentication purposes.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>&gt;</returns>
        public async Task<IAuthLogoutApiResponse?> AuthLogoutOrDefaultAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AuthLogoutAsync(xAuthorization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Log out using a token Used to log out a user. The token provided in the authorization header will be blacklisted from the server and can no longer be used for authentication purposes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>&gt;</returns>
        public async Task<IAuthLogoutApiResponse> AuthLogoutAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthLogout(xAuthorization);

                FormatAuthLogout(ref xAuthorization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/auth/logout"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/auth/logout");

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AuthLogoutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AuthLogoutApiResponse>();

                        AuthLogoutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/auth/logout", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthLogoutDefaultImplementation(apiResponseLocalVar, xAuthorization);

                        Events.ExecuteOnAuthLogout(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthLogoutDefaultImplementation(e, "/auth/logout", uriBuilderLocalVar.Path, xAuthorization);
                Events.ExecuteOnErrorAuthLogout(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AuthLogoutApiResponse"/>
        /// </summary>
        public partial class AuthLogoutApiResponse : Org.OpenAPITools.Client.ApiResponse, IAuthLogoutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AuthLogoutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AuthLogoutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthLogoutApiResponse(ILogger<AuthLogoutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogout200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogout200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogout200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDataAttributesGetDefaultImplementation(IDataAttributesGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDataAttributesGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDataAttributesGet(ref bool suppressDefaultLog, IDataAttributesGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDataAttributesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDataAttributesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDataAttributesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Retrieve filtered and sorted attributes Returns a JSON object of attributes with &#x60;idDataAttribute&#x60; as string keys. Filters out &#x60;targetTable&#x60;, &#x60;idDeviceType&#x60;, and &#x60;idDataAttribute&#x60; fields.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDataAttributesGetApiResponse"/>&gt;</returns>
        public async Task<IDataAttributesGetApiResponse?> DataAttributesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DataAttributesGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve filtered and sorted attributes Returns a JSON object of attributes with &#x60;idDataAttribute&#x60; as string keys. Filters out &#x60;targetTable&#x60;, &#x60;idDeviceType&#x60;, and &#x60;idDataAttribute&#x60; fields.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDataAttributesGetApiResponse"/>&gt;</returns>
        public async Task<IDataAttributesGetApiResponse> DataAttributesGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/data-attributes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/data-attributes");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DataAttributesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DataAttributesGetApiResponse>();

                        DataAttributesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/data-attributes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDataAttributesGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDataAttributesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDataAttributesGetDefaultImplementation(e, "/data-attributes", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDataAttributesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DataAttributesGetApiResponse"/>
        /// </summary>
        public partial class DataAttributesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IDataAttributesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DataAttributesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DataAttributesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DataAttributesGetApiResponse(ILogger<DataAttributesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Dictionary<string, DataAttributesGet200ResponseValue>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, DataAttributesGet200ResponseValue>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Dictionary<string, DataAttributesGet200ResponseValue>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
