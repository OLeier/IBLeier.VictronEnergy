// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGeneralWidgetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GeneralWidgetsApiEvents Events { get; }

        /// <summary>
        /// GPS data for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves GPS data for the specified installation, used in the GPS widget.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGPSApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGPSApiResponse> InstallationsIdSiteWidgetsGPSAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// GPS data for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves GPS data for the specified installation, used in the GPS widget.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGPSApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGPSApiResponse?> InstallationsIdSiteWidgetsGPSOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Graph series for a given installation and set of attributes
        /// </summary>
        /// <remarks>
        /// Retrieves data points for a graph for the given installation and data attributes. Data attributes should be given as id&#39;s, codes or both. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="attributeIds">Attribute id&#39;s for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="width">Width of the graph in pixels, defaults to 768. (optional)</param>
        /// <param name="pointsPerPixel">The amount of datapoints per pixel of the width of the graph, defaults to two. (optional)</param>
        /// <param name="useMinMax">If 1, include the mean, min and max for each datapoint. Else, include only one value per datapoint. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGraphApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGraphApiResponse> InstallationsIdSiteWidgetsGraphAsync(string xAuthorization, string idSite, Option<string> attributeCodes = default, Option<int> attributeIds = default, Option<int> instance = default, Option<int> start = default, Option<int> end = default, Option<int> width = default, Option<decimal> pointsPerPixel = default, Option<decimal> useMinMax = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Graph series for a given installation and set of attributes
        /// </summary>
        /// <remarks>
        /// Retrieves data points for a graph for the given installation and data attributes. Data attributes should be given as id&#39;s, codes or both. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="attributeIds">Attribute id&#39;s for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="width">Width of the graph in pixels, defaults to 768. (optional)</param>
        /// <param name="pointsPerPixel">The amount of datapoints per pixel of the width of the graph, defaults to two. (optional)</param>
        /// <param name="useMinMax">If 1, include the mean, min and max for each datapoint. Else, include only one value per datapoint. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGraphApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGraphApiResponse?> InstallationsIdSiteWidgetsGraphOrDefaultAsync(string xAuthorization, string idSite, Option<string> attributeCodes = default, Option<int> attributeIds = default, Option<int> instance = default, Option<int> start = default, Option<int> end = default, Option<int> width = default, Option<decimal> pointsPerPixel = default, Option<decimal> useMinMax = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Hours of AC for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves hours of AC for an installation. If no timeframe is specified, data from the last day will be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHoursOfAcApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsHoursOfAcApiResponse> InstallationsIdSiteWidgetsHoursOfAcAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Hours of AC for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves hours of AC for an installation. If no timeframe is specified, data from the last day will be used.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHoursOfAcApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsHoursOfAcApiResponse?> InstallationsIdSiteWidgetsHoursOfAcOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsGPSApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsGPSApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGPS200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsGraphApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsGraphApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGraph200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsHoursOfAcApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsHoursOfAcApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsHoursOfAc200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GeneralWidgetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsGPS;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsGPS;

        internal void ExecuteOnInstallationsIdSiteWidgetsGPS(GeneralWidgetsApi.InstallationsIdSiteWidgetsGPSApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsGPS?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsGPS(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsGPS?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsGraph;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsGraph;

        internal void ExecuteOnInstallationsIdSiteWidgetsGraph(GeneralWidgetsApi.InstallationsIdSiteWidgetsGraphApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsGraph?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsGraph(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsGraph?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsHoursOfAc;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsHoursOfAc;

        internal void ExecuteOnInstallationsIdSiteWidgetsHoursOfAc(GeneralWidgetsApi.InstallationsIdSiteWidgetsHoursOfAcApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsHoursOfAc?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsHoursOfAc(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsHoursOfAc?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GeneralWidgetsApi : IGeneralWidgetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GeneralWidgetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GeneralWidgetsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralWidgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeneralWidgetsApi(ILogger<GeneralWidgetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GeneralWidgetsApiEvents generalWidgetsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GeneralWidgetsApi>();
            HttpClient = httpClient;
            Events = generalWidgetsApiEvents;
        }

        partial void FormatInstallationsIdSiteWidgetsGPS(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsGPS(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsGPSDefaultImplementation(IInstallationsIdSiteWidgetsGPSApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsGPS(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsGPS(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsGPSApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsGPSDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsGPS(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsGPS(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// GPS data for an installation Retrieves GPS data for the specified installation, used in the GPS widget.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGPSApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGPSApiResponse?> InstallationsIdSiteWidgetsGPSOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsGPSAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// GPS data for an installation Retrieves GPS data for the specified installation, used in the GPS widget.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGPSApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGPSApiResponse> InstallationsIdSiteWidgetsGPSAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsGPS(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsGPS(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/GPS"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/GPS");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsGPSApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsGPSApiResponse>();

                        InstallationsIdSiteWidgetsGPSApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/GPS", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsGPSDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsGPS(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsGPSDefaultImplementation(e, "/installations/{idSite}/widgets/GPS", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsGPS(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsGPSApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsGPSApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsGPSApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsGPSApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsGPSApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsGPSApiResponse(ILogger<InstallationsIdSiteWidgetsGPSApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGPS200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGPS200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGPS200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsGraph(ref string xAuthorization, ref string idSite, ref Option<string> attributeCodes, ref Option<int> attributeIds, ref Option<int> instance, ref Option<int> start, ref Option<int> end, ref Option<int> width, ref Option<decimal> pointsPerPixel, ref Option<decimal> useMinMax);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="attributeCodes"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsGraph(string xAuthorization, string idSite, Option<string> attributeCodes)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));

            if (attributeCodes.IsSet && attributeCodes.Value == null)
                throw new ArgumentNullException(nameof(attributeCodes));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="attributeIds"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="width"></param>
        /// <param name="pointsPerPixel"></param>
        /// <param name="useMinMax"></param>
        private void AfterInstallationsIdSiteWidgetsGraphDefaultImplementation(IInstallationsIdSiteWidgetsGraphApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<string> attributeCodes, Option<int> attributeIds, Option<int> instance, Option<int> start, Option<int> end, Option<int> width, Option<decimal> pointsPerPixel, Option<decimal> useMinMax)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsGraph(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, attributeCodes, attributeIds, instance, start, end, width, pointsPerPixel, useMinMax);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="attributeIds"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="width"></param>
        /// <param name="pointsPerPixel"></param>
        /// <param name="useMinMax"></param>
        partial void AfterInstallationsIdSiteWidgetsGraph(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsGraphApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<string> attributeCodes, Option<int> attributeIds, Option<int> instance, Option<int> start, Option<int> end, Option<int> width, Option<decimal> pointsPerPixel, Option<decimal> useMinMax);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="attributeIds"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="width"></param>
        /// <param name="pointsPerPixel"></param>
        /// <param name="useMinMax"></param>
        private void OnErrorInstallationsIdSiteWidgetsGraphDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<string> attributeCodes, Option<int> attributeIds, Option<int> instance, Option<int> start, Option<int> end, Option<int> width, Option<decimal> pointsPerPixel, Option<decimal> useMinMax)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsGraph(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, attributeCodes, attributeIds, instance, start, end, width, pointsPerPixel, useMinMax);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="attributeIds"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="width"></param>
        /// <param name="pointsPerPixel"></param>
        /// <param name="useMinMax"></param>
        partial void OnErrorInstallationsIdSiteWidgetsGraph(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<string> attributeCodes, Option<int> attributeIds, Option<int> instance, Option<int> start, Option<int> end, Option<int> width, Option<decimal> pointsPerPixel, Option<decimal> useMinMax);

        /// <summary>
        /// Graph series for a given installation and set of attributes Retrieves data points for a graph for the given installation and data attributes. Data attributes should be given as id&#39;s, codes or both. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="attributeIds">Attribute id&#39;s for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="width">Width of the graph in pixels, defaults to 768. (optional)</param>
        /// <param name="pointsPerPixel">The amount of datapoints per pixel of the width of the graph, defaults to two. (optional)</param>
        /// <param name="useMinMax">If 1, include the mean, min and max for each datapoint. Else, include only one value per datapoint. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGraphApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGraphApiResponse?> InstallationsIdSiteWidgetsGraphOrDefaultAsync(string xAuthorization, string idSite, Option<string> attributeCodes = default, Option<int> attributeIds = default, Option<int> instance = default, Option<int> start = default, Option<int> end = default, Option<int> width = default, Option<decimal> pointsPerPixel = default, Option<decimal> useMinMax = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsGraphAsync(xAuthorization, idSite, attributeCodes, attributeIds, instance, start, end, width, pointsPerPixel, useMinMax, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Graph series for a given installation and set of attributes Retrieves data points for a graph for the given installation and data attributes. Data attributes should be given as id&#39;s, codes or both. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="attributeIds">Attribute id&#39;s for which to retrieve series, repeated for each attribute. (optional)</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="width">Width of the graph in pixels, defaults to 768. (optional)</param>
        /// <param name="pointsPerPixel">The amount of datapoints per pixel of the width of the graph, defaults to two. (optional)</param>
        /// <param name="useMinMax">If 1, include the mean, min and max for each datapoint. Else, include only one value per datapoint. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGraphApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGraphApiResponse> InstallationsIdSiteWidgetsGraphAsync(string xAuthorization, string idSite, Option<string> attributeCodes = default, Option<int> attributeIds = default, Option<int> instance = default, Option<int> start = default, Option<int> end = default, Option<int> width = default, Option<decimal> pointsPerPixel = default, Option<decimal> useMinMax = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsGraph(xAuthorization, idSite, attributeCodes);

                FormatInstallationsIdSiteWidgetsGraph(ref xAuthorization, ref idSite, ref attributeCodes, ref attributeIds, ref instance, ref start, ref end, ref width, ref pointsPerPixel, ref useMinMax);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/Graph"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/Graph");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (attributeCodes.IsSet)
                        parseQueryStringLocalVar["attributeCodes[]"] = ClientUtils.ParameterToString(attributeCodes.Value);

                    if (attributeIds.IsSet)
                        parseQueryStringLocalVar["attributeIds[]"] = ClientUtils.ParameterToString(attributeIds.Value);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    if (width.IsSet)
                        parseQueryStringLocalVar["width"] = ClientUtils.ParameterToString(width.Value);

                    if (pointsPerPixel.IsSet)
                        parseQueryStringLocalVar["pointsPerPixel"] = ClientUtils.ParameterToString(pointsPerPixel.Value);

                    if (useMinMax.IsSet)
                        parseQueryStringLocalVar["useMinMax"] = ClientUtils.ParameterToString(useMinMax.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsGraphApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsGraphApiResponse>();

                        InstallationsIdSiteWidgetsGraphApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/Graph", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsGraphDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, attributeCodes, attributeIds, instance, start, end, width, pointsPerPixel, useMinMax);

                        Events.ExecuteOnInstallationsIdSiteWidgetsGraph(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsGraphDefaultImplementation(e, "/installations/{idSite}/widgets/Graph", uriBuilderLocalVar.Path, xAuthorization, idSite, attributeCodes, attributeIds, instance, start, end, width, pointsPerPixel, useMinMax);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsGraph(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsGraphApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsGraphApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsGraphApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsGraphApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsGraphApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsGraphApiResponse(ILogger<InstallationsIdSiteWidgetsGraphApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGraph200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGraph200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGraph200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsHoursOfAc(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsHoursOfAc(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsHoursOfAcDefaultImplementation(IInstallationsIdSiteWidgetsHoursOfAcApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsHoursOfAc(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsHoursOfAc(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsHoursOfAcApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsHoursOfAcDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsHoursOfAc(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsHoursOfAc(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Hours of AC for an installation Retrieves hours of AC for an installation. If no timeframe is specified, data from the last day will be used.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHoursOfAcApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsHoursOfAcApiResponse?> InstallationsIdSiteWidgetsHoursOfAcOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsHoursOfAcAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Hours of AC for an installation Retrieves hours of AC for an installation. If no timeframe is specified, data from the last day will be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHoursOfAcApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsHoursOfAcApiResponse> InstallationsIdSiteWidgetsHoursOfAcAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsHoursOfAc(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsHoursOfAc(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/HoursOfAc"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/HoursOfAc");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsHoursOfAcApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsHoursOfAcApiResponse>();

                        InstallationsIdSiteWidgetsHoursOfAcApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/HoursOfAc", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsHoursOfAcDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsHoursOfAc(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsHoursOfAcDefaultImplementation(e, "/installations/{idSite}/widgets/HoursOfAc", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsHoursOfAc(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsHoursOfAcApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsHoursOfAcApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsHoursOfAcApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsHoursOfAcApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsHoursOfAcApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsHoursOfAcApiResponse(ILogger<InstallationsIdSiteWidgetsHoursOfAcApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsHoursOfAc200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsHoursOfAc200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsHoursOfAc200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
