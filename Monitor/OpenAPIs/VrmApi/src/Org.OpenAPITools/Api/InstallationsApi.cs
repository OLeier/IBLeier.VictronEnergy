// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IInstallationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        InstallationsApiEvents Events { get; }

        /// <summary>
        /// Download installation overview
        /// </summary>
        /// <remarks>
        /// Fetches a customized overview of installations with specified columns, site IDs, and settings. The response can be either JSON or an XLSX file depending on the &#x60;jsonResponse&#x60; parameter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationOverviewDownloadApiResponse"/>&gt;</returns>
        Task<IInstallationOverviewDownloadApiResponse> InstallationOverviewDownloadAsync(InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download installation overview
        /// </summary>
        /// <remarks>
        /// Fetches a customized overview of installations with specified columns, site IDs, and settings. The response can be either JSON or an XLSX file depending on the &#x60;jsonResponse&#x60; parameter.
        /// </remarks>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationOverviewDownloadApiResponse"/>?&gt;</returns>
        Task<IInstallationOverviewDownloadApiResponse?> InstallationOverviewDownloadOrDefaultAsync(InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Alarm
        /// </summary>
        /// <remarks>
        /// Deletes an alarm already linked to an installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsDeleteApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteAlarmsDeleteApiResponse> InstallationsIdSiteAlarmsDeleteAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Alarm
        /// </summary>
        /// <remarks>
        /// Deletes an alarm already linked to an installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsDeleteApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteAlarmsDeleteApiResponse?> InstallationsIdSiteAlarmsDeleteOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Alarms
        /// </summary>
        /// <remarks>
        /// Gets all information about alarms for a specific installation. Next to that, it also receives all data required to create new alarms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsGetApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteAlarmsGetApiResponse> InstallationsIdSiteAlarmsGetAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Alarms
        /// </summary>
        /// <remarks>
        /// Gets all information about alarms for a specific installation. Next to that, it also receives all data required to create new alarms
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsGetApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteAlarmsGetApiResponse?> InstallationsIdSiteAlarmsGetOrDefaultAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Alarm
        /// </summary>
        /// <remarks>
        /// Adds an alarm to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPostApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteAlarmsPostApiResponse> InstallationsIdSiteAlarmsPostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Alarm
        /// </summary>
        /// <remarks>
        /// Adds an alarm to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPostApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteAlarmsPostApiResponse?> InstallationsIdSiteAlarmsPostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Edit Alarm
        /// </summary>
        /// <remarks>
        /// Edits an alarm already linked to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPutApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteAlarmsPutApiResponse> InstallationsIdSiteAlarmsPutAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Edit Alarm
        /// </summary>
        /// <remarks>
        /// Edits an alarm already linked to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPutApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteAlarmsPutApiResponse?> InstallationsIdSiteAlarmsPutOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clear alarm
        /// </summary>
        /// <remarks>
        /// Clears alarms and marks them as cleared by the user in Event Logs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteClearAlarmApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteClearAlarmApiResponse> InstallationsIdSiteClearAlarmAsync(string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clear alarm
        /// </summary>
        /// <remarks>
        /// Clears alarms and marks them as cleared by the user in Event Logs.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteClearAlarmApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteClearAlarmApiResponse?> InstallationsIdSiteClearAlarmOrDefaultAsync(string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Custom Widget
        /// </summary>
        /// <remarks>
        /// Delete a custom widget
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetDeleteApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetDeleteApiResponse> InstallationsIdSiteCustomWidgetDeleteAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Custom Widget
        /// </summary>
        /// <remarks>
        /// Delete a custom widget
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetDeleteApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetDeleteApiResponse?> InstallationsIdSiteCustomWidgetDeleteOrDefaultAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Custom Widgets
        /// </summary>
        /// <remarks>
        /// Get a custom widget
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="idCustomWidget">ID of the custom widget</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetGetApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetGetApiResponse> InstallationsIdSiteCustomWidgetGetAsync(string xAuthorization, decimal idSite, decimal idCustomWidget, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Custom Widgets
        /// </summary>
        /// <remarks>
        /// Get a custom widget
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="idCustomWidget">ID of the custom widget</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetGetApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetGetApiResponse?> InstallationsIdSiteCustomWidgetGetOrDefaultAsync(string xAuthorization, decimal idSite, decimal idCustomWidget, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Custom Widget
        /// </summary>
        /// <remarks>
        /// Update a custom widget
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPatchApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetPatchApiResponse> InstallationsIdSiteCustomWidgetPatchAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Custom Widget
        /// </summary>
        /// <remarks>
        /// Update a custom widget
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPatchApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetPatchApiResponse?> InstallationsIdSiteCustomWidgetPatchOrDefaultAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Custom Widget
        /// </summary>
        /// <remarks>
        /// Create a custom widget
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPostApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetPostApiResponse> InstallationsIdSiteCustomWidgetPostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Custom Widget
        /// </summary>
        /// <remarks>
        /// Create a custom widget
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPostApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteCustomWidgetPostApiResponse?> InstallationsIdSiteCustomWidgetPostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download installation data
        /// </summary>
        /// <remarks>
        /// Retrieves a base64 encoded string containing the specified installation data, in the specified format.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="datatype">Type of data to export, defaults to log. (optional)</param>
        /// <param name="format">Export data file format, defaults to csv. (optional)</param>
        /// <param name="debug">Include debug attributes, only for admins and restricted admins, defaults to false. (optional)</param>
        /// <param name="async">If true, the request is executed asynchronously and the result is not included in the response but sent to the email address of the requesting account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDataDownloadApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteDataDownloadApiResponse> InstallationsIdSiteDataDownloadAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> datatype = default, Option<string> format = default, Option<bool> debug = default, Option<bool> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download installation data
        /// </summary>
        /// <remarks>
        /// Retrieves a base64 encoded string containing the specified installation data, in the specified format.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="datatype">Type of data to export, defaults to log. (optional)</param>
        /// <param name="format">Export data file format, defaults to csv. (optional)</param>
        /// <param name="debug">Include debug attributes, only for admins and restricted admins, defaults to false. (optional)</param>
        /// <param name="async">If true, the request is executed asynchronously and the result is not included in the response but sent to the email address of the requesting account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDataDownloadApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteDataDownloadApiResponse?> InstallationsIdSiteDataDownloadOrDefaultAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> datatype = default, Option<string> format = default, Option<bool> debug = default, Option<bool> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Diagnostic data for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves log data for an installation. This endpoint is only accessible to users with access to the installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="count">How many records to fetch, 100 if not specified. (optional)</param>
        /// <param name="page">Which page to fetch, 1 if not specified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDiagnosticsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteDiagnosticsApiResponse> InstallationsIdSiteDiagnosticsAsync(string xAuthorization, string idSite, Option<int> count = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Diagnostic data for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves log data for an installation. This endpoint is only accessible to users with access to the installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="count">How many records to fetch, 100 if not specified. (optional)</param>
        /// <param name="page">Which page to fetch, 1 if not specified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDiagnosticsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteDiagnosticsApiResponse?> InstallationsIdSiteDiagnosticsOrDefaultAsync(string xAuthorization, string idSite, Option<int> count = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dynamic ESS configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsGetApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteDynamicEssSettingsGetApiResponse> InstallationsIdSiteDynamicEssSettingsGetAsync(int id, string xAuthorization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dynamic ESS configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsGetApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteDynamicEssSettingsGetApiResponse?> InstallationsIdSiteDynamicEssSettingsGetOrDefaultAsync(int id, string xAuthorization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dynamic ESS configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsPostApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteDynamicEssSettingsPostApiResponse> InstallationsIdSiteDynamicEssSettingsPostAsync(int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dynamic ESS configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsPostApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteDynamicEssSettingsPostApiResponse?> InstallationsIdSiteDynamicEssSettingsPostOrDefaultAsync(int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// GPS tracks for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves GPS tracks for an installation as a KML file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data.</param>
        /// <param name="end">Timestamp to which to fetch data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteGpsDownloadApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteGpsDownloadApiResponse> InstallationsIdSiteGpsDownloadAsync(string xAuthorization, string idSite, int start, int end, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// GPS tracks for an installation
        /// </summary>
        /// <remarks>
        /// Retrieves GPS tracks for an installation as a KML file.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data.</param>
        /// <param name="end">Timestamp to which to fetch data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteGpsDownloadApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteGpsDownloadApiResponse?> InstallationsIdSiteGpsDownloadOrDefaultAsync(string xAuthorization, string idSite, int start, int end, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Invite user to installation
        /// </summary>
        /// <remarks>
        /// Sends an invitation to a user to gain access to a specific installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteInvitePostApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteInvitePostApiResponse> InstallationsIdSiteInvitePostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Invite user to installation
        /// </summary>
        /// <remarks>
        /// Sends an invitation to a user to gain access to a specific installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteInvitePostApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteInvitePostApiResponse?> InstallationsIdSiteInvitePostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Overall installation stats
        /// </summary>
        /// <remarks>
        /// Retrieves installation stats grouped by the last year, month, week and day. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteOverallstatsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteOverallstatsApiResponse> InstallationsIdSiteOverallstatsAsync(string xAuthorization, string idSite, Option<string> type = default, Option<string> attributeCodes = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Overall installation stats
        /// </summary>
        /// <remarks>
        /// Retrieves installation stats grouped by the last year, month, week and day. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteOverallstatsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteOverallstatsApiResponse?> InstallationsIdSiteOverallstatsOrDefaultAsync(string xAuthorization, string idSite, Option<string> type = default, Option<string> attributeCodes = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves the timestamp of the last forecasts reset
        /// </summary>
        /// <remarks>
        /// Queries influx for the last time the forecasts for this installation were reset. Returns either the timestamp, or 0 if the forecasts were never reset.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsGetApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteResetForecastsGetApiResponse> InstallationsIdSiteResetForecastsGetAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves the timestamp of the last forecasts reset
        /// </summary>
        /// <remarks>
        /// Queries influx for the last time the forecasts for this installation were reset. Returns either the timestamp, or 0 if the forecasts were never reset.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsGetApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteResetForecastsGetApiResponse?> InstallationsIdSiteResetForecastsGetOrDefaultAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset installation forecasts
        /// </summary>
        /// <remarks>
        /// Logs the current timestamp with the resetType in influx. The forecasting model then ingores all data before this timestamp, effectively treating the installation as if it&#39;s a new one
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsPostApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteResetForecastsPostApiResponse> InstallationsIdSiteResetForecastsPostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset installation forecasts
        /// </summary>
        /// <remarks>
        /// Logs the current timestamp with the resetType in influx. The forecasting model then ingores all data before this timestamp, effectively treating the installation as if it&#39;s a new one
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsPostApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteResetForecastsPostApiResponse?> InstallationsIdSiteResetForecastsPostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update settings for a specific installation
        /// </summary>
        /// <remarks>
        /// Allows the user to modify settings related to a specific installation identified by its ID. You can send one or more of the fields you want to update at once.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteSettingsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSettingsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteSettingsApiResponse> InstallationsIdSiteSettingsAsync(int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update settings for a specific installation
        /// </summary>
        /// <remarks>
        /// Allows the user to modify settings related to a specific installation identified by its ID. You can send one or more of the fields you want to update at once.
        /// </remarks>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteSettingsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSettingsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteSettingsApiResponse?> InstallationsIdSiteSettingsOrDefaultAsync(int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Installation stats
        /// </summary>
        /// <remarks>
        /// Retrieves installation stats for the specified period, or one day if none specified. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  There is a maximum allowed time period for each interval, which is: * 31 days for 15 minutes * 31 days for hours * 180 days for days * 140 days for weeks * 24 months for months * 5 years for years 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="interval">Time between retrieved data points, defaults to hours. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="showInstance">If included, attributes will be grouped by instance. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteStatsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteStatsApiResponse> InstallationsIdSiteStatsAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> type = default, Option<string> interval = default, Option<string> attributeCodes = default, Option<bool> showInstance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Installation stats
        /// </summary>
        /// <remarks>
        /// Retrieves installation stats for the specified period, or one day if none specified. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  There is a maximum allowed time period for each interval, which is: * 31 days for 15 minutes * 31 days for hours * 180 days for days * 140 days for weeks * 24 months for months * 5 years for years 
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="interval">Time between retrieved data points, defaults to hours. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="showInstance">If included, attributes will be grouped by instance. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteStatsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteStatsApiResponse?> InstallationsIdSiteStatsOrDefaultAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> type = default, Option<string> interval = default, Option<string> attributeCodes = default, Option<bool> showInstance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Connected devices for a given installation
        /// </summary>
        /// <remarks>
        /// Retrieves a list of devices to which are connected to this installation. This endpoint is only accessible to users with access to the installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSystemOverviewApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteSystemOverviewApiResponse> InstallationsIdSiteSystemOverviewAsync(string xAuthorization, string idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Connected devices for a given installation
        /// </summary>
        /// <remarks>
        /// Retrieves a list of devices to which are connected to this installation. This endpoint is only accessible to users with access to the installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSystemOverviewApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteSystemOverviewApiResponse?> InstallationsIdSiteSystemOverviewOrDefaultAsync(string xAuthorization, string idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove installation tag
        /// </summary>
        /// <remarks>
        /// Remove tag for an installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsDeleteApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteTagsDeleteApiResponse> InstallationsIdSiteTagsDeleteAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove installation tag
        /// </summary>
        /// <remarks>
        /// Remove tag for an installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsDeleteApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteTagsDeleteApiResponse?> InstallationsIdSiteTagsDeleteOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get installation tags
        /// </summary>
        /// <remarks>
        /// Tags for an installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsGetApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteTagsGetApiResponse> InstallationsIdSiteTagsGetAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get installation tags
        /// </summary>
        /// <remarks>
        /// Tags for an installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsGetApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteTagsGetApiResponse?> InstallationsIdSiteTagsGetOrDefaultAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add installation tag
        /// </summary>
        /// <remarks>
        /// Add tag for an installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsPutApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteTagsPutApiResponse> InstallationsIdSiteTagsPutAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add installation tag
        /// </summary>
        /// <remarks>
        /// Add tag for an installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsPutApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteTagsPutApiResponse?> InstallationsIdSiteTagsPutOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IInstallationOverviewDownloadApiResponse"/>
    /// </summary>
    public interface IInstallationOverviewDownloadApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationOverviewDownload200Response?>, IBadRequest<Object?>, IForbidden<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteAlarmsDeleteApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteAlarmsDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsDelete200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteAlarmsGetApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteAlarmsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsGet200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteAlarmsPostApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteAlarmsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPost200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteAlarmsPutApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteAlarmsPutApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPut200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteClearAlarmApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteClearAlarmApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteClearAlarm200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteCustomWidgetDeleteApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteCustomWidgetDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteCustomWidgetGetApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteCustomWidgetGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetGet200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteCustomWidgetPatchApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteCustomWidgetPatchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteCustomWidgetPostApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteCustomWidgetPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetPost200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteDataDownloadApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteDataDownloadApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteDataDownload200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteDiagnosticsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteDiagnosticsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteDiagnostics200Response?>, IForbidden<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteDynamicEssSettingsGetApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteDynamicEssSettingsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response?>, IForbidden<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response?>, INotFound<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteDynamicEssSettingsPostApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteDynamicEssSettingsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response?>, IForbidden<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response?>, INotFound<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteGpsDownloadApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteGpsDownloadApiResponse : Org.OpenAPITools.Client.IApiResponse, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteInvitePostApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteInvitePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteInvitePost200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteOverallstatsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteOverallstatsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteOverallstats200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteResetForecastsGetApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteResetForecastsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsGet200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteResetForecastsPostApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteResetForecastsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response?>, IBadRequest<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost400Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteSettingsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteSettingsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteSettings200Response?>, IForbidden<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response?>, INotFound<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteStatsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteStatsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteStats200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteSystemOverviewApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteSystemOverviewApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteSystemOverview200Response?>, IForbidden<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteTagsDeleteApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteTagsDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteTagsDelete200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteTagsGetApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteTagsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteTagsGet200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteTagsPutApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteTagsPutApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteTagsPut200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class InstallationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationOverviewDownload;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationOverviewDownload;

        internal void ExecuteOnInstallationOverviewDownload(InstallationsApi.InstallationOverviewDownloadApiResponse apiResponse)
        {
            OnInstallationOverviewDownload?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationOverviewDownload(Exception exception)
        {
            OnErrorInstallationOverviewDownload?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteAlarmsDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteAlarmsDelete;

        internal void ExecuteOnInstallationsIdSiteAlarmsDelete(InstallationsApi.InstallationsIdSiteAlarmsDeleteApiResponse apiResponse)
        {
            OnInstallationsIdSiteAlarmsDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteAlarmsDelete(Exception exception)
        {
            OnErrorInstallationsIdSiteAlarmsDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteAlarmsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteAlarmsGet;

        internal void ExecuteOnInstallationsIdSiteAlarmsGet(InstallationsApi.InstallationsIdSiteAlarmsGetApiResponse apiResponse)
        {
            OnInstallationsIdSiteAlarmsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteAlarmsGet(Exception exception)
        {
            OnErrorInstallationsIdSiteAlarmsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteAlarmsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteAlarmsPost;

        internal void ExecuteOnInstallationsIdSiteAlarmsPost(InstallationsApi.InstallationsIdSiteAlarmsPostApiResponse apiResponse)
        {
            OnInstallationsIdSiteAlarmsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteAlarmsPost(Exception exception)
        {
            OnErrorInstallationsIdSiteAlarmsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteAlarmsPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteAlarmsPut;

        internal void ExecuteOnInstallationsIdSiteAlarmsPut(InstallationsApi.InstallationsIdSiteAlarmsPutApiResponse apiResponse)
        {
            OnInstallationsIdSiteAlarmsPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteAlarmsPut(Exception exception)
        {
            OnErrorInstallationsIdSiteAlarmsPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteClearAlarm;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteClearAlarm;

        internal void ExecuteOnInstallationsIdSiteClearAlarm(InstallationsApi.InstallationsIdSiteClearAlarmApiResponse apiResponse)
        {
            OnInstallationsIdSiteClearAlarm?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteClearAlarm(Exception exception)
        {
            OnErrorInstallationsIdSiteClearAlarm?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteCustomWidgetDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteCustomWidgetDelete;

        internal void ExecuteOnInstallationsIdSiteCustomWidgetDelete(InstallationsApi.InstallationsIdSiteCustomWidgetDeleteApiResponse apiResponse)
        {
            OnInstallationsIdSiteCustomWidgetDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteCustomWidgetDelete(Exception exception)
        {
            OnErrorInstallationsIdSiteCustomWidgetDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteCustomWidgetGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteCustomWidgetGet;

        internal void ExecuteOnInstallationsIdSiteCustomWidgetGet(InstallationsApi.InstallationsIdSiteCustomWidgetGetApiResponse apiResponse)
        {
            OnInstallationsIdSiteCustomWidgetGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteCustomWidgetGet(Exception exception)
        {
            OnErrorInstallationsIdSiteCustomWidgetGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteCustomWidgetPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteCustomWidgetPatch;

        internal void ExecuteOnInstallationsIdSiteCustomWidgetPatch(InstallationsApi.InstallationsIdSiteCustomWidgetPatchApiResponse apiResponse)
        {
            OnInstallationsIdSiteCustomWidgetPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteCustomWidgetPatch(Exception exception)
        {
            OnErrorInstallationsIdSiteCustomWidgetPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteCustomWidgetPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteCustomWidgetPost;

        internal void ExecuteOnInstallationsIdSiteCustomWidgetPost(InstallationsApi.InstallationsIdSiteCustomWidgetPostApiResponse apiResponse)
        {
            OnInstallationsIdSiteCustomWidgetPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteCustomWidgetPost(Exception exception)
        {
            OnErrorInstallationsIdSiteCustomWidgetPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteDataDownload;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteDataDownload;

        internal void ExecuteOnInstallationsIdSiteDataDownload(InstallationsApi.InstallationsIdSiteDataDownloadApiResponse apiResponse)
        {
            OnInstallationsIdSiteDataDownload?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteDataDownload(Exception exception)
        {
            OnErrorInstallationsIdSiteDataDownload?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteDiagnostics;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteDiagnostics;

        internal void ExecuteOnInstallationsIdSiteDiagnostics(InstallationsApi.InstallationsIdSiteDiagnosticsApiResponse apiResponse)
        {
            OnInstallationsIdSiteDiagnostics?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteDiagnostics(Exception exception)
        {
            OnErrorInstallationsIdSiteDiagnostics?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteDynamicEssSettingsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteDynamicEssSettingsGet;

        internal void ExecuteOnInstallationsIdSiteDynamicEssSettingsGet(InstallationsApi.InstallationsIdSiteDynamicEssSettingsGetApiResponse apiResponse)
        {
            OnInstallationsIdSiteDynamicEssSettingsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteDynamicEssSettingsGet(Exception exception)
        {
            OnErrorInstallationsIdSiteDynamicEssSettingsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteDynamicEssSettingsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteDynamicEssSettingsPost;

        internal void ExecuteOnInstallationsIdSiteDynamicEssSettingsPost(InstallationsApi.InstallationsIdSiteDynamicEssSettingsPostApiResponse apiResponse)
        {
            OnInstallationsIdSiteDynamicEssSettingsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteDynamicEssSettingsPost(Exception exception)
        {
            OnErrorInstallationsIdSiteDynamicEssSettingsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteGpsDownload;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteGpsDownload;

        internal void ExecuteOnInstallationsIdSiteGpsDownload(InstallationsApi.InstallationsIdSiteGpsDownloadApiResponse apiResponse)
        {
            OnInstallationsIdSiteGpsDownload?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteGpsDownload(Exception exception)
        {
            OnErrorInstallationsIdSiteGpsDownload?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteInvitePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteInvitePost;

        internal void ExecuteOnInstallationsIdSiteInvitePost(InstallationsApi.InstallationsIdSiteInvitePostApiResponse apiResponse)
        {
            OnInstallationsIdSiteInvitePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteInvitePost(Exception exception)
        {
            OnErrorInstallationsIdSiteInvitePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteOverallstats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteOverallstats;

        internal void ExecuteOnInstallationsIdSiteOverallstats(InstallationsApi.InstallationsIdSiteOverallstatsApiResponse apiResponse)
        {
            OnInstallationsIdSiteOverallstats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteOverallstats(Exception exception)
        {
            OnErrorInstallationsIdSiteOverallstats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteResetForecastsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteResetForecastsGet;

        internal void ExecuteOnInstallationsIdSiteResetForecastsGet(InstallationsApi.InstallationsIdSiteResetForecastsGetApiResponse apiResponse)
        {
            OnInstallationsIdSiteResetForecastsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteResetForecastsGet(Exception exception)
        {
            OnErrorInstallationsIdSiteResetForecastsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteResetForecastsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteResetForecastsPost;

        internal void ExecuteOnInstallationsIdSiteResetForecastsPost(InstallationsApi.InstallationsIdSiteResetForecastsPostApiResponse apiResponse)
        {
            OnInstallationsIdSiteResetForecastsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteResetForecastsPost(Exception exception)
        {
            OnErrorInstallationsIdSiteResetForecastsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteSettings;

        internal void ExecuteOnInstallationsIdSiteSettings(InstallationsApi.InstallationsIdSiteSettingsApiResponse apiResponse)
        {
            OnInstallationsIdSiteSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteSettings(Exception exception)
        {
            OnErrorInstallationsIdSiteSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteStats;

        internal void ExecuteOnInstallationsIdSiteStats(InstallationsApi.InstallationsIdSiteStatsApiResponse apiResponse)
        {
            OnInstallationsIdSiteStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteStats(Exception exception)
        {
            OnErrorInstallationsIdSiteStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteSystemOverview;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteSystemOverview;

        internal void ExecuteOnInstallationsIdSiteSystemOverview(InstallationsApi.InstallationsIdSiteSystemOverviewApiResponse apiResponse)
        {
            OnInstallationsIdSiteSystemOverview?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteSystemOverview(Exception exception)
        {
            OnErrorInstallationsIdSiteSystemOverview?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteTagsDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteTagsDelete;

        internal void ExecuteOnInstallationsIdSiteTagsDelete(InstallationsApi.InstallationsIdSiteTagsDeleteApiResponse apiResponse)
        {
            OnInstallationsIdSiteTagsDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteTagsDelete(Exception exception)
        {
            OnErrorInstallationsIdSiteTagsDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteTagsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteTagsGet;

        internal void ExecuteOnInstallationsIdSiteTagsGet(InstallationsApi.InstallationsIdSiteTagsGetApiResponse apiResponse)
        {
            OnInstallationsIdSiteTagsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteTagsGet(Exception exception)
        {
            OnErrorInstallationsIdSiteTagsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteTagsPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteTagsPut;

        internal void ExecuteOnInstallationsIdSiteTagsPut(InstallationsApi.InstallationsIdSiteTagsPutApiResponse apiResponse)
        {
            OnInstallationsIdSiteTagsPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteTagsPut(Exception exception)
        {
            OnErrorInstallationsIdSiteTagsPut?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class InstallationsApi : IInstallationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<InstallationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public InstallationsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstallationsApi(ILogger<InstallationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, InstallationsApiEvents installationsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<InstallationsApi>();
            HttpClient = httpClient;
            Events = installationsApiEvents;
        }

        partial void FormatInstallationOverviewDownload(InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"></param>
        /// <returns></returns>
        private void ValidateInstallationOverviewDownload(InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME)
        {
            if (installationOverviewDownloadRequest == null)
                throw new ArgumentNullException(nameof(installationOverviewDownloadRequest));

            if (UNKNOWN_PARAMETER_NAME.IsSet && UNKNOWN_PARAMETER_NAME.Value == null)
                throw new ArgumentNullException(nameof(UNKNOWN_PARAMETER_NAME));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"></param>
        private void AfterInstallationOverviewDownloadDefaultImplementation(IInstallationOverviewDownloadApiResponse apiResponseLocalVar, InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME)
        {
            bool suppressDefaultLog = false;
            AfterInstallationOverviewDownload(ref suppressDefaultLog, apiResponseLocalVar, installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"></param>
        partial void AfterInstallationOverviewDownload(ref bool suppressDefaultLog, IInstallationOverviewDownloadApiResponse apiResponseLocalVar, InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"></param>
        private void OnErrorInstallationOverviewDownloadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationOverviewDownload(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"></param>
        partial void OnErrorInstallationOverviewDownload(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME);

        /// <summary>
        /// Download installation overview Fetches a customized overview of installations with specified columns, site IDs, and settings. The response can be either JSON or an XLSX file depending on the &#x60;jsonResponse&#x60; parameter.
        /// </summary>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationOverviewDownloadApiResponse"/>&gt;</returns>
        public async Task<IInstallationOverviewDownloadApiResponse?> InstallationOverviewDownloadOrDefaultAsync(InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationOverviewDownloadAsync(installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download installation overview Fetches a customized overview of installations with specified columns, site IDs, and settings. The response can be either JSON or an XLSX file depending on the &#x60;jsonResponse&#x60; parameter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="installationOverviewDownloadRequest"></param>
        /// <param name="UNKNOWN_PARAMETER_NAME"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationOverviewDownloadApiResponse"/>&gt;</returns>
        public async Task<IInstallationOverviewDownloadApiResponse> InstallationOverviewDownloadAsync(InstallationOverviewDownloadRequest installationOverviewDownloadRequest, Option<string> UNKNOWN_PARAMETER_NAME = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationOverviewDownload(installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME);

                FormatInstallationOverviewDownload(installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installation-overview-download"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installation-overview-download");

                    httpRequestMessageLocalVar.Content = (installationOverviewDownloadRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationOverviewDownloadRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationOverviewDownloadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationOverviewDownloadApiResponse>();

                        InstallationOverviewDownloadApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installation-overview-download", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationOverviewDownloadDefaultImplementation(apiResponseLocalVar, installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME);

                        Events.ExecuteOnInstallationOverviewDownload(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationOverviewDownloadDefaultImplementation(e, "/installation-overview-download", uriBuilderLocalVar.Path, installationOverviewDownloadRequest, UNKNOWN_PARAMETER_NAME);
                Events.ExecuteOnErrorInstallationOverviewDownload(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationOverviewDownloadApiResponse"/>
        /// </summary>
        public partial class InstallationOverviewDownloadApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationOverviewDownloadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationOverviewDownloadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationOverviewDownloadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationOverviewDownloadApiResponse(ILogger<InstallationOverviewDownloadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationOverviewDownload200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationOverviewDownload200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationOverviewDownload200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Object? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Object? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteAlarmsDelete(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteAlarmsDelete(string xAuthorization, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteAlarmsDeleteRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteAlarmsDeleteRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        private void AfterInstallationsIdSiteAlarmsDeleteDefaultImplementation(IInstallationsIdSiteAlarmsDeleteApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteAlarmsDelete(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsDeleteRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        partial void AfterInstallationsIdSiteAlarmsDelete(ref bool suppressDefaultLog, IInstallationsIdSiteAlarmsDeleteApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        private void OnErrorInstallationsIdSiteAlarmsDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteAlarmsDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsDeleteRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        partial void OnErrorInstallationsIdSiteAlarmsDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest);

        /// <summary>
        /// Delete Alarm Deletes an alarm already linked to an installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsDeleteApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsDeleteApiResponse?> InstallationsIdSiteAlarmsDeleteOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteAlarmsDeleteAsync(xAuthorization, idSite, installationsIdSiteAlarmsDeleteRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Alarm Deletes an alarm already linked to an installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsDeleteApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsDeleteApiResponse> InstallationsIdSiteAlarmsDeleteAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsDeleteRequest installationsIdSiteAlarmsDeleteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteAlarmsDelete(xAuthorization, installationsIdSiteAlarmsDeleteRequest);

                FormatInstallationsIdSiteAlarmsDelete(ref xAuthorization, ref idSite, installationsIdSiteAlarmsDeleteRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/alarms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/alarms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteAlarmsDeleteRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteAlarmsDeleteRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteAlarmsDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteAlarmsDeleteApiResponse>();

                        InstallationsIdSiteAlarmsDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/alarms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteAlarmsDeleteDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsDeleteRequest);

                        Events.ExecuteOnInstallationsIdSiteAlarmsDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteAlarmsDeleteDefaultImplementation(e, "/installations/{idSite}/alarms", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteAlarmsDeleteRequest);
                Events.ExecuteOnErrorInstallationsIdSiteAlarmsDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteAlarmsDeleteApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteAlarmsDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteAlarmsDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteAlarmsDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteAlarmsDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteAlarmsDeleteApiResponse(ILogger<InstallationsIdSiteAlarmsDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteAlarmsDelete200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsDelete200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteAlarmsDelete200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteAlarmsGet(ref string xAuthorization, ref decimal idSite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteAlarmsGet(string xAuthorization)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void AfterInstallationsIdSiteAlarmsGetDefaultImplementation(IInstallationsIdSiteAlarmsGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteAlarmsGet(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void AfterInstallationsIdSiteAlarmsGet(ref bool suppressDefaultLog, IInstallationsIdSiteAlarmsGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void OnErrorInstallationsIdSiteAlarmsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteAlarmsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void OnErrorInstallationsIdSiteAlarmsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite);

        /// <summary>
        /// Get Alarms Gets all information about alarms for a specific installation. Next to that, it also receives all data required to create new alarms
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsGetApiResponse?> InstallationsIdSiteAlarmsGetOrDefaultAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteAlarmsGetAsync(xAuthorization, idSite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Alarms Gets all information about alarms for a specific installation. Next to that, it also receives all data required to create new alarms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsGetApiResponse> InstallationsIdSiteAlarmsGetAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteAlarmsGet(xAuthorization);

                FormatInstallationsIdSiteAlarmsGet(ref xAuthorization, ref idSite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/alarms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/alarms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteAlarmsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteAlarmsGetApiResponse>();

                        InstallationsIdSiteAlarmsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/alarms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteAlarmsGetDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite);

                        Events.ExecuteOnInstallationsIdSiteAlarmsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteAlarmsGetDefaultImplementation(e, "/installations/{idSite}/alarms", uriBuilderLocalVar.Path, xAuthorization, idSite);
                Events.ExecuteOnErrorInstallationsIdSiteAlarmsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteAlarmsGetApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteAlarmsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteAlarmsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteAlarmsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteAlarmsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteAlarmsGetApiResponse(ILogger<InstallationsIdSiteAlarmsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteAlarmsGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteAlarmsGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteAlarmsPost(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteAlarmsPost(string xAuthorization, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteAlarmsPutRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteAlarmsPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        private void AfterInstallationsIdSiteAlarmsPostDefaultImplementation(IInstallationsIdSiteAlarmsPostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteAlarmsPost(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        partial void AfterInstallationsIdSiteAlarmsPost(ref bool suppressDefaultLog, IInstallationsIdSiteAlarmsPostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        private void OnErrorInstallationsIdSiteAlarmsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteAlarmsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        partial void OnErrorInstallationsIdSiteAlarmsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest);

        /// <summary>
        /// Add Alarm Adds an alarm to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsPostApiResponse?> InstallationsIdSiteAlarmsPostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteAlarmsPostAsync(xAuthorization, idSite, installationsIdSiteAlarmsPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Alarm Adds an alarm to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsPostApiResponse> InstallationsIdSiteAlarmsPostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteAlarmsPost(xAuthorization, installationsIdSiteAlarmsPutRequest);

                FormatInstallationsIdSiteAlarmsPost(ref xAuthorization, ref idSite, installationsIdSiteAlarmsPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/alarms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/alarms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteAlarmsPutRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteAlarmsPutRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteAlarmsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteAlarmsPostApiResponse>();

                        InstallationsIdSiteAlarmsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/alarms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteAlarmsPostDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);

                        Events.ExecuteOnInstallationsIdSiteAlarmsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteAlarmsPostDefaultImplementation(e, "/installations/{idSite}/alarms", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
                Events.ExecuteOnErrorInstallationsIdSiteAlarmsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteAlarmsPostApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteAlarmsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteAlarmsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteAlarmsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteAlarmsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteAlarmsPostApiResponse(ILogger<InstallationsIdSiteAlarmsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteAlarmsPut(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteAlarmsPut(string xAuthorization, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteAlarmsPutRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteAlarmsPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        private void AfterInstallationsIdSiteAlarmsPutDefaultImplementation(IInstallationsIdSiteAlarmsPutApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteAlarmsPut(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        partial void AfterInstallationsIdSiteAlarmsPut(ref bool suppressDefaultLog, IInstallationsIdSiteAlarmsPutApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        private void OnErrorInstallationsIdSiteAlarmsPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteAlarmsPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        partial void OnErrorInstallationsIdSiteAlarmsPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest);

        /// <summary>
        /// Edit Alarm Edits an alarm already linked to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPutApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsPutApiResponse?> InstallationsIdSiteAlarmsPutOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteAlarmsPutAsync(xAuthorization, idSite, installationsIdSiteAlarmsPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Edit Alarm Edits an alarm already linked to an installation. Note that there are two different types of alarms; alarms on enums and alarms on numbers (floats). Note that for floats the AlarmEnabled and NotifyAfterSeconds use PascalCase and for enums they use camelCase. You&#39;ll get a warning if the wrong case is used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteAlarmsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteAlarmsPutApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteAlarmsPutApiResponse> InstallationsIdSiteAlarmsPutAsync(string xAuthorization, decimal idSite, InstallationsIdSiteAlarmsPutRequest installationsIdSiteAlarmsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteAlarmsPut(xAuthorization, installationsIdSiteAlarmsPutRequest);

                FormatInstallationsIdSiteAlarmsPut(ref xAuthorization, ref idSite, installationsIdSiteAlarmsPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/alarms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/alarms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteAlarmsPutRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteAlarmsPutRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteAlarmsPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteAlarmsPutApiResponse>();

                        InstallationsIdSiteAlarmsPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/alarms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteAlarmsPutDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);

                        Events.ExecuteOnInstallationsIdSiteAlarmsPut(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteAlarmsPutDefaultImplementation(e, "/installations/{idSite}/alarms", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteAlarmsPutRequest);
                Events.ExecuteOnErrorInstallationsIdSiteAlarmsPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteAlarmsPutApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteAlarmsPutApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteAlarmsPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteAlarmsPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteAlarmsPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteAlarmsPutApiResponse(ILogger<InstallationsIdSiteAlarmsPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPut200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPut200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteAlarmsPut200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteClearAlarm(ref string xAuthorization, ref string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteClearAlarm(string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));

            if (installationsIdSiteClearAlarmRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteClearAlarmRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        private void AfterInstallationsIdSiteClearAlarmDefaultImplementation(IInstallationsIdSiteClearAlarmApiResponse apiResponseLocalVar, string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteClearAlarm(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteClearAlarmRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        partial void AfterInstallationsIdSiteClearAlarm(ref bool suppressDefaultLog, IInstallationsIdSiteClearAlarmApiResponse apiResponseLocalVar, string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        private void OnErrorInstallationsIdSiteClearAlarmDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteClearAlarm(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteClearAlarmRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        partial void OnErrorInstallationsIdSiteClearAlarm(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest);

        /// <summary>
        /// Clear alarm Clears alarms and marks them as cleared by the user in Event Logs.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteClearAlarmApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteClearAlarmApiResponse?> InstallationsIdSiteClearAlarmOrDefaultAsync(string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteClearAlarmAsync(xAuthorization, idSite, installationsIdSiteClearAlarmRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Clear alarm Clears alarms and marks them as cleared by the user in Event Logs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteClearAlarmRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteClearAlarmApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteClearAlarmApiResponse> InstallationsIdSiteClearAlarmAsync(string xAuthorization, string idSite, InstallationsIdSiteClearAlarmRequest installationsIdSiteClearAlarmRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteClearAlarm(xAuthorization, idSite, installationsIdSiteClearAlarmRequest);

                FormatInstallationsIdSiteClearAlarm(ref xAuthorization, ref idSite, installationsIdSiteClearAlarmRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/clear-alarm"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/clear-alarm");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteClearAlarmRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteClearAlarmRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteClearAlarmApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteClearAlarmApiResponse>();

                        InstallationsIdSiteClearAlarmApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/clear-alarm", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteClearAlarmDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteClearAlarmRequest);

                        Events.ExecuteOnInstallationsIdSiteClearAlarm(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteClearAlarmDefaultImplementation(e, "/installations/{idSite}/clear-alarm", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteClearAlarmRequest);
                Events.ExecuteOnErrorInstallationsIdSiteClearAlarm(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteClearAlarmApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteClearAlarmApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteClearAlarmApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteClearAlarmApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteClearAlarmApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteClearAlarmApiResponse(ILogger<InstallationsIdSiteClearAlarmApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteClearAlarm200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteClearAlarm200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteClearAlarm200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteCustomWidgetDelete(ref string xAuthorization, ref string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteCustomWidgetDelete(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));

            if (installationsIdSiteCustomWidgetDeleteRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteCustomWidgetDeleteRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        private void AfterInstallationsIdSiteCustomWidgetDeleteDefaultImplementation(IInstallationsIdSiteCustomWidgetDeleteApiResponse apiResponseLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteCustomWidgetDelete(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetDeleteRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        partial void AfterInstallationsIdSiteCustomWidgetDelete(ref bool suppressDefaultLog, IInstallationsIdSiteCustomWidgetDeleteApiResponse apiResponseLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        private void OnErrorInstallationsIdSiteCustomWidgetDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteCustomWidgetDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetDeleteRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        partial void OnErrorInstallationsIdSiteCustomWidgetDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest);

        /// <summary>
        /// Delete Custom Widget Delete a custom widget
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetDeleteApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetDeleteApiResponse?> InstallationsIdSiteCustomWidgetDeleteOrDefaultAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteCustomWidgetDeleteAsync(xAuthorization, idSite, installationsIdSiteCustomWidgetDeleteRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Custom Widget Delete a custom widget
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetDeleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetDeleteApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetDeleteApiResponse> InstallationsIdSiteCustomWidgetDeleteAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetDeleteRequest installationsIdSiteCustomWidgetDeleteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteCustomWidgetDelete(xAuthorization, idSite, installationsIdSiteCustomWidgetDeleteRequest);

                FormatInstallationsIdSiteCustomWidgetDelete(ref xAuthorization, ref idSite, installationsIdSiteCustomWidgetDeleteRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/custom-widget"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/custom-widget");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteCustomWidgetDeleteRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteCustomWidgetDeleteRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteCustomWidgetDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteCustomWidgetDeleteApiResponse>();

                        InstallationsIdSiteCustomWidgetDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/custom-widget", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteCustomWidgetDeleteDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetDeleteRequest);

                        Events.ExecuteOnInstallationsIdSiteCustomWidgetDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteCustomWidgetDeleteDefaultImplementation(e, "/installations/{idSite}/custom-widget", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteCustomWidgetDeleteRequest);
                Events.ExecuteOnErrorInstallationsIdSiteCustomWidgetDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteCustomWidgetDeleteApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteCustomWidgetDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteCustomWidgetDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteCustomWidgetDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteCustomWidgetDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteCustomWidgetDeleteApiResponse(ILogger<InstallationsIdSiteCustomWidgetDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteCustomWidgetGet(ref string xAuthorization, ref decimal idSite, ref decimal idCustomWidget);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteCustomWidgetGet(string xAuthorization)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="idCustomWidget"></param>
        private void AfterInstallationsIdSiteCustomWidgetGetDefaultImplementation(IInstallationsIdSiteCustomWidgetGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, decimal idCustomWidget)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteCustomWidgetGet(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, idCustomWidget);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="idCustomWidget"></param>
        partial void AfterInstallationsIdSiteCustomWidgetGet(ref bool suppressDefaultLog, IInstallationsIdSiteCustomWidgetGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, decimal idCustomWidget);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="idCustomWidget"></param>
        private void OnErrorInstallationsIdSiteCustomWidgetGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, decimal idCustomWidget)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteCustomWidgetGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, idCustomWidget);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="idCustomWidget"></param>
        partial void OnErrorInstallationsIdSiteCustomWidgetGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, decimal idCustomWidget);

        /// <summary>
        /// Get Custom Widgets Get a custom widget
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="idCustomWidget">ID of the custom widget</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetGetApiResponse?> InstallationsIdSiteCustomWidgetGetOrDefaultAsync(string xAuthorization, decimal idSite, decimal idCustomWidget, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteCustomWidgetGetAsync(xAuthorization, idSite, idCustomWidget, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Custom Widgets Get a custom widget
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="idCustomWidget">ID of the custom widget</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetGetApiResponse> InstallationsIdSiteCustomWidgetGetAsync(string xAuthorization, decimal idSite, decimal idCustomWidget, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteCustomWidgetGet(xAuthorization);

                FormatInstallationsIdSiteCustomWidgetGet(ref xAuthorization, ref idSite, ref idCustomWidget);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/custom-widget"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/custom-widget");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidCustomWidget%7D", Uri.EscapeDataString(idCustomWidget.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteCustomWidgetGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteCustomWidgetGetApiResponse>();

                        InstallationsIdSiteCustomWidgetGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/custom-widget", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteCustomWidgetGetDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, idCustomWidget);

                        Events.ExecuteOnInstallationsIdSiteCustomWidgetGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteCustomWidgetGetDefaultImplementation(e, "/installations/{idSite}/custom-widget", uriBuilderLocalVar.Path, xAuthorization, idSite, idCustomWidget);
                Events.ExecuteOnErrorInstallationsIdSiteCustomWidgetGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteCustomWidgetGetApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteCustomWidgetGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteCustomWidgetGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteCustomWidgetGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteCustomWidgetGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteCustomWidgetGetApiResponse(ILogger<InstallationsIdSiteCustomWidgetGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteCustomWidgetPatch(ref string xAuthorization, ref string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteCustomWidgetPatch(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));

            if (installationsIdSiteCustomWidgetPatchRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteCustomWidgetPatchRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        private void AfterInstallationsIdSiteCustomWidgetPatchDefaultImplementation(IInstallationsIdSiteCustomWidgetPatchApiResponse apiResponseLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteCustomWidgetPatch(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetPatchRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        partial void AfterInstallationsIdSiteCustomWidgetPatch(ref bool suppressDefaultLog, IInstallationsIdSiteCustomWidgetPatchApiResponse apiResponseLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        private void OnErrorInstallationsIdSiteCustomWidgetPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteCustomWidgetPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetPatchRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        partial void OnErrorInstallationsIdSiteCustomWidgetPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest);

        /// <summary>
        /// Update Custom Widget Update a custom widget
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPatchApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetPatchApiResponse?> InstallationsIdSiteCustomWidgetPatchOrDefaultAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteCustomWidgetPatchAsync(xAuthorization, idSite, installationsIdSiteCustomWidgetPatchRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Custom Widget Update a custom widget
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPatchApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetPatchApiResponse> InstallationsIdSiteCustomWidgetPatchAsync(string xAuthorization, string idSite, InstallationsIdSiteCustomWidgetPatchRequest installationsIdSiteCustomWidgetPatchRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteCustomWidgetPatch(xAuthorization, idSite, installationsIdSiteCustomWidgetPatchRequest);

                FormatInstallationsIdSiteCustomWidgetPatch(ref xAuthorization, ref idSite, installationsIdSiteCustomWidgetPatchRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/custom-widget"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/custom-widget");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteCustomWidgetPatchRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteCustomWidgetPatchRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteCustomWidgetPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteCustomWidgetPatchApiResponse>();

                        InstallationsIdSiteCustomWidgetPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/custom-widget", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteCustomWidgetPatchDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetPatchRequest);

                        Events.ExecuteOnInstallationsIdSiteCustomWidgetPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteCustomWidgetPatchDefaultImplementation(e, "/installations/{idSite}/custom-widget", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteCustomWidgetPatchRequest);
                Events.ExecuteOnErrorInstallationsIdSiteCustomWidgetPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteCustomWidgetPatchApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteCustomWidgetPatchApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteCustomWidgetPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteCustomWidgetPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteCustomWidgetPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteCustomWidgetPatchApiResponse(ILogger<InstallationsIdSiteCustomWidgetPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteCustomWidgetPost(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteCustomWidgetPost(string xAuthorization, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteCustomWidgetPostRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteCustomWidgetPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        private void AfterInstallationsIdSiteCustomWidgetPostDefaultImplementation(IInstallationsIdSiteCustomWidgetPostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteCustomWidgetPost(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        partial void AfterInstallationsIdSiteCustomWidgetPost(ref bool suppressDefaultLog, IInstallationsIdSiteCustomWidgetPostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        private void OnErrorInstallationsIdSiteCustomWidgetPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteCustomWidgetPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        partial void OnErrorInstallationsIdSiteCustomWidgetPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest);

        /// <summary>
        /// Create Custom Widget Create a custom widget
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetPostApiResponse?> InstallationsIdSiteCustomWidgetPostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteCustomWidgetPostAsync(xAuthorization, idSite, installationsIdSiteCustomWidgetPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Custom Widget Create a custom widget
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="installationsIdSiteCustomWidgetPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteCustomWidgetPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteCustomWidgetPostApiResponse> InstallationsIdSiteCustomWidgetPostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteCustomWidgetPostRequest installationsIdSiteCustomWidgetPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteCustomWidgetPost(xAuthorization, installationsIdSiteCustomWidgetPostRequest);

                FormatInstallationsIdSiteCustomWidgetPost(ref xAuthorization, ref idSite, installationsIdSiteCustomWidgetPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/custom-widget"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/custom-widget");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteCustomWidgetPostRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteCustomWidgetPostRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteCustomWidgetPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteCustomWidgetPostApiResponse>();

                        InstallationsIdSiteCustomWidgetPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/custom-widget", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteCustomWidgetPostDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteCustomWidgetPostRequest);

                        Events.ExecuteOnInstallationsIdSiteCustomWidgetPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteCustomWidgetPostDefaultImplementation(e, "/installations/{idSite}/custom-widget", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteCustomWidgetPostRequest);
                Events.ExecuteOnErrorInstallationsIdSiteCustomWidgetPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteCustomWidgetPostApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteCustomWidgetPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteCustomWidgetPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteCustomWidgetPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteCustomWidgetPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteCustomWidgetPostApiResponse(ILogger<InstallationsIdSiteCustomWidgetPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteCustomWidgetPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteDataDownload(ref string xAuthorization, ref string idSite, ref Option<int> start, ref Option<int> end, ref Option<string> datatype, ref Option<string> format, ref Option<bool> debug, ref Option<bool> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="datatype"></param>
        /// <param name="format"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteDataDownload(string xAuthorization, string idSite, Option<string> datatype, Option<string> format)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));

            if (datatype.IsSet && datatype.Value == null)
                throw new ArgumentNullException(nameof(datatype));

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="datatype"></param>
        /// <param name="format"></param>
        /// <param name="debug"></param>
        /// <param name="async"></param>
        private void AfterInstallationsIdSiteDataDownloadDefaultImplementation(IInstallationsIdSiteDataDownloadApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> datatype, Option<string> format, Option<bool> debug, Option<bool> async)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteDataDownload(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, start, end, datatype, format, debug, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="datatype"></param>
        /// <param name="format"></param>
        /// <param name="debug"></param>
        /// <param name="async"></param>
        partial void AfterInstallationsIdSiteDataDownload(ref bool suppressDefaultLog, IInstallationsIdSiteDataDownloadApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> datatype, Option<string> format, Option<bool> debug, Option<bool> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="datatype"></param>
        /// <param name="format"></param>
        /// <param name="debug"></param>
        /// <param name="async"></param>
        private void OnErrorInstallationsIdSiteDataDownloadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> datatype, Option<string> format, Option<bool> debug, Option<bool> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteDataDownload(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, start, end, datatype, format, debug, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="datatype"></param>
        /// <param name="format"></param>
        /// <param name="debug"></param>
        /// <param name="async"></param>
        partial void OnErrorInstallationsIdSiteDataDownload(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> datatype, Option<string> format, Option<bool> debug, Option<bool> async);

        /// <summary>
        /// Download installation data Retrieves a base64 encoded string containing the specified installation data, in the specified format.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="datatype">Type of data to export, defaults to log. (optional)</param>
        /// <param name="format">Export data file format, defaults to csv. (optional)</param>
        /// <param name="debug">Include debug attributes, only for admins and restricted admins, defaults to false. (optional)</param>
        /// <param name="async">If true, the request is executed asynchronously and the result is not included in the response but sent to the email address of the requesting account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDataDownloadApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDataDownloadApiResponse?> InstallationsIdSiteDataDownloadOrDefaultAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> datatype = default, Option<string> format = default, Option<bool> debug = default, Option<bool> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteDataDownloadAsync(xAuthorization, idSite, start, end, datatype, format, debug, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download installation data Retrieves a base64 encoded string containing the specified installation data, in the specified format.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="datatype">Type of data to export, defaults to log. (optional)</param>
        /// <param name="format">Export data file format, defaults to csv. (optional)</param>
        /// <param name="debug">Include debug attributes, only for admins and restricted admins, defaults to false. (optional)</param>
        /// <param name="async">If true, the request is executed asynchronously and the result is not included in the response but sent to the email address of the requesting account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDataDownloadApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDataDownloadApiResponse> InstallationsIdSiteDataDownloadAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> datatype = default, Option<string> format = default, Option<bool> debug = default, Option<bool> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteDataDownload(xAuthorization, idSite, datatype, format);

                FormatInstallationsIdSiteDataDownload(ref xAuthorization, ref idSite, ref start, ref end, ref datatype, ref format, ref debug, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/data-download"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/data-download");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    if (datatype.IsSet)
                        parseQueryStringLocalVar["datatype"] = ClientUtils.ParameterToString(datatype.Value);

                    if (format.IsSet)
                        parseQueryStringLocalVar["format"] = ClientUtils.ParameterToString(format.Value);

                    if (debug.IsSet)
                        parseQueryStringLocalVar["debug"] = ClientUtils.ParameterToString(debug.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html",
                        "text/csv",
                        "application/vnd.ms-excel",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteDataDownloadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteDataDownloadApiResponse>();

                        InstallationsIdSiteDataDownloadApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/data-download", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteDataDownloadDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, start, end, datatype, format, debug, async);

                        Events.ExecuteOnInstallationsIdSiteDataDownload(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteDataDownloadDefaultImplementation(e, "/installations/{idSite}/data-download", uriBuilderLocalVar.Path, xAuthorization, idSite, start, end, datatype, format, debug, async);
                Events.ExecuteOnErrorInstallationsIdSiteDataDownload(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteDataDownloadApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteDataDownloadApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteDataDownloadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteDataDownloadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteDataDownloadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteDataDownloadApiResponse(ILogger<InstallationsIdSiteDataDownloadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDataDownload200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDataDownload200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDataDownload200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteDiagnostics(ref string xAuthorization, ref string idSite, ref Option<int> count, ref Option<int> page);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteDiagnostics(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="count"></param>
        /// <param name="page"></param>
        private void AfterInstallationsIdSiteDiagnosticsDefaultImplementation(IInstallationsIdSiteDiagnosticsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> count, Option<int> page)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteDiagnostics(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, count, page);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="count"></param>
        /// <param name="page"></param>
        partial void AfterInstallationsIdSiteDiagnostics(ref bool suppressDefaultLog, IInstallationsIdSiteDiagnosticsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> count, Option<int> page);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="count"></param>
        /// <param name="page"></param>
        private void OnErrorInstallationsIdSiteDiagnosticsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> count, Option<int> page)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteDiagnostics(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, count, page);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="count"></param>
        /// <param name="page"></param>
        partial void OnErrorInstallationsIdSiteDiagnostics(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> count, Option<int> page);

        /// <summary>
        /// Diagnostic data for an installation Retrieves log data for an installation. This endpoint is only accessible to users with access to the installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="count">How many records to fetch, 100 if not specified. (optional)</param>
        /// <param name="page">Which page to fetch, 1 if not specified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDiagnosticsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDiagnosticsApiResponse?> InstallationsIdSiteDiagnosticsOrDefaultAsync(string xAuthorization, string idSite, Option<int> count = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteDiagnosticsAsync(xAuthorization, idSite, count, page, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Diagnostic data for an installation Retrieves log data for an installation. This endpoint is only accessible to users with access to the installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="count">How many records to fetch, 100 if not specified. (optional)</param>
        /// <param name="page">Which page to fetch, 1 if not specified. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDiagnosticsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDiagnosticsApiResponse> InstallationsIdSiteDiagnosticsAsync(string xAuthorization, string idSite, Option<int> count = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteDiagnostics(xAuthorization, idSite);

                FormatInstallationsIdSiteDiagnostics(ref xAuthorization, ref idSite, ref count, ref page);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/diagnostics"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/diagnostics");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (count.IsSet)
                        parseQueryStringLocalVar["count"] = ClientUtils.ParameterToString(count.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteDiagnosticsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteDiagnosticsApiResponse>();

                        InstallationsIdSiteDiagnosticsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/diagnostics", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteDiagnosticsDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, count, page);

                        Events.ExecuteOnInstallationsIdSiteDiagnostics(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteDiagnosticsDefaultImplementation(e, "/installations/{idSite}/diagnostics", uriBuilderLocalVar.Path, xAuthorization, idSite, count, page);
                Events.ExecuteOnErrorInstallationsIdSiteDiagnostics(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteDiagnosticsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteDiagnosticsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteDiagnosticsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteDiagnosticsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteDiagnosticsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteDiagnosticsApiResponse(ILogger<InstallationsIdSiteDiagnosticsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDiagnostics200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDiagnostics200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDiagnostics200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteDynamicEssSettingsGet(ref int id, ref string xAuthorization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteDynamicEssSettingsGet(string xAuthorization)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        private void AfterInstallationsIdSiteDynamicEssSettingsGetDefaultImplementation(IInstallationsIdSiteDynamicEssSettingsGetApiResponse apiResponseLocalVar, int id, string xAuthorization)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteDynamicEssSettingsGet(ref suppressDefaultLog, apiResponseLocalVar, id, xAuthorization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        partial void AfterInstallationsIdSiteDynamicEssSettingsGet(ref bool suppressDefaultLog, IInstallationsIdSiteDynamicEssSettingsGetApiResponse apiResponseLocalVar, int id, string xAuthorization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        private void OnErrorInstallationsIdSiteDynamicEssSettingsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, string xAuthorization)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteDynamicEssSettingsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, xAuthorization);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        partial void OnErrorInstallationsIdSiteDynamicEssSettingsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, string xAuthorization);

        /// <summary>
        /// Dynamic ESS configuration 
        /// </summary>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDynamicEssSettingsGetApiResponse?> InstallationsIdSiteDynamicEssSettingsGetOrDefaultAsync(int id, string xAuthorization, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteDynamicEssSettingsGetAsync(id, xAuthorization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Dynamic ESS configuration 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDynamicEssSettingsGetApiResponse> InstallationsIdSiteDynamicEssSettingsGetAsync(int id, string xAuthorization, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteDynamicEssSettingsGet(xAuthorization);

                FormatInstallationsIdSiteDynamicEssSettingsGet(ref id, ref xAuthorization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/dynamic-ess-settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/dynamic-ess-settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteDynamicEssSettingsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteDynamicEssSettingsGetApiResponse>();

                        InstallationsIdSiteDynamicEssSettingsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/dynamic-ess-settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteDynamicEssSettingsGetDefaultImplementation(apiResponseLocalVar, id, xAuthorization);

                        Events.ExecuteOnInstallationsIdSiteDynamicEssSettingsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteDynamicEssSettingsGetDefaultImplementation(e, "/installations/{idSite}/dynamic-ess-settings", uriBuilderLocalVar.Path, id, xAuthorization);
                Events.ExecuteOnErrorInstallationsIdSiteDynamicEssSettingsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteDynamicEssSettingsGetApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteDynamicEssSettingsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteDynamicEssSettingsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteDynamicEssSettingsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteDynamicEssSettingsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteDynamicEssSettingsGetApiResponse(ILogger<InstallationsIdSiteDynamicEssSettingsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteDynamicEssSettingsPost(ref int id, ref string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteDynamicEssSettingsPost(string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteDynamicEssSettingsPostRequest.IsSet && installationsIdSiteDynamicEssSettingsPostRequest.Value == null)
                throw new ArgumentNullException(nameof(installationsIdSiteDynamicEssSettingsPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"></param>
        private void AfterInstallationsIdSiteDynamicEssSettingsPostDefaultImplementation(IInstallationsIdSiteDynamicEssSettingsPostApiResponse apiResponseLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteDynamicEssSettingsPost(ref suppressDefaultLog, apiResponseLocalVar, id, xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"></param>
        partial void AfterInstallationsIdSiteDynamicEssSettingsPost(ref bool suppressDefaultLog, IInstallationsIdSiteDynamicEssSettingsPostApiResponse apiResponseLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"></param>
        private void OnErrorInstallationsIdSiteDynamicEssSettingsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteDynamicEssSettingsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"></param>
        partial void OnErrorInstallationsIdSiteDynamicEssSettingsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest);

        /// <summary>
        /// Dynamic ESS configuration 
        /// </summary>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDynamicEssSettingsPostApiResponse?> InstallationsIdSiteDynamicEssSettingsPostOrDefaultAsync(int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteDynamicEssSettingsPostAsync(id, xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Dynamic ESS configuration 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteDynamicEssSettingsPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteDynamicEssSettingsPostApiResponse> InstallationsIdSiteDynamicEssSettingsPostAsync(int id, string xAuthorization, Option<InstallationsIdSiteDynamicEssSettingsPostRequest> installationsIdSiteDynamicEssSettingsPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteDynamicEssSettingsPost(xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest);

                FormatInstallationsIdSiteDynamicEssSettingsPost(ref id, ref xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/dynamic-ess-settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/dynamic-ess-settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    if (installationsIdSiteDynamicEssSettingsPostRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (installationsIdSiteDynamicEssSettingsPostRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteDynamicEssSettingsPostRequest.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteDynamicEssSettingsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteDynamicEssSettingsPostApiResponse>();

                        InstallationsIdSiteDynamicEssSettingsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/dynamic-ess-settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteDynamicEssSettingsPostDefaultImplementation(apiResponseLocalVar, id, xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest);

                        Events.ExecuteOnInstallationsIdSiteDynamicEssSettingsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteDynamicEssSettingsPostDefaultImplementation(e, "/installations/{idSite}/dynamic-ess-settings", uriBuilderLocalVar.Path, id, xAuthorization, installationsIdSiteDynamicEssSettingsPostRequest);
                Events.ExecuteOnErrorInstallationsIdSiteDynamicEssSettingsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteDynamicEssSettingsPostApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteDynamicEssSettingsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteDynamicEssSettingsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteDynamicEssSettingsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteDynamicEssSettingsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteDynamicEssSettingsPostApiResponse(ILogger<InstallationsIdSiteDynamicEssSettingsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteGpsDownload(ref string xAuthorization, ref string idSite, ref int start, ref int end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteGpsDownload(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteGpsDownloadDefaultImplementation(IInstallationsIdSiteGpsDownloadApiResponse apiResponseLocalVar, string xAuthorization, string idSite, int start, int end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteGpsDownload(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteGpsDownload(ref bool suppressDefaultLog, IInstallationsIdSiteGpsDownloadApiResponse apiResponseLocalVar, string xAuthorization, string idSite, int start, int end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteGpsDownloadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, int start, int end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteGpsDownload(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteGpsDownload(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, int start, int end);

        /// <summary>
        /// GPS tracks for an installation Retrieves GPS tracks for an installation as a KML file.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data.</param>
        /// <param name="end">Timestamp to which to fetch data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteGpsDownloadApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteGpsDownloadApiResponse?> InstallationsIdSiteGpsDownloadOrDefaultAsync(string xAuthorization, string idSite, int start, int end, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteGpsDownloadAsync(xAuthorization, idSite, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// GPS tracks for an installation Retrieves GPS tracks for an installation as a KML file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data.</param>
        /// <param name="end">Timestamp to which to fetch data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteGpsDownloadApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteGpsDownloadApiResponse> InstallationsIdSiteGpsDownloadAsync(string xAuthorization, string idSite, int start, int end, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteGpsDownload(xAuthorization, idSite);

                FormatInstallationsIdSiteGpsDownload(ref xAuthorization, ref idSite, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/gps-download"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/gps-download");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start);
                    parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/vnd.google-earth.kml+xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteGpsDownloadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteGpsDownloadApiResponse>();

                        InstallationsIdSiteGpsDownloadApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/gps-download", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteGpsDownloadDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, start, end);

                        Events.ExecuteOnInstallationsIdSiteGpsDownload(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteGpsDownloadDefaultImplementation(e, "/installations/{idSite}/gps-download", uriBuilderLocalVar.Path, xAuthorization, idSite, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteGpsDownload(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteGpsDownloadApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteGpsDownloadApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteGpsDownloadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteGpsDownloadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteGpsDownloadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteGpsDownloadApiResponse(ILogger<InstallationsIdSiteGpsDownloadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteInvitePost(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteInvitePost(string xAuthorization, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteInvitePostRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteInvitePostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        private void AfterInstallationsIdSiteInvitePostDefaultImplementation(IInstallationsIdSiteInvitePostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteInvitePost(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteInvitePostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        partial void AfterInstallationsIdSiteInvitePost(ref bool suppressDefaultLog, IInstallationsIdSiteInvitePostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        private void OnErrorInstallationsIdSiteInvitePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteInvitePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteInvitePostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        partial void OnErrorInstallationsIdSiteInvitePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest);

        /// <summary>
        /// Invite user to installation Sends an invitation to a user to gain access to a specific installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteInvitePostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteInvitePostApiResponse?> InstallationsIdSiteInvitePostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteInvitePostAsync(xAuthorization, idSite, installationsIdSiteInvitePostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Invite user to installation Sends an invitation to a user to gain access to a specific installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteInvitePostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteInvitePostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteInvitePostApiResponse> InstallationsIdSiteInvitePostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteInvitePostRequest installationsIdSiteInvitePostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteInvitePost(xAuthorization, installationsIdSiteInvitePostRequest);

                FormatInstallationsIdSiteInvitePost(ref xAuthorization, ref idSite, installationsIdSiteInvitePostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/invite"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/invite");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteInvitePostRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteInvitePostRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteInvitePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteInvitePostApiResponse>();

                        InstallationsIdSiteInvitePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/invite", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteInvitePostDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteInvitePostRequest);

                        Events.ExecuteOnInstallationsIdSiteInvitePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteInvitePostDefaultImplementation(e, "/installations/{idSite}/invite", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteInvitePostRequest);
                Events.ExecuteOnErrorInstallationsIdSiteInvitePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteInvitePostApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteInvitePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteInvitePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteInvitePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteInvitePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteInvitePostApiResponse(ILogger<InstallationsIdSiteInvitePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteInvitePost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteInvitePost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteInvitePost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteOverallstats(ref string xAuthorization, ref string idSite, ref Option<string> type, ref Option<string> attributeCodes);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="type"></param>
        /// <param name="attributeCodes"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteOverallstats(string xAuthorization, string idSite, Option<string> type, Option<string> attributeCodes)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));

            if (attributeCodes.IsSet && attributeCodes.Value == null)
                throw new ArgumentNullException(nameof(attributeCodes));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="type"></param>
        /// <param name="attributeCodes"></param>
        private void AfterInstallationsIdSiteOverallstatsDefaultImplementation(IInstallationsIdSiteOverallstatsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<string> type, Option<string> attributeCodes)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteOverallstats(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, type, attributeCodes);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="type"></param>
        /// <param name="attributeCodes"></param>
        partial void AfterInstallationsIdSiteOverallstats(ref bool suppressDefaultLog, IInstallationsIdSiteOverallstatsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<string> type, Option<string> attributeCodes);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="type"></param>
        /// <param name="attributeCodes"></param>
        private void OnErrorInstallationsIdSiteOverallstatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<string> type, Option<string> attributeCodes)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteOverallstats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, type, attributeCodes);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="type"></param>
        /// <param name="attributeCodes"></param>
        partial void OnErrorInstallationsIdSiteOverallstats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<string> type, Option<string> attributeCodes);

        /// <summary>
        /// Overall installation stats Retrieves installation stats grouped by the last year, month, week and day. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteOverallstatsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteOverallstatsApiResponse?> InstallationsIdSiteOverallstatsOrDefaultAsync(string xAuthorization, string idSite, Option<string> type = default, Option<string> attributeCodes = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteOverallstatsAsync(xAuthorization, idSite, type, attributeCodes, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Overall installation stats Retrieves installation stats grouped by the last year, month, week and day. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteOverallstatsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteOverallstatsApiResponse> InstallationsIdSiteOverallstatsAsync(string xAuthorization, string idSite, Option<string> type = default, Option<string> attributeCodes = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteOverallstats(xAuthorization, idSite, type, attributeCodes);

                FormatInstallationsIdSiteOverallstats(ref xAuthorization, ref idSite, ref type, ref attributeCodes);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/overallstats"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/overallstats");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    if (attributeCodes.IsSet)
                        parseQueryStringLocalVar["attributeCodes[]"] = ClientUtils.ParameterToString(attributeCodes.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteOverallstatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteOverallstatsApiResponse>();

                        InstallationsIdSiteOverallstatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/overallstats", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteOverallstatsDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, type, attributeCodes);

                        Events.ExecuteOnInstallationsIdSiteOverallstats(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteOverallstatsDefaultImplementation(e, "/installations/{idSite}/overallstats", uriBuilderLocalVar.Path, xAuthorization, idSite, type, attributeCodes);
                Events.ExecuteOnErrorInstallationsIdSiteOverallstats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteOverallstatsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteOverallstatsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteOverallstatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteOverallstatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteOverallstatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteOverallstatsApiResponse(ILogger<InstallationsIdSiteOverallstatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteOverallstats200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteOverallstats200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteOverallstats200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteResetForecastsGet(ref string xAuthorization, ref decimal idSite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteResetForecastsGet(string xAuthorization)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void AfterInstallationsIdSiteResetForecastsGetDefaultImplementation(IInstallationsIdSiteResetForecastsGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteResetForecastsGet(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void AfterInstallationsIdSiteResetForecastsGet(ref bool suppressDefaultLog, IInstallationsIdSiteResetForecastsGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void OnErrorInstallationsIdSiteResetForecastsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteResetForecastsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void OnErrorInstallationsIdSiteResetForecastsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite);

        /// <summary>
        /// Retrieves the timestamp of the last forecasts reset Queries influx for the last time the forecasts for this installation were reset. Returns either the timestamp, or 0 if the forecasts were never reset.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteResetForecastsGetApiResponse?> InstallationsIdSiteResetForecastsGetOrDefaultAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteResetForecastsGetAsync(xAuthorization, idSite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves the timestamp of the last forecasts reset Queries influx for the last time the forecasts for this installation were reset. Returns either the timestamp, or 0 if the forecasts were never reset.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteResetForecastsGetApiResponse> InstallationsIdSiteResetForecastsGetAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteResetForecastsGet(xAuthorization);

                FormatInstallationsIdSiteResetForecastsGet(ref xAuthorization, ref idSite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/reset-forecasts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/reset-forecasts");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteResetForecastsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteResetForecastsGetApiResponse>();

                        InstallationsIdSiteResetForecastsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/reset-forecasts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteResetForecastsGetDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite);

                        Events.ExecuteOnInstallationsIdSiteResetForecastsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteResetForecastsGetDefaultImplementation(e, "/installations/{idSite}/reset-forecasts", uriBuilderLocalVar.Path, xAuthorization, idSite);
                Events.ExecuteOnErrorInstallationsIdSiteResetForecastsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteResetForecastsGetApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteResetForecastsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteResetForecastsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteResetForecastsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteResetForecastsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteResetForecastsGetApiResponse(ILogger<InstallationsIdSiteResetForecastsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteResetForecastsPost(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteResetForecastsPost(string xAuthorization, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteResetForecastsPostRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteResetForecastsPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        private void AfterInstallationsIdSiteResetForecastsPostDefaultImplementation(IInstallationsIdSiteResetForecastsPostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteResetForecastsPost(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteResetForecastsPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        partial void AfterInstallationsIdSiteResetForecastsPost(ref bool suppressDefaultLog, IInstallationsIdSiteResetForecastsPostApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        private void OnErrorInstallationsIdSiteResetForecastsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteResetForecastsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteResetForecastsPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        partial void OnErrorInstallationsIdSiteResetForecastsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest);

        /// <summary>
        /// Reset installation forecasts Logs the current timestamp with the resetType in influx. The forecasting model then ingores all data before this timestamp, effectively treating the installation as if it&#39;s a new one
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteResetForecastsPostApiResponse?> InstallationsIdSiteResetForecastsPostOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteResetForecastsPostAsync(xAuthorization, idSite, installationsIdSiteResetForecastsPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reset installation forecasts Logs the current timestamp with the resetType in influx. The forecasting model then ingores all data before this timestamp, effectively treating the installation as if it&#39;s a new one
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation ID</param>
        /// <param name="installationsIdSiteResetForecastsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteResetForecastsPostApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteResetForecastsPostApiResponse> InstallationsIdSiteResetForecastsPostAsync(string xAuthorization, decimal idSite, InstallationsIdSiteResetForecastsPostRequest installationsIdSiteResetForecastsPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteResetForecastsPost(xAuthorization, installationsIdSiteResetForecastsPostRequest);

                FormatInstallationsIdSiteResetForecastsPost(ref xAuthorization, ref idSite, installationsIdSiteResetForecastsPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/reset-forecasts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/reset-forecasts");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteResetForecastsPostRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteResetForecastsPostRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteResetForecastsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteResetForecastsPostApiResponse>();

                        InstallationsIdSiteResetForecastsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/reset-forecasts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteResetForecastsPostDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteResetForecastsPostRequest);

                        Events.ExecuteOnInstallationsIdSiteResetForecastsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteResetForecastsPostDefaultImplementation(e, "/installations/{idSite}/reset-forecasts", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteResetForecastsPostRequest);
                Events.ExecuteOnErrorInstallationsIdSiteResetForecastsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteResetForecastsPostApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteResetForecastsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteResetForecastsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteResetForecastsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteResetForecastsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteResetForecastsPostApiResponse(ILogger<InstallationsIdSiteResetForecastsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost400Response? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost400Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteResetForecastsPost400Response? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteSettings(ref int id, ref string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteSettingsRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteSettings(string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteSettingsRequest.IsSet && installationsIdSiteSettingsRequest.Value == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSettingsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteSettingsRequest"></param>
        private void AfterInstallationsIdSiteSettingsDefaultImplementation(IInstallationsIdSiteSettingsApiResponse apiResponseLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteSettings(ref suppressDefaultLog, apiResponseLocalVar, id, xAuthorization, installationsIdSiteSettingsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteSettingsRequest"></param>
        partial void AfterInstallationsIdSiteSettings(ref bool suppressDefaultLog, IInstallationsIdSiteSettingsApiResponse apiResponseLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteSettingsRequest"></param>
        private void OnErrorInstallationsIdSiteSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, xAuthorization, installationsIdSiteSettingsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteSettingsRequest"></param>
        partial void OnErrorInstallationsIdSiteSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest);

        /// <summary>
        /// Update settings for a specific installation Allows the user to modify settings related to a specific installation identified by its ID. You can send one or more of the fields you want to update at once.
        /// </summary>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteSettingsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSettingsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteSettingsApiResponse?> InstallationsIdSiteSettingsOrDefaultAsync(int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteSettingsAsync(id, xAuthorization, installationsIdSiteSettingsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update settings for a specific installation Allows the user to modify settings related to a specific installation identified by its ID. You can send one or more of the fields you want to update at once.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the installation</param>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="installationsIdSiteSettingsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSettingsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteSettingsApiResponse> InstallationsIdSiteSettingsAsync(int id, string xAuthorization, Option<InstallationsIdSiteSettingsRequest> installationsIdSiteSettingsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteSettings(xAuthorization, installationsIdSiteSettingsRequest);

                FormatInstallationsIdSiteSettings(ref id, ref xAuthorization, installationsIdSiteSettingsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    if (installationsIdSiteSettingsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (installationsIdSiteSettingsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteSettingsRequest.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteSettingsApiResponse>();

                        InstallationsIdSiteSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteSettingsDefaultImplementation(apiResponseLocalVar, id, xAuthorization, installationsIdSiteSettingsRequest);

                        Events.ExecuteOnInstallationsIdSiteSettings(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteSettingsDefaultImplementation(e, "/installations/{idSite}/settings", uriBuilderLocalVar.Path, id, xAuthorization, installationsIdSiteSettingsRequest);
                Events.ExecuteOnErrorInstallationsIdSiteSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteSettingsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteSettingsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteSettingsApiResponse(ILogger<InstallationsIdSiteSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteSettings200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteSettings200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteSettings200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet403Response? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteDynamicEssSettingsGet404Response? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteStats(ref string xAuthorization, ref string idSite, ref Option<int> start, ref Option<int> end, ref Option<string> type, ref Option<string> interval, ref Option<string> attributeCodes, ref Option<bool> showInstance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="type"></param>
        /// <param name="interval"></param>
        /// <param name="attributeCodes"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteStats(string xAuthorization, string idSite, Option<string> type, Option<string> interval, Option<string> attributeCodes)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));

            if (interval.IsSet && interval.Value == null)
                throw new ArgumentNullException(nameof(interval));

            if (attributeCodes.IsSet && attributeCodes.Value == null)
                throw new ArgumentNullException(nameof(attributeCodes));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="type"></param>
        /// <param name="interval"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="showInstance"></param>
        private void AfterInstallationsIdSiteStatsDefaultImplementation(IInstallationsIdSiteStatsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> type, Option<string> interval, Option<string> attributeCodes, Option<bool> showInstance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteStats(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, start, end, type, interval, attributeCodes, showInstance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="type"></param>
        /// <param name="interval"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="showInstance"></param>
        partial void AfterInstallationsIdSiteStats(ref bool suppressDefaultLog, IInstallationsIdSiteStatsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> type, Option<string> interval, Option<string> attributeCodes, Option<bool> showInstance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="type"></param>
        /// <param name="interval"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="showInstance"></param>
        private void OnErrorInstallationsIdSiteStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> type, Option<string> interval, Option<string> attributeCodes, Option<bool> showInstance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, start, end, type, interval, attributeCodes, showInstance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="type"></param>
        /// <param name="interval"></param>
        /// <param name="attributeCodes"></param>
        /// <param name="showInstance"></param>
        partial void OnErrorInstallationsIdSiteStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> start, Option<int> end, Option<string> type, Option<string> interval, Option<string> attributeCodes, Option<bool> showInstance);

        /// <summary>
        /// Installation stats Retrieves installation stats for the specified period, or one day if none specified. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  There is a maximum allowed time period for each interval, which is: * 31 days for 15 minutes * 31 days for hours * 180 days for days * 140 days for weeks * 24 months for months * 5 years for years 
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="interval">Time between retrieved data points, defaults to hours. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="showInstance">If included, attributes will be grouped by instance. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteStatsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteStatsApiResponse?> InstallationsIdSiteStatsOrDefaultAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> type = default, Option<string> interval = default, Option<string> attributeCodes = default, Option<bool> showInstance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteStatsAsync(xAuthorization, idSite, start, end, type, interval, attributeCodes, showInstance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Installation stats Retrieves installation stats for the specified period, or one day if none specified. If the datatype is set to custom, one or more attributes can be provided using the attributeCodes[] parameter.  There is a maximum allowed time period for each interval, which is: * 31 days for 15 minutes * 31 days for hours * 180 days for days * 140 days for weeks * 24 months for months * 5 years for years 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="type">Type of data to fetch, defaults to live_feed. If set to custom, the attributeCodes[] parameter must be provided. (optional)</param>
        /// <param name="interval">Time between retrieved data points, defaults to hours. (optional)</param>
        /// <param name="attributeCodes">Attribute codes for which to retrieve series, repeated for each attribute. Required at least once if datatype is set to custom. (optional)</param>
        /// <param name="showInstance">If included, attributes will be grouped by instance. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteStatsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteStatsApiResponse> InstallationsIdSiteStatsAsync(string xAuthorization, string idSite, Option<int> start = default, Option<int> end = default, Option<string> type = default, Option<string> interval = default, Option<string> attributeCodes = default, Option<bool> showInstance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteStats(xAuthorization, idSite, type, interval, attributeCodes);

                FormatInstallationsIdSiteStats(ref xAuthorization, ref idSite, ref start, ref end, ref type, ref interval, ref attributeCodes, ref showInstance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/stats"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/stats");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    if (interval.IsSet)
                        parseQueryStringLocalVar["interval"] = ClientUtils.ParameterToString(interval.Value);

                    if (attributeCodes.IsSet)
                        parseQueryStringLocalVar["attributeCodes[]"] = ClientUtils.ParameterToString(attributeCodes.Value);

                    if (showInstance.IsSet)
                        parseQueryStringLocalVar["show_instance"] = ClientUtils.ParameterToString(showInstance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteStatsApiResponse>();

                        InstallationsIdSiteStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/stats", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteStatsDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, start, end, type, interval, attributeCodes, showInstance);

                        Events.ExecuteOnInstallationsIdSiteStats(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteStatsDefaultImplementation(e, "/installations/{idSite}/stats", uriBuilderLocalVar.Path, xAuthorization, idSite, start, end, type, interval, attributeCodes, showInstance);
                Events.ExecuteOnErrorInstallationsIdSiteStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteStatsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteStatsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteStatsApiResponse(ILogger<InstallationsIdSiteStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteStats200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteStats200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteStats200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteSystemOverview(ref string xAuthorization, ref string idSite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteSystemOverview(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void AfterInstallationsIdSiteSystemOverviewDefaultImplementation(IInstallationsIdSiteSystemOverviewApiResponse apiResponseLocalVar, string xAuthorization, string idSite)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteSystemOverview(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void AfterInstallationsIdSiteSystemOverview(ref bool suppressDefaultLog, IInstallationsIdSiteSystemOverviewApiResponse apiResponseLocalVar, string xAuthorization, string idSite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void OnErrorInstallationsIdSiteSystemOverviewDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteSystemOverview(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void OnErrorInstallationsIdSiteSystemOverview(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite);

        /// <summary>
        /// Connected devices for a given installation Retrieves a list of devices to which are connected to this installation. This endpoint is only accessible to users with access to the installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSystemOverviewApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteSystemOverviewApiResponse?> InstallationsIdSiteSystemOverviewOrDefaultAsync(string xAuthorization, string idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteSystemOverviewAsync(xAuthorization, idSite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Connected devices for a given installation Retrieves a list of devices to which are connected to this installation. This endpoint is only accessible to users with access to the installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteSystemOverviewApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteSystemOverviewApiResponse> InstallationsIdSiteSystemOverviewAsync(string xAuthorization, string idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteSystemOverview(xAuthorization, idSite);

                FormatInstallationsIdSiteSystemOverview(ref xAuthorization, ref idSite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/system-overview"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/system-overview");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteSystemOverviewApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteSystemOverviewApiResponse>();

                        InstallationsIdSiteSystemOverviewApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/system-overview", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteSystemOverviewDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite);

                        Events.ExecuteOnInstallationsIdSiteSystemOverview(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteSystemOverviewDefaultImplementation(e, "/installations/{idSite}/system-overview", uriBuilderLocalVar.Path, xAuthorization, idSite);
                Events.ExecuteOnErrorInstallationsIdSiteSystemOverview(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteSystemOverviewApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteSystemOverviewApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteSystemOverviewApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteSystemOverviewApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteSystemOverviewApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteSystemOverviewApiResponse(ILogger<InstallationsIdSiteSystemOverviewApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteSystemOverview200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteSystemOverview200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteSystemOverview200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteTagsDelete(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteTagsDelete(string xAuthorization, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteTagsPutRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteTagsPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        private void AfterInstallationsIdSiteTagsDeleteDefaultImplementation(IInstallationsIdSiteTagsDeleteApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteTagsDelete(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteTagsPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        partial void AfterInstallationsIdSiteTagsDelete(ref bool suppressDefaultLog, IInstallationsIdSiteTagsDeleteApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        private void OnErrorInstallationsIdSiteTagsDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteTagsDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteTagsPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        partial void OnErrorInstallationsIdSiteTagsDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest);

        /// <summary>
        /// Remove installation tag Remove tag for an installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsDeleteApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteTagsDeleteApiResponse?> InstallationsIdSiteTagsDeleteOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteTagsDeleteAsync(xAuthorization, idSite, installationsIdSiteTagsPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove installation tag Remove tag for an installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsDeleteApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteTagsDeleteApiResponse> InstallationsIdSiteTagsDeleteAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteTagsDelete(xAuthorization, installationsIdSiteTagsPutRequest);

                FormatInstallationsIdSiteTagsDelete(ref xAuthorization, ref idSite, installationsIdSiteTagsPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/tags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteTagsPutRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteTagsPutRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteTagsDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteTagsDeleteApiResponse>();

                        InstallationsIdSiteTagsDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteTagsDeleteDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteTagsPutRequest);

                        Events.ExecuteOnInstallationsIdSiteTagsDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteTagsDeleteDefaultImplementation(e, "/installations/{idSite}/tags", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteTagsPutRequest);
                Events.ExecuteOnErrorInstallationsIdSiteTagsDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteTagsDeleteApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteTagsDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteTagsDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteTagsDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteTagsDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteTagsDeleteApiResponse(ILogger<InstallationsIdSiteTagsDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteTagsDelete200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteTagsDelete200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteTagsDelete200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteTagsGet(ref string xAuthorization, ref decimal idSite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteTagsGet(string xAuthorization)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void AfterInstallationsIdSiteTagsGetDefaultImplementation(IInstallationsIdSiteTagsGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteTagsGet(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void AfterInstallationsIdSiteTagsGet(ref bool suppressDefaultLog, IInstallationsIdSiteTagsGetApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        private void OnErrorInstallationsIdSiteTagsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteTagsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        partial void OnErrorInstallationsIdSiteTagsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite);

        /// <summary>
        /// Get installation tags Tags for an installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteTagsGetApiResponse?> InstallationsIdSiteTagsGetOrDefaultAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteTagsGetAsync(xAuthorization, idSite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get installation tags Tags for an installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsGetApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteTagsGetApiResponse> InstallationsIdSiteTagsGetAsync(string xAuthorization, decimal idSite, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteTagsGet(xAuthorization);

                FormatInstallationsIdSiteTagsGet(ref xAuthorization, ref idSite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/tags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteTagsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteTagsGetApiResponse>();

                        InstallationsIdSiteTagsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteTagsGetDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite);

                        Events.ExecuteOnInstallationsIdSiteTagsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteTagsGetDefaultImplementation(e, "/installations/{idSite}/tags", uriBuilderLocalVar.Path, xAuthorization, idSite);
                Events.ExecuteOnErrorInstallationsIdSiteTagsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteTagsGetApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteTagsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteTagsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteTagsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteTagsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteTagsGetApiResponse(ILogger<InstallationsIdSiteTagsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteTagsGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteTagsGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteTagsGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteTagsPut(ref string xAuthorization, ref decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteTagsPut(string xAuthorization, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (installationsIdSiteTagsPutRequest == null)
                throw new ArgumentNullException(nameof(installationsIdSiteTagsPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        private void AfterInstallationsIdSiteTagsPutDefaultImplementation(IInstallationsIdSiteTagsPutApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteTagsPut(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteTagsPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        partial void AfterInstallationsIdSiteTagsPut(ref bool suppressDefaultLog, IInstallationsIdSiteTagsPutApiResponse apiResponseLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        private void OnErrorInstallationsIdSiteTagsPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteTagsPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, installationsIdSiteTagsPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        partial void OnErrorInstallationsIdSiteTagsPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest);

        /// <summary>
        /// Add installation tag Add tag for an installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsPutApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteTagsPutApiResponse?> InstallationsIdSiteTagsPutOrDefaultAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteTagsPutAsync(xAuthorization, idSite, installationsIdSiteTagsPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add installation tag Add tag for an installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="installationsIdSiteTagsPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteTagsPutApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteTagsPutApiResponse> InstallationsIdSiteTagsPutAsync(string xAuthorization, decimal idSite, InstallationsIdSiteTagsPutRequest installationsIdSiteTagsPutRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteTagsPut(xAuthorization, installationsIdSiteTagsPutRequest);

                FormatInstallationsIdSiteTagsPut(ref xAuthorization, ref idSite, installationsIdSiteTagsPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/tags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (installationsIdSiteTagsPutRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installationsIdSiteTagsPutRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteTagsPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteTagsPutApiResponse>();

                        InstallationsIdSiteTagsPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteTagsPutDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, installationsIdSiteTagsPutRequest);

                        Events.ExecuteOnInstallationsIdSiteTagsPut(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteTagsPutDefaultImplementation(e, "/installations/{idSite}/tags", uriBuilderLocalVar.Path, xAuthorization, idSite, installationsIdSiteTagsPutRequest);
                Events.ExecuteOnErrorInstallationsIdSiteTagsPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteTagsPutApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteTagsPutApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteTagsPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteTagsPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteTagsPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteTagsPutApiResponse(ILogger<InstallationsIdSiteTagsPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteTagsPut200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteTagsPut200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteTagsPut200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
