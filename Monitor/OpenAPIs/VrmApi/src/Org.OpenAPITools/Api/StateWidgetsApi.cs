// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStateWidgetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StateWidgetsApiEvents Events { get; }

        /// <summary>
        /// Battery external relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves battery external relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse> InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Battery external relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves battery external relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse?> InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Battery monitor warnings and alarms graph data
        /// </summary>
        /// <remarks>
        /// Retrieves battery monitor warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse> InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Battery monitor warnings and alarms graph data
        /// </summary>
        /// <remarks>
        /// Retrieves battery monitor warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse?> InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Battery relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves battery relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse> InstallationsIdSiteWidgetsBatteryRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Battery relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves battery relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse?> InstallationsIdSiteWidgetsBatteryRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Charger relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerRelayStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsChargerRelayStateApiResponse> InstallationsIdSiteWidgetsChargerRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Charger relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerRelayStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsChargerRelayStateApiResponse?> InstallationsIdSiteWidgetsChargerRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Charger state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsChargerStateApiResponse> InstallationsIdSiteWidgetsChargerStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Charger state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsChargerStateApiResponse?> InstallationsIdSiteWidgetsChargerStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ESS battery life state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves ESS battery life state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse> InstallationsIdSiteWidgetsEssBatteryLifeStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ESS battery life state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves ESS battery life state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse?> InstallationsIdSiteWidgetsEssBatteryLifeStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fuel cell state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves fuel cell state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsFuelCellStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsFuelCellStateApiResponse> InstallationsIdSiteWidgetsFuelCellStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fuel cell state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves fuel cell state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsFuelCellStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsFuelCellStateApiResponse?> InstallationsIdSiteWidgetsFuelCellStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gateway relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves gateway relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse> InstallationsIdSiteWidgetsGatewayRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gateway relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves gateway relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse?> InstallationsIdSiteWidgetsGatewayRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gateway relay two state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves gateway relay two state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse> InstallationsIdSiteWidgetsGatewayRelayTwoStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gateway relay two state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves gateway relay two state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse?> InstallationsIdSiteWidgetsGatewayRelayTwoStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generator state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves generator state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGeneratorStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGeneratorStateApiResponse> InstallationsIdSiteWidgetsGeneratorStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generator state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves generator state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGeneratorStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGeneratorStateApiResponse?> InstallationsIdSiteWidgetsGeneratorStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Input state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves input state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInputStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInputStateApiResponse> InstallationsIdSiteWidgetsInputStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Input state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves input state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInputStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInputStateApiResponse?> InstallationsIdSiteWidgetsInputStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Inverter charger state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves inverter charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInverterChargerStateApiResponse> InstallationsIdSiteWidgetsInverterChargerStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Inverter charger state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves inverter charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInverterChargerStateApiResponse?> InstallationsIdSiteWidgetsInverterChargerStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Inverter charger warnings and alarms graph data
        /// </summary>
        /// <remarks>
        /// Retrieves inverter warning and alarm state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse> InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Inverter charger warnings and alarms graph data
        /// </summary>
        /// <remarks>
        /// Retrieves inverter warning and alarm state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse?> InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Inverter state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves inverter state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInverterStateApiResponse> InstallationsIdSiteWidgetsInverterStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Inverter state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves inverter state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsInverterStateApiResponse?> InstallationsIdSiteWidgetsInverterStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// MPPT state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves MPPT state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMPPTStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsMPPTStateApiResponse> InstallationsIdSiteWidgetsMPPTStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// MPPT state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves MPPT state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMPPTStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsMPPTStateApiResponse?> InstallationsIdSiteWidgetsMPPTStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Solar charger relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves solar charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse> InstallationsIdSiteWidgetsSolarChargerRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Solar charger relay state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves solar charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse?> InstallationsIdSiteWidgetsSolarChargerRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// VE Bus state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves VE Bus state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusStateApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsVeBusStateApiResponse> InstallationsIdSiteWidgetsVeBusStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// VE Bus state graph data
        /// </summary>
        /// <remarks>
        /// Retrieves VE Bus state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusStateApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsVeBusStateApiResponse?> InstallationsIdSiteWidgetsVeBusStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// VE Bus warnings and alarms graph data
        /// </summary>
        /// <remarks>
        /// Retrieves VE Bus warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse> InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// VE Bus warnings and alarms graph data
        /// </summary>
        /// <remarks>
        /// Retrieves VE Bus warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse?> InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsChargerRelayStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsChargerRelayStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsChargerStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsChargerStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsFuelCellStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsFuelCellStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsGeneratorStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsGeneratorStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsInputStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsInputStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsInverterChargerStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsInverterChargerStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsInverterStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsInverterStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsMPPTStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsMPPTStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsVeBusStateApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsVeBusStateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StateWidgetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand;

        internal void ExecuteOnInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(StateWidgetsApi.InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms;

        internal void ExecuteOnInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(StateWidgetsApi.InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsBatteryRelayState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsBatteryRelayState;

        internal void ExecuteOnInstallationsIdSiteWidgetsBatteryRelayState(StateWidgetsApi.InstallationsIdSiteWidgetsBatteryRelayStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsBatteryRelayState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsBatteryRelayState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsBatteryRelayState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsChargerRelayState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsChargerRelayState;

        internal void ExecuteOnInstallationsIdSiteWidgetsChargerRelayState(StateWidgetsApi.InstallationsIdSiteWidgetsChargerRelayStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsChargerRelayState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsChargerRelayState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsChargerRelayState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsChargerState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsChargerState;

        internal void ExecuteOnInstallationsIdSiteWidgetsChargerState(StateWidgetsApi.InstallationsIdSiteWidgetsChargerStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsChargerState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsChargerState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsChargerState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsEssBatteryLifeState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsEssBatteryLifeState;

        internal void ExecuteOnInstallationsIdSiteWidgetsEssBatteryLifeState(StateWidgetsApi.InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsEssBatteryLifeState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsEssBatteryLifeState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsEssBatteryLifeState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsFuelCellState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsFuelCellState;

        internal void ExecuteOnInstallationsIdSiteWidgetsFuelCellState(StateWidgetsApi.InstallationsIdSiteWidgetsFuelCellStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsFuelCellState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsFuelCellState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsFuelCellState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsGatewayRelayState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsGatewayRelayState;

        internal void ExecuteOnInstallationsIdSiteWidgetsGatewayRelayState(StateWidgetsApi.InstallationsIdSiteWidgetsGatewayRelayStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsGatewayRelayState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsGatewayRelayState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsGatewayRelayState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsGatewayRelayTwoState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsGatewayRelayTwoState;

        internal void ExecuteOnInstallationsIdSiteWidgetsGatewayRelayTwoState(StateWidgetsApi.InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsGatewayRelayTwoState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsGatewayRelayTwoState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsGatewayRelayTwoState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsGeneratorState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsGeneratorState;

        internal void ExecuteOnInstallationsIdSiteWidgetsGeneratorState(StateWidgetsApi.InstallationsIdSiteWidgetsGeneratorStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsGeneratorState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsGeneratorState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsGeneratorState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsInputState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsInputState;

        internal void ExecuteOnInstallationsIdSiteWidgetsInputState(StateWidgetsApi.InstallationsIdSiteWidgetsInputStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsInputState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsInputState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsInputState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsInverterChargerState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsInverterChargerState;

        internal void ExecuteOnInstallationsIdSiteWidgetsInverterChargerState(StateWidgetsApi.InstallationsIdSiteWidgetsInverterChargerStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsInverterChargerState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsInverterChargerState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsInverterChargerState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms;

        internal void ExecuteOnInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(StateWidgetsApi.InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsInverterState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsInverterState;

        internal void ExecuteOnInstallationsIdSiteWidgetsInverterState(StateWidgetsApi.InstallationsIdSiteWidgetsInverterStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsInverterState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsInverterState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsInverterState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsMPPTState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsMPPTState;

        internal void ExecuteOnInstallationsIdSiteWidgetsMPPTState(StateWidgetsApi.InstallationsIdSiteWidgetsMPPTStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsMPPTState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsMPPTState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsMPPTState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsSolarChargerRelayState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsSolarChargerRelayState;

        internal void ExecuteOnInstallationsIdSiteWidgetsSolarChargerRelayState(StateWidgetsApi.InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsSolarChargerRelayState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsSolarChargerRelayState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsSolarChargerRelayState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsVeBusState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsVeBusState;

        internal void ExecuteOnInstallationsIdSiteWidgetsVeBusState(StateWidgetsApi.InstallationsIdSiteWidgetsVeBusStateApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsVeBusState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsVeBusState(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsVeBusState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsVeBusWarningsAndAlarms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarms;

        internal void ExecuteOnInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(StateWidgetsApi.InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsVeBusWarningsAndAlarms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarms?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StateWidgetsApi : IStateWidgetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StateWidgetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StateWidgetsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StateWidgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StateWidgetsApi(ILogger<StateWidgetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StateWidgetsApiEvents stateWidgetsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StateWidgetsApi>();
            HttpClient = httpClient;
            Events = stateWidgetsApiEvents;
        }

        partial void FormatInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandDefaultImplementation(IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Battery external relay state graph data Retrieves battery external relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse?> InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Battery external relay state graph data Retrieves battery external relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse> InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/BatteryExternalRelayState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/BatteryExternalRelayState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse>();

                        InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/BatteryExternalRelayState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandDefaultImplementation(e, "/installations/{idSite}/widgets/BatteryExternalRelayState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsBatteryExternalRelayStateCommand(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse(ILogger<InstallationsIdSiteWidgetsBatteryExternalRelayStateCommandApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsDefaultImplementation(IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Battery monitor warnings and alarms graph data Retrieves battery monitor warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse?> InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Battery monitor warnings and alarms graph data Retrieves battery monitor warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse> InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/BatteryMonitorWarningsAndAlarms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/BatteryMonitorWarningsAndAlarms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse>();

                        InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/BatteryMonitorWarningsAndAlarms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsDefaultImplementation(e, "/installations/{idSite}/widgets/BatteryMonitorWarningsAndAlarms", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse(ILogger<InstallationsIdSiteWidgetsBatteryMonitorWarningsAndAlarmsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsBatteryRelayState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsBatteryRelayState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsBatteryRelayStateDefaultImplementation(IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsBatteryRelayState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsBatteryRelayState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsBatteryRelayStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsBatteryRelayState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsBatteryRelayState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Battery relay state graph data Retrieves battery relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse?> InstallationsIdSiteWidgetsBatteryRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsBatteryRelayStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Battery relay state graph data Retrieves battery relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse> InstallationsIdSiteWidgetsBatteryRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsBatteryRelayState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsBatteryRelayState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/BatteryRelayState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/BatteryRelayState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsBatteryRelayStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsBatteryRelayStateApiResponse>();

                        InstallationsIdSiteWidgetsBatteryRelayStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/BatteryRelayState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsBatteryRelayStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsBatteryRelayState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsBatteryRelayStateDefaultImplementation(e, "/installations/{idSite}/widgets/BatteryRelayState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsBatteryRelayState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsBatteryRelayStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsBatteryRelayStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsBatteryRelayStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsBatteryRelayStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsBatteryRelayStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsBatteryRelayStateApiResponse(ILogger<InstallationsIdSiteWidgetsBatteryRelayStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsChargerRelayState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsChargerRelayState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsChargerRelayStateDefaultImplementation(IInstallationsIdSiteWidgetsChargerRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsChargerRelayState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsChargerRelayState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsChargerRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsChargerRelayStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsChargerRelayState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsChargerRelayState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Charger relay state graph data Retrieves charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsChargerRelayStateApiResponse?> InstallationsIdSiteWidgetsChargerRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsChargerRelayStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Charger relay state graph data Retrieves charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsChargerRelayStateApiResponse> InstallationsIdSiteWidgetsChargerRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsChargerRelayState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsChargerRelayState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/ChargerRelayState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/ChargerRelayState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsChargerRelayStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsChargerRelayStateApiResponse>();

                        InstallationsIdSiteWidgetsChargerRelayStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/ChargerRelayState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsChargerRelayStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsChargerRelayState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsChargerRelayStateDefaultImplementation(e, "/installations/{idSite}/widgets/ChargerRelayState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsChargerRelayState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsChargerRelayStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsChargerRelayStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsChargerRelayStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsChargerRelayStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsChargerRelayStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsChargerRelayStateApiResponse(ILogger<InstallationsIdSiteWidgetsChargerRelayStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsChargerState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsChargerState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsChargerStateDefaultImplementation(IInstallationsIdSiteWidgetsChargerStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsChargerState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsChargerState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsChargerStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsChargerStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsChargerState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsChargerState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Charger state graph data Retrieves charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsChargerStateApiResponse?> InstallationsIdSiteWidgetsChargerStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsChargerStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Charger state graph data Retrieves charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsChargerStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsChargerStateApiResponse> InstallationsIdSiteWidgetsChargerStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsChargerState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsChargerState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/ChargerState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/ChargerState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsChargerStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsChargerStateApiResponse>();

                        InstallationsIdSiteWidgetsChargerStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/ChargerState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsChargerStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsChargerState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsChargerStateDefaultImplementation(e, "/installations/{idSite}/widgets/ChargerState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsChargerState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsChargerStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsChargerStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsChargerStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsChargerStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsChargerStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsChargerStateApiResponse(ILogger<InstallationsIdSiteWidgetsChargerStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsEssBatteryLifeState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsEssBatteryLifeState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsEssBatteryLifeStateDefaultImplementation(IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsEssBatteryLifeState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsEssBatteryLifeState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsEssBatteryLifeStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsEssBatteryLifeState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsEssBatteryLifeState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// ESS battery life state graph data Retrieves ESS battery life state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse?> InstallationsIdSiteWidgetsEssBatteryLifeStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsEssBatteryLifeStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ESS battery life state graph data Retrieves ESS battery life state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse> InstallationsIdSiteWidgetsEssBatteryLifeStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsEssBatteryLifeState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsEssBatteryLifeState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/EssBatteryLifeState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/EssBatteryLifeState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse>();

                        InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/EssBatteryLifeState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsEssBatteryLifeStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsEssBatteryLifeState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsEssBatteryLifeStateDefaultImplementation(e, "/installations/{idSite}/widgets/EssBatteryLifeState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsEssBatteryLifeState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse(ILogger<InstallationsIdSiteWidgetsEssBatteryLifeStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsFuelCellState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsFuelCellState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsFuelCellStateDefaultImplementation(IInstallationsIdSiteWidgetsFuelCellStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsFuelCellState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsFuelCellState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsFuelCellStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsFuelCellStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsFuelCellState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsFuelCellState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Fuel cell state graph data Retrieves fuel cell state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsFuelCellStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsFuelCellStateApiResponse?> InstallationsIdSiteWidgetsFuelCellStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsFuelCellStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fuel cell state graph data Retrieves fuel cell state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsFuelCellStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsFuelCellStateApiResponse> InstallationsIdSiteWidgetsFuelCellStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsFuelCellState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsFuelCellState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/FuelCellState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/FuelCellState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsFuelCellStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsFuelCellStateApiResponse>();

                        InstallationsIdSiteWidgetsFuelCellStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/FuelCellState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsFuelCellStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsFuelCellState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsFuelCellStateDefaultImplementation(e, "/installations/{idSite}/widgets/FuelCellState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsFuelCellState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsFuelCellStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsFuelCellStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsFuelCellStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsFuelCellStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsFuelCellStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsFuelCellStateApiResponse(ILogger<InstallationsIdSiteWidgetsFuelCellStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsGatewayRelayState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsGatewayRelayState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsGatewayRelayStateDefaultImplementation(IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsGatewayRelayState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsGatewayRelayState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsGatewayRelayStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsGatewayRelayState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsGatewayRelayState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Gateway relay state graph data Retrieves gateway relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse?> InstallationsIdSiteWidgetsGatewayRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsGatewayRelayStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gateway relay state graph data Retrieves gateway relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse> InstallationsIdSiteWidgetsGatewayRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsGatewayRelayState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsGatewayRelayState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/GatewayRelayState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/GatewayRelayState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsGatewayRelayStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsGatewayRelayStateApiResponse>();

                        InstallationsIdSiteWidgetsGatewayRelayStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/GatewayRelayState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsGatewayRelayStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsGatewayRelayState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsGatewayRelayStateDefaultImplementation(e, "/installations/{idSite}/widgets/GatewayRelayState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsGatewayRelayState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsGatewayRelayStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsGatewayRelayStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsGatewayRelayStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsGatewayRelayStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsGatewayRelayStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsGatewayRelayStateApiResponse(ILogger<InstallationsIdSiteWidgetsGatewayRelayStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsGatewayRelayTwoState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsGatewayRelayTwoState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsGatewayRelayTwoStateDefaultImplementation(IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsGatewayRelayTwoState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsGatewayRelayTwoState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsGatewayRelayTwoStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsGatewayRelayTwoState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsGatewayRelayTwoState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Gateway relay two state graph data Retrieves gateway relay two state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse?> InstallationsIdSiteWidgetsGatewayRelayTwoStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsGatewayRelayTwoStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gateway relay two state graph data Retrieves gateway relay two state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse> InstallationsIdSiteWidgetsGatewayRelayTwoStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsGatewayRelayTwoState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsGatewayRelayTwoState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/GatewayRelayTwoState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/GatewayRelayTwoState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse>();

                        InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/GatewayRelayTwoState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsGatewayRelayTwoStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsGatewayRelayTwoState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsGatewayRelayTwoStateDefaultImplementation(e, "/installations/{idSite}/widgets/GatewayRelayTwoState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsGatewayRelayTwoState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse(ILogger<InstallationsIdSiteWidgetsGatewayRelayTwoStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsGeneratorState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsGeneratorState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsGeneratorStateDefaultImplementation(IInstallationsIdSiteWidgetsGeneratorStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsGeneratorState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsGeneratorState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsGeneratorStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsGeneratorStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsGeneratorState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsGeneratorState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Generator state graph data Retrieves generator state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGeneratorStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGeneratorStateApiResponse?> InstallationsIdSiteWidgetsGeneratorStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsGeneratorStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generator state graph data Retrieves generator state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGeneratorStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGeneratorStateApiResponse> InstallationsIdSiteWidgetsGeneratorStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsGeneratorState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsGeneratorState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/GeneratorState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/GeneratorState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsGeneratorStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsGeneratorStateApiResponse>();

                        InstallationsIdSiteWidgetsGeneratorStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/GeneratorState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsGeneratorStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsGeneratorState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsGeneratorStateDefaultImplementation(e, "/installations/{idSite}/widgets/GeneratorState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsGeneratorState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsGeneratorStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsGeneratorStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsGeneratorStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsGeneratorStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsGeneratorStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsGeneratorStateApiResponse(ILogger<InstallationsIdSiteWidgetsGeneratorStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsInputState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsInputState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsInputStateDefaultImplementation(IInstallationsIdSiteWidgetsInputStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsInputState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsInputState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsInputStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsInputStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsInputState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsInputState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Input state graph data Retrieves input state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInputStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInputStateApiResponse?> InstallationsIdSiteWidgetsInputStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsInputStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Input state graph data Retrieves input state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInputStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInputStateApiResponse> InstallationsIdSiteWidgetsInputStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsInputState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsInputState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/InputState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/InputState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsInputStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsInputStateApiResponse>();

                        InstallationsIdSiteWidgetsInputStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/InputState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsInputStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsInputState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsInputStateDefaultImplementation(e, "/installations/{idSite}/widgets/InputState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsInputState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsInputStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsInputStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsInputStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsInputStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsInputStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsInputStateApiResponse(ILogger<InstallationsIdSiteWidgetsInputStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsInverterChargerState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsInverterChargerState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsInverterChargerStateDefaultImplementation(IInstallationsIdSiteWidgetsInverterChargerStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsInverterChargerState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsInverterChargerState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsInverterChargerStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsInverterChargerStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsInverterChargerState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsInverterChargerState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Inverter charger state graph data Retrieves inverter charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInverterChargerStateApiResponse?> InstallationsIdSiteWidgetsInverterChargerStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsInverterChargerStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Inverter charger state graph data Retrieves inverter charger state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInverterChargerStateApiResponse> InstallationsIdSiteWidgetsInverterChargerStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsInverterChargerState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsInverterChargerState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/InverterChargerState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/InverterChargerState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsInverterChargerStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsInverterChargerStateApiResponse>();

                        InstallationsIdSiteWidgetsInverterChargerStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/InverterChargerState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsInverterChargerStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsInverterChargerState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsInverterChargerStateDefaultImplementation(e, "/installations/{idSite}/widgets/InverterChargerState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsInverterChargerState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsInverterChargerStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsInverterChargerStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsInverterChargerStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsInverterChargerStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsInverterChargerStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsInverterChargerStateApiResponse(ILogger<InstallationsIdSiteWidgetsInverterChargerStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsDefaultImplementation(IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Inverter charger warnings and alarms graph data Retrieves inverter warning and alarm state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse?> InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Inverter charger warnings and alarms graph data Retrieves inverter warning and alarm state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse> InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/InverterChargerWarningsAndAlarms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/InverterChargerWarningsAndAlarms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse>();

                        InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/InverterChargerWarningsAndAlarms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsDefaultImplementation(e, "/installations/{idSite}/widgets/InverterChargerWarningsAndAlarms", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse(ILogger<InstallationsIdSiteWidgetsInverterChargerWarningsAndAlarmsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsInverterState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsInverterState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsInverterStateDefaultImplementation(IInstallationsIdSiteWidgetsInverterStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsInverterState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsInverterState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsInverterStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsInverterStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsInverterState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsInverterState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Inverter state graph data Retrieves inverter state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInverterStateApiResponse?> InstallationsIdSiteWidgetsInverterStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsInverterStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Inverter state graph data Retrieves inverter state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsInverterStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsInverterStateApiResponse> InstallationsIdSiteWidgetsInverterStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsInverterState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsInverterState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/InverterState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/InverterState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsInverterStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsInverterStateApiResponse>();

                        InstallationsIdSiteWidgetsInverterStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/InverterState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsInverterStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsInverterState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsInverterStateDefaultImplementation(e, "/installations/{idSite}/widgets/InverterState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsInverterState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsInverterStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsInverterStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsInverterStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsInverterStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsInverterStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsInverterStateApiResponse(ILogger<InstallationsIdSiteWidgetsInverterStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsMPPTState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsMPPTState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsMPPTStateDefaultImplementation(IInstallationsIdSiteWidgetsMPPTStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsMPPTState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsMPPTState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsMPPTStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsMPPTStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsMPPTState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsMPPTState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// MPPT state graph data Retrieves MPPT state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMPPTStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsMPPTStateApiResponse?> InstallationsIdSiteWidgetsMPPTStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsMPPTStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// MPPT state graph data Retrieves MPPT state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMPPTStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsMPPTStateApiResponse> InstallationsIdSiteWidgetsMPPTStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsMPPTState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsMPPTState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/MPPTState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/MPPTState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsMPPTStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsMPPTStateApiResponse>();

                        InstallationsIdSiteWidgetsMPPTStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/MPPTState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsMPPTStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsMPPTState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsMPPTStateDefaultImplementation(e, "/installations/{idSite}/widgets/MPPTState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsMPPTState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsMPPTStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsMPPTStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsMPPTStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsMPPTStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsMPPTStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsMPPTStateApiResponse(ILogger<InstallationsIdSiteWidgetsMPPTStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsSolarChargerRelayState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsSolarChargerRelayState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsSolarChargerRelayStateDefaultImplementation(IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsSolarChargerRelayState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsSolarChargerRelayState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsSolarChargerRelayStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsSolarChargerRelayState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsSolarChargerRelayState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Solar charger relay state graph data Retrieves solar charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse?> InstallationsIdSiteWidgetsSolarChargerRelayStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsSolarChargerRelayStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Solar charger relay state graph data Retrieves solar charger relay state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse> InstallationsIdSiteWidgetsSolarChargerRelayStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsSolarChargerRelayState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsSolarChargerRelayState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/SolarChargerRelayState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/SolarChargerRelayState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse>();

                        InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/SolarChargerRelayState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsSolarChargerRelayStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsSolarChargerRelayState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsSolarChargerRelayStateDefaultImplementation(e, "/installations/{idSite}/widgets/SolarChargerRelayState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsSolarChargerRelayState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse(ILogger<InstallationsIdSiteWidgetsSolarChargerRelayStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsVeBusState(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsVeBusState(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsVeBusStateDefaultImplementation(IInstallationsIdSiteWidgetsVeBusStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsVeBusState(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsVeBusState(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsVeBusStateApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsVeBusStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsVeBusState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsVeBusState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// VE Bus state graph data Retrieves VE Bus state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsVeBusStateApiResponse?> InstallationsIdSiteWidgetsVeBusStateOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsVeBusStateAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// VE Bus state graph data Retrieves VE Bus state changes for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusStateApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsVeBusStateApiResponse> InstallationsIdSiteWidgetsVeBusStateAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsVeBusState(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsVeBusState(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/VeBusState"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/VeBusState");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsVeBusStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsVeBusStateApiResponse>();

                        InstallationsIdSiteWidgetsVeBusStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/VeBusState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsVeBusStateDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsVeBusState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsVeBusStateDefaultImplementation(e, "/installations/{idSite}/widgets/VeBusState", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsVeBusState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsVeBusStateApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsVeBusStateApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsVeBusStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsVeBusStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsVeBusStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsVeBusStateApiResponse(ILogger<InstallationsIdSiteWidgetsVeBusStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(ref string xAuthorization, ref string idSite, ref Option<int> instance, ref Option<int> start, ref Option<int> end);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void AfterInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsDefaultImplementation(IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void AfterInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        private void OnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance, start, end);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        partial void OnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance, Option<int> start, Option<int> end);

        /// <summary>
        /// VE Bus warnings and alarms graph data Retrieves VE Bus warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse?> InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsAsync(xAuthorization, idSite, instance, start, end, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// VE Bus warnings and alarms graph data Retrieves VE Bus warnings and alarms data for a state graph. If not given a timeframe, data for the last day will be retrieved.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="start">Timestamp from which to fetch data, defaults to one day ago. (optional)</param>
        /// <param name="end">Timestamp to which to fetch data, defaults to now. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse> InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsAsync(string xAuthorization, string idSite, Option<int> instance = default, Option<int> start = default, Option<int> end = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(ref xAuthorization, ref idSite, ref instance, ref start, ref end);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/VeBusWarningsAndAlarms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/VeBusWarningsAndAlarms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (end.IsSet)
                        parseQueryStringLocalVar["end"] = ClientUtils.ParameterToString(end.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse>();

                        InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/VeBusWarningsAndAlarms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance, start, end);

                        Events.ExecuteOnInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsDefaultImplementation(e, "/installations/{idSite}/widgets/VeBusWarningsAndAlarms", uriBuilderLocalVar.Path, xAuthorization, idSite, instance, start, end);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsVeBusWarningsAndAlarms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse(ILogger<InstallationsIdSiteWidgetsVeBusWarningsAndAlarmsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsGeneratorState200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
