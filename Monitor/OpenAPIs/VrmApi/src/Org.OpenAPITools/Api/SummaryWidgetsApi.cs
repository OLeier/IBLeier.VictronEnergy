// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISummaryWidgetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SummaryWidgetsApiEvents Events { get; }

        /// <summary>
        /// BMS diagnostics summary data
        /// </summary>
        /// <remarks>
        /// Retrieves BMS diagnostics summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse> InstallationsIdSiteWidgetsBMSDiagnosticsAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BMS diagnostics summary data
        /// </summary>
        /// <remarks>
        /// Retrieves BMS diagnostics summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse?> InstallationsIdSiteWidgetsBMSDiagnosticsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Battery summary data
        /// </summary>
        /// <remarks>
        /// Retrieves battery summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatterySummaryApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatterySummaryApiResponse> InstallationsIdSiteWidgetsBatterySummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Battery summary data
        /// </summary>
        /// <remarks>
        /// Retrieves battery summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatterySummaryApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsBatterySummaryApiResponse?> InstallationsIdSiteWidgetsBatterySummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// DC meter summary data
        /// </summary>
        /// <remarks>
        /// Retrieves DC meter summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsDCMeterApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsDCMeterApiResponse> InstallationsIdSiteWidgetsDCMeterAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// DC meter summary data
        /// </summary>
        /// <remarks>
        /// Retrieves DC meter summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsDCMeterApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsDCMeterApiResponse?> InstallationsIdSiteWidgetsDCMeterOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// EV charger summary data
        /// </summary>
        /// <remarks>
        /// Retrieves EV charger summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse> InstallationsIdSiteWidgetsEvChargerSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// EV charger summary data
        /// </summary>
        /// <remarks>
        /// Retrieves EV charger summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse?> InstallationsIdSiteWidgetsEvChargerSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// GlobalLink summary data
        /// </summary>
        /// <remarks>
        /// Retrieves GlobalLink summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse> InstallationsIdSiteWidgetsGlobalLinkSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// GlobalLink summary data
        /// </summary>
        /// <remarks>
        /// Retrieves GlobalLink summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse?> InstallationsIdSiteWidgetsGlobalLinkSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historic summary data
        /// </summary>
        /// <remarks>
        /// Retrieves historic summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHistoricDataApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsHistoricDataApiResponse> InstallationsIdSiteWidgetsHistoricDataAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historic summary data
        /// </summary>
        /// <remarks>
        /// Retrieves historic summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHistoricDataApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsHistoricDataApiResponse?> InstallationsIdSiteWidgetsHistoricDataOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// IO extender input and output summary data
        /// </summary>
        /// <remarks>
        /// Retrieves IO extender input and output summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse> InstallationsIdSiteWidgetsIOExtenderInOutAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// IO extender input and output summary data
        /// </summary>
        /// <remarks>
        /// Retrieves IO extender input and output summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse?> InstallationsIdSiteWidgetsIOExtenderInOutOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lithium BMS summary data
        /// </summary>
        /// <remarks>
        /// Retrieves lithium BMS summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsLithiumBMSApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsLithiumBMSApiResponse> InstallationsIdSiteWidgetsLithiumBMSAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lithium BMS summary data
        /// </summary>
        /// <remarks>
        /// Retrieves lithium BMS summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsLithiumBMSApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsLithiumBMSApiResponse?> InstallationsIdSiteWidgetsLithiumBMSOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Meteorological summary data
        /// </summary>
        /// <remarks>
        /// Retrieves meteorological summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse> InstallationsIdSiteWidgetsMeteorologicalSensorAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Meteorological summary data
        /// </summary>
        /// <remarks>
        /// Retrieves meteorological summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse?> InstallationsIdSiteWidgetsMeteorologicalSensorOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Motor summary data
        /// </summary>
        /// <remarks>
        /// Retrieves motor summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMotorSummaryApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsMotorSummaryApiResponse> InstallationsIdSiteWidgetsMotorSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Motor summary data
        /// </summary>
        /// <remarks>
        /// Retrieves motor summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMotorSummaryApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsMotorSummaryApiResponse?> InstallationsIdSiteWidgetsMotorSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// PV inverter summary data
        /// </summary>
        /// <remarks>
        /// Retrieves PV inverter summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsPVInverterStatusApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsPVInverterStatusApiResponse> InstallationsIdSiteWidgetsPVInverterStatusAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// PV inverter summary data
        /// </summary>
        /// <remarks>
        /// Retrieves PV inverter summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsPVInverterStatusApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsPVInverterStatusApiResponse?> InstallationsIdSiteWidgetsPVInverterStatusOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Solar charger summary data
        /// </summary>
        /// <remarks>
        /// Retrieves solar charger summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse> InstallationsIdSiteWidgetsSolarChargerSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Solar charger summary data
        /// </summary>
        /// <remarks>
        /// Retrieves solar charger summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse?> InstallationsIdSiteWidgetsSolarChargerSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// System overview summary data
        /// </summary>
        /// <remarks>
        /// Retrieves system overview summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsStatusApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsStatusApiResponse> InstallationsIdSiteWidgetsStatusAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// System overview summary data
        /// </summary>
        /// <remarks>
        /// Retrieves system overview summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsStatusApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsStatusApiResponse?> InstallationsIdSiteWidgetsStatusOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Tank summary data
        /// </summary>
        /// <remarks>
        /// Retrieves tank summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTankSummaryApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsTankSummaryApiResponse> InstallationsIdSiteWidgetsTankSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Tank summary data
        /// </summary>
        /// <remarks>
        /// Retrieves tank summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTankSummaryApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsTankSummaryApiResponse?> InstallationsIdSiteWidgetsTankSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Temperature summary data
        /// </summary>
        /// <remarks>
        /// Retrieves temperature summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse"/>&gt;</returns>
        Task<IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse> InstallationsIdSiteWidgetsTempSummaryAndGraphAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Temperature summary data
        /// </summary>
        /// <remarks>
        /// Retrieves temperature summary data for an overview, grouped by data attribute.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse"/>?&gt;</returns>
        Task<IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse?> InstallationsIdSiteWidgetsTempSummaryAndGraphOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsBatterySummaryApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsBatterySummaryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsDCMeterApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsDCMeterApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsHistoricDataApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsHistoricDataApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsLithiumBMSApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsLithiumBMSApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsMotorSummaryApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsMotorSummaryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsPVInverterStatusApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsPVInverterStatusApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsStatusApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsStatusApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsTankSummaryApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsTankSummaryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse"/>
    /// </summary>
    public interface IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SummaryWidgetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsBMSDiagnostics;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsBMSDiagnostics;

        internal void ExecuteOnInstallationsIdSiteWidgetsBMSDiagnostics(SummaryWidgetsApi.InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsBMSDiagnostics?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsBMSDiagnostics(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsBMSDiagnostics?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsBatterySummary;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsBatterySummary;

        internal void ExecuteOnInstallationsIdSiteWidgetsBatterySummary(SummaryWidgetsApi.InstallationsIdSiteWidgetsBatterySummaryApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsBatterySummary?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsBatterySummary(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsBatterySummary?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsDCMeter;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsDCMeter;

        internal void ExecuteOnInstallationsIdSiteWidgetsDCMeter(SummaryWidgetsApi.InstallationsIdSiteWidgetsDCMeterApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsDCMeter?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsDCMeter(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsDCMeter?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsEvChargerSummary;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsEvChargerSummary;

        internal void ExecuteOnInstallationsIdSiteWidgetsEvChargerSummary(SummaryWidgetsApi.InstallationsIdSiteWidgetsEvChargerSummaryApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsEvChargerSummary?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsEvChargerSummary(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsEvChargerSummary?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsGlobalLinkSummary;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsGlobalLinkSummary;

        internal void ExecuteOnInstallationsIdSiteWidgetsGlobalLinkSummary(SummaryWidgetsApi.InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsGlobalLinkSummary?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsGlobalLinkSummary(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsGlobalLinkSummary?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsHistoricData;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsHistoricData;

        internal void ExecuteOnInstallationsIdSiteWidgetsHistoricData(SummaryWidgetsApi.InstallationsIdSiteWidgetsHistoricDataApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsHistoricData?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsHistoricData(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsHistoricData?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsIOExtenderInOut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsIOExtenderInOut;

        internal void ExecuteOnInstallationsIdSiteWidgetsIOExtenderInOut(SummaryWidgetsApi.InstallationsIdSiteWidgetsIOExtenderInOutApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsIOExtenderInOut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsIOExtenderInOut(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsIOExtenderInOut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsLithiumBMS;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsLithiumBMS;

        internal void ExecuteOnInstallationsIdSiteWidgetsLithiumBMS(SummaryWidgetsApi.InstallationsIdSiteWidgetsLithiumBMSApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsLithiumBMS?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsLithiumBMS(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsLithiumBMS?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsMeteorologicalSensor;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsMeteorologicalSensor;

        internal void ExecuteOnInstallationsIdSiteWidgetsMeteorologicalSensor(SummaryWidgetsApi.InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsMeteorologicalSensor?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsMeteorologicalSensor(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsMeteorologicalSensor?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsMotorSummary;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsMotorSummary;

        internal void ExecuteOnInstallationsIdSiteWidgetsMotorSummary(SummaryWidgetsApi.InstallationsIdSiteWidgetsMotorSummaryApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsMotorSummary?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsMotorSummary(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsMotorSummary?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsPVInverterStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsPVInverterStatus;

        internal void ExecuteOnInstallationsIdSiteWidgetsPVInverterStatus(SummaryWidgetsApi.InstallationsIdSiteWidgetsPVInverterStatusApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsPVInverterStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsPVInverterStatus(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsPVInverterStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsSolarChargerSummary;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsSolarChargerSummary;

        internal void ExecuteOnInstallationsIdSiteWidgetsSolarChargerSummary(SummaryWidgetsApi.InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsSolarChargerSummary?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsSolarChargerSummary(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsSolarChargerSummary?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsStatus;

        internal void ExecuteOnInstallationsIdSiteWidgetsStatus(SummaryWidgetsApi.InstallationsIdSiteWidgetsStatusApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsStatus(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsTankSummary;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsTankSummary;

        internal void ExecuteOnInstallationsIdSiteWidgetsTankSummary(SummaryWidgetsApi.InstallationsIdSiteWidgetsTankSummaryApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsTankSummary?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsTankSummary(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsTankSummary?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallationsIdSiteWidgetsTempSummaryAndGraph;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallationsIdSiteWidgetsTempSummaryAndGraph;

        internal void ExecuteOnInstallationsIdSiteWidgetsTempSummaryAndGraph(SummaryWidgetsApi.InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse apiResponse)
        {
            OnInstallationsIdSiteWidgetsTempSummaryAndGraph?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallationsIdSiteWidgetsTempSummaryAndGraph(Exception exception)
        {
            OnErrorInstallationsIdSiteWidgetsTempSummaryAndGraph?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SummaryWidgetsApi : ISummaryWidgetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SummaryWidgetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SummaryWidgetsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryWidgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SummaryWidgetsApi(ILogger<SummaryWidgetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SummaryWidgetsApiEvents summaryWidgetsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SummaryWidgetsApi>();
            HttpClient = httpClient;
            Events = summaryWidgetsApiEvents;
        }

        partial void FormatInstallationsIdSiteWidgetsBMSDiagnostics(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsBMSDiagnostics(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsBMSDiagnosticsDefaultImplementation(IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsBMSDiagnostics(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsBMSDiagnostics(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsBMSDiagnosticsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsBMSDiagnostics(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsBMSDiagnostics(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// BMS diagnostics summary data Retrieves BMS diagnostics summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse?> InstallationsIdSiteWidgetsBMSDiagnosticsOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsBMSDiagnosticsAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BMS diagnostics summary data Retrieves BMS diagnostics summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse> InstallationsIdSiteWidgetsBMSDiagnosticsAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsBMSDiagnostics(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsBMSDiagnostics(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/BMSDiagnostics"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/BMSDiagnostics");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse>();

                        InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/BMSDiagnostics", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsBMSDiagnosticsDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsBMSDiagnostics(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsBMSDiagnosticsDefaultImplementation(e, "/installations/{idSite}/widgets/BMSDiagnostics", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsBMSDiagnostics(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsBMSDiagnosticsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse(ILogger<InstallationsIdSiteWidgetsBMSDiagnosticsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsBatterySummary(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsBatterySummary(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsBatterySummaryDefaultImplementation(IInstallationsIdSiteWidgetsBatterySummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsBatterySummary(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsBatterySummary(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsBatterySummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsBatterySummaryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsBatterySummary(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsBatterySummary(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Battery summary data Retrieves battery summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatterySummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatterySummaryApiResponse?> InstallationsIdSiteWidgetsBatterySummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsBatterySummaryAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Battery summary data Retrieves battery summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsBatterySummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsBatterySummaryApiResponse> InstallationsIdSiteWidgetsBatterySummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsBatterySummary(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsBatterySummary(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/BatterySummary"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/BatterySummary");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsBatterySummaryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsBatterySummaryApiResponse>();

                        InstallationsIdSiteWidgetsBatterySummaryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/BatterySummary", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsBatterySummaryDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsBatterySummary(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsBatterySummaryDefaultImplementation(e, "/installations/{idSite}/widgets/BatterySummary", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsBatterySummary(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsBatterySummaryApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsBatterySummaryApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsBatterySummaryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsBatterySummaryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsBatterySummaryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsBatterySummaryApiResponse(ILogger<InstallationsIdSiteWidgetsBatterySummaryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsDCMeter(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsDCMeter(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsDCMeterDefaultImplementation(IInstallationsIdSiteWidgetsDCMeterApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsDCMeter(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsDCMeter(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsDCMeterApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsDCMeterDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsDCMeter(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsDCMeter(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// DC meter summary data Retrieves DC meter summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsDCMeterApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsDCMeterApiResponse?> InstallationsIdSiteWidgetsDCMeterOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsDCMeterAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// DC meter summary data Retrieves DC meter summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsDCMeterApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsDCMeterApiResponse> InstallationsIdSiteWidgetsDCMeterAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsDCMeter(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsDCMeter(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/DCMeter"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/DCMeter");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsDCMeterApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsDCMeterApiResponse>();

                        InstallationsIdSiteWidgetsDCMeterApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/DCMeter", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsDCMeterDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsDCMeter(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsDCMeterDefaultImplementation(e, "/installations/{idSite}/widgets/DCMeter", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsDCMeter(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsDCMeterApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsDCMeterApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsDCMeterApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsDCMeterApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsDCMeterApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsDCMeterApiResponse(ILogger<InstallationsIdSiteWidgetsDCMeterApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsEvChargerSummary(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsEvChargerSummary(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsEvChargerSummaryDefaultImplementation(IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsEvChargerSummary(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsEvChargerSummary(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsEvChargerSummaryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsEvChargerSummary(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsEvChargerSummary(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// EV charger summary data Retrieves EV charger summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse?> InstallationsIdSiteWidgetsEvChargerSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsEvChargerSummaryAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// EV charger summary data Retrieves EV charger summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse> InstallationsIdSiteWidgetsEvChargerSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsEvChargerSummary(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsEvChargerSummary(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/EvChargerSummary"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/EvChargerSummary");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsEvChargerSummaryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsEvChargerSummaryApiResponse>();

                        InstallationsIdSiteWidgetsEvChargerSummaryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/EvChargerSummary", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsEvChargerSummaryDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsEvChargerSummary(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsEvChargerSummaryDefaultImplementation(e, "/installations/{idSite}/widgets/EvChargerSummary", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsEvChargerSummary(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsEvChargerSummaryApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsEvChargerSummaryApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsEvChargerSummaryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsEvChargerSummaryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsEvChargerSummaryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsEvChargerSummaryApiResponse(ILogger<InstallationsIdSiteWidgetsEvChargerSummaryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsGlobalLinkSummary(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsGlobalLinkSummary(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsGlobalLinkSummaryDefaultImplementation(IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsGlobalLinkSummary(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsGlobalLinkSummary(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsGlobalLinkSummaryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsGlobalLinkSummary(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsGlobalLinkSummary(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// GlobalLink summary data Retrieves GlobalLink summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse?> InstallationsIdSiteWidgetsGlobalLinkSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsGlobalLinkSummaryAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// GlobalLink summary data Retrieves GlobalLink summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse> InstallationsIdSiteWidgetsGlobalLinkSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsGlobalLinkSummary(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsGlobalLinkSummary(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/GlobalLinkSummary"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/GlobalLinkSummary");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse>();

                        InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/GlobalLinkSummary", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsGlobalLinkSummaryDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsGlobalLinkSummary(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsGlobalLinkSummaryDefaultImplementation(e, "/installations/{idSite}/widgets/GlobalLinkSummary", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsGlobalLinkSummary(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse(ILogger<InstallationsIdSiteWidgetsGlobalLinkSummaryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsHistoricData(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsHistoricData(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsHistoricDataDefaultImplementation(IInstallationsIdSiteWidgetsHistoricDataApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsHistoricData(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsHistoricData(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsHistoricDataApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsHistoricDataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsHistoricData(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsHistoricData(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Historic summary data Retrieves historic summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHistoricDataApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsHistoricDataApiResponse?> InstallationsIdSiteWidgetsHistoricDataOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsHistoricDataAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historic summary data Retrieves historic summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsHistoricDataApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsHistoricDataApiResponse> InstallationsIdSiteWidgetsHistoricDataAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsHistoricData(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsHistoricData(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/HistoricData"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/HistoricData");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsHistoricDataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsHistoricDataApiResponse>();

                        InstallationsIdSiteWidgetsHistoricDataApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/HistoricData", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsHistoricDataDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsHistoricData(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsHistoricDataDefaultImplementation(e, "/installations/{idSite}/widgets/HistoricData", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsHistoricData(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsHistoricDataApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsHistoricDataApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsHistoricDataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsHistoricDataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsHistoricDataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsHistoricDataApiResponse(ILogger<InstallationsIdSiteWidgetsHistoricDataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsIOExtenderInOut(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsIOExtenderInOut(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsIOExtenderInOutDefaultImplementation(IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsIOExtenderInOut(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsIOExtenderInOut(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsIOExtenderInOutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsIOExtenderInOut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsIOExtenderInOut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// IO extender input and output summary data Retrieves IO extender input and output summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse?> InstallationsIdSiteWidgetsIOExtenderInOutOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsIOExtenderInOutAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// IO extender input and output summary data Retrieves IO extender input and output summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse> InstallationsIdSiteWidgetsIOExtenderInOutAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsIOExtenderInOut(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsIOExtenderInOut(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/IOExtenderInOut"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/IOExtenderInOut");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsIOExtenderInOutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsIOExtenderInOutApiResponse>();

                        InstallationsIdSiteWidgetsIOExtenderInOutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/IOExtenderInOut", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsIOExtenderInOutDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsIOExtenderInOut(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsIOExtenderInOutDefaultImplementation(e, "/installations/{idSite}/widgets/IOExtenderInOut", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsIOExtenderInOut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsIOExtenderInOutApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsIOExtenderInOutApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsIOExtenderInOutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsIOExtenderInOutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsIOExtenderInOutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsIOExtenderInOutApiResponse(ILogger<InstallationsIdSiteWidgetsIOExtenderInOutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsLithiumBMS(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsLithiumBMS(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsLithiumBMSDefaultImplementation(IInstallationsIdSiteWidgetsLithiumBMSApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsLithiumBMS(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsLithiumBMS(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsLithiumBMSApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsLithiumBMSDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsLithiumBMS(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsLithiumBMS(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Lithium BMS summary data Retrieves lithium BMS summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsLithiumBMSApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsLithiumBMSApiResponse?> InstallationsIdSiteWidgetsLithiumBMSOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsLithiumBMSAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lithium BMS summary data Retrieves lithium BMS summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsLithiumBMSApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsLithiumBMSApiResponse> InstallationsIdSiteWidgetsLithiumBMSAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsLithiumBMS(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsLithiumBMS(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/LithiumBMS"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/LithiumBMS");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsLithiumBMSApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsLithiumBMSApiResponse>();

                        InstallationsIdSiteWidgetsLithiumBMSApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/LithiumBMS", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsLithiumBMSDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsLithiumBMS(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsLithiumBMSDefaultImplementation(e, "/installations/{idSite}/widgets/LithiumBMS", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsLithiumBMS(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsLithiumBMSApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsLithiumBMSApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsLithiumBMSApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsLithiumBMSApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsLithiumBMSApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsLithiumBMSApiResponse(ILogger<InstallationsIdSiteWidgetsLithiumBMSApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsMeteorologicalSensor(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsMeteorologicalSensor(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsMeteorologicalSensorDefaultImplementation(IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsMeteorologicalSensor(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsMeteorologicalSensor(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsMeteorologicalSensorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsMeteorologicalSensor(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsMeteorologicalSensor(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Meteorological summary data Retrieves meteorological summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse?> InstallationsIdSiteWidgetsMeteorologicalSensorOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsMeteorologicalSensorAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Meteorological summary data Retrieves meteorological summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse> InstallationsIdSiteWidgetsMeteorologicalSensorAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsMeteorologicalSensor(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsMeteorologicalSensor(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/MeteorologicalSensor"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/MeteorologicalSensor");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse>();

                        InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/MeteorologicalSensor", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsMeteorologicalSensorDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsMeteorologicalSensor(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsMeteorologicalSensorDefaultImplementation(e, "/installations/{idSite}/widgets/MeteorologicalSensor", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsMeteorologicalSensor(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsMeteorologicalSensorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse(ILogger<InstallationsIdSiteWidgetsMeteorologicalSensorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsMotorSummary(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsMotorSummary(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsMotorSummaryDefaultImplementation(IInstallationsIdSiteWidgetsMotorSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsMotorSummary(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsMotorSummary(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsMotorSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsMotorSummaryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsMotorSummary(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsMotorSummary(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Motor summary data Retrieves motor summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMotorSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsMotorSummaryApiResponse?> InstallationsIdSiteWidgetsMotorSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsMotorSummaryAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Motor summary data Retrieves motor summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsMotorSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsMotorSummaryApiResponse> InstallationsIdSiteWidgetsMotorSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsMotorSummary(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsMotorSummary(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/MotorSummary"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/MotorSummary");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsMotorSummaryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsMotorSummaryApiResponse>();

                        InstallationsIdSiteWidgetsMotorSummaryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/MotorSummary", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsMotorSummaryDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsMotorSummary(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsMotorSummaryDefaultImplementation(e, "/installations/{idSite}/widgets/MotorSummary", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsMotorSummary(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsMotorSummaryApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsMotorSummaryApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsMotorSummaryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsMotorSummaryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsMotorSummaryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsMotorSummaryApiResponse(ILogger<InstallationsIdSiteWidgetsMotorSummaryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsPVInverterStatus(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsPVInverterStatus(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsPVInverterStatusDefaultImplementation(IInstallationsIdSiteWidgetsPVInverterStatusApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsPVInverterStatus(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsPVInverterStatus(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsPVInverterStatusApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsPVInverterStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsPVInverterStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsPVInverterStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// PV inverter summary data Retrieves PV inverter summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsPVInverterStatusApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsPVInverterStatusApiResponse?> InstallationsIdSiteWidgetsPVInverterStatusOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsPVInverterStatusAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// PV inverter summary data Retrieves PV inverter summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsPVInverterStatusApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsPVInverterStatusApiResponse> InstallationsIdSiteWidgetsPVInverterStatusAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsPVInverterStatus(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsPVInverterStatus(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/PVInverterStatus"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/PVInverterStatus");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsPVInverterStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsPVInverterStatusApiResponse>();

                        InstallationsIdSiteWidgetsPVInverterStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/PVInverterStatus", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsPVInverterStatusDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsPVInverterStatus(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsPVInverterStatusDefaultImplementation(e, "/installations/{idSite}/widgets/PVInverterStatus", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsPVInverterStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsPVInverterStatusApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsPVInverterStatusApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsPVInverterStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsPVInverterStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsPVInverterStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsPVInverterStatusApiResponse(ILogger<InstallationsIdSiteWidgetsPVInverterStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsSolarChargerSummary(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsSolarChargerSummary(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsSolarChargerSummaryDefaultImplementation(IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsSolarChargerSummary(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsSolarChargerSummary(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsSolarChargerSummaryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsSolarChargerSummary(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsSolarChargerSummary(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Solar charger summary data Retrieves solar charger summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse?> InstallationsIdSiteWidgetsSolarChargerSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsSolarChargerSummaryAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Solar charger summary data Retrieves solar charger summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse> InstallationsIdSiteWidgetsSolarChargerSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsSolarChargerSummary(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsSolarChargerSummary(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/SolarChargerSummary"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/SolarChargerSummary");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse>();

                        InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/SolarChargerSummary", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsSolarChargerSummaryDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsSolarChargerSummary(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsSolarChargerSummaryDefaultImplementation(e, "/installations/{idSite}/widgets/SolarChargerSummary", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsSolarChargerSummary(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsSolarChargerSummaryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse(ILogger<InstallationsIdSiteWidgetsSolarChargerSummaryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsStatus(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsStatus(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsStatusDefaultImplementation(IInstallationsIdSiteWidgetsStatusApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsStatus(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsStatus(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsStatusApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// System overview summary data Retrieves system overview summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsStatusApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsStatusApiResponse?> InstallationsIdSiteWidgetsStatusOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsStatusAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// System overview summary data Retrieves system overview summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsStatusApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsStatusApiResponse> InstallationsIdSiteWidgetsStatusAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsStatus(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsStatus(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/Status"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/Status");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsStatusApiResponse>();

                        InstallationsIdSiteWidgetsStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/Status", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsStatusDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsStatus(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsStatusDefaultImplementation(e, "/installations/{idSite}/widgets/Status", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsStatusApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsStatusApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsStatusApiResponse(ILogger<InstallationsIdSiteWidgetsStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsTankSummary(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsTankSummary(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsTankSummaryDefaultImplementation(IInstallationsIdSiteWidgetsTankSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsTankSummary(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsTankSummary(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsTankSummaryApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsTankSummaryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsTankSummary(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsTankSummary(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Tank summary data Retrieves tank summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTankSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsTankSummaryApiResponse?> InstallationsIdSiteWidgetsTankSummaryOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsTankSummaryAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Tank summary data Retrieves tank summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTankSummaryApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsTankSummaryApiResponse> InstallationsIdSiteWidgetsTankSummaryAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsTankSummary(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsTankSummary(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/TankSummary"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/TankSummary");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsTankSummaryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsTankSummaryApiResponse>();

                        InstallationsIdSiteWidgetsTankSummaryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/TankSummary", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsTankSummaryDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsTankSummary(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsTankSummaryDefaultImplementation(e, "/installations/{idSite}/widgets/TankSummary", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsTankSummary(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsTankSummaryApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsTankSummaryApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsTankSummaryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsTankSummaryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsTankSummaryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsTankSummaryApiResponse(ILogger<InstallationsIdSiteWidgetsTankSummaryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallationsIdSiteWidgetsTempSummaryAndGraph(ref string xAuthorization, ref string idSite, ref Option<int> instance);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <returns></returns>
        private void ValidateInstallationsIdSiteWidgetsTempSummaryAndGraph(string xAuthorization, string idSite)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idSite == null)
                throw new ArgumentNullException(nameof(idSite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void AfterInstallationsIdSiteWidgetsTempSummaryAndGraphDefaultImplementation(IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLog = false;
            AfterInstallationsIdSiteWidgetsTempSummaryAndGraph(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void AfterInstallationsIdSiteWidgetsTempSummaryAndGraph(ref bool suppressDefaultLog, IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse apiResponseLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        private void OnErrorInstallationsIdSiteWidgetsTempSummaryAndGraphDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallationsIdSiteWidgetsTempSummaryAndGraph(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idSite, instance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idSite"></param>
        /// <param name="instance"></param>
        partial void OnErrorInstallationsIdSiteWidgetsTempSummaryAndGraph(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idSite, Option<int> instance);

        /// <summary>
        /// Temperature summary data Retrieves temperature summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse?> InstallationsIdSiteWidgetsTempSummaryAndGraphOrDefaultAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallationsIdSiteWidgetsTempSummaryAndGraphAsync(xAuthorization, idSite, instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Temperature summary data Retrieves temperature summary data for an overview, grouped by data attribute.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idSite">Installation id</param>
        /// <param name="instance">Instance for which to retrieve data, defaults to 0. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse"/>&gt;</returns>
        public async Task<IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse> InstallationsIdSiteWidgetsTempSummaryAndGraphAsync(string xAuthorization, string idSite, Option<int> instance = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallationsIdSiteWidgetsTempSummaryAndGraph(xAuthorization, idSite);

                FormatInstallationsIdSiteWidgetsTempSummaryAndGraph(ref xAuthorization, ref idSite, ref instance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/installations/{idSite}/widgets/TempSummaryAndGraph"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/installations/{idSite}/widgets/TempSummaryAndGraph");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidSite%7D", Uri.EscapeDataString(idSite.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (instance.IsSet)
                        parseQueryStringLocalVar["instance"] = ClientUtils.ParameterToString(instance.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse>();

                        InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/installations/{idSite}/widgets/TempSummaryAndGraph", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallationsIdSiteWidgetsTempSummaryAndGraphDefaultImplementation(apiResponseLocalVar, xAuthorization, idSite, instance);

                        Events.ExecuteOnInstallationsIdSiteWidgetsTempSummaryAndGraph(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallationsIdSiteWidgetsTempSummaryAndGraphDefaultImplementation(e, "/installations/{idSite}/widgets/TempSummaryAndGraph", uriBuilderLocalVar.Path, xAuthorization, idSite, instance);
                Events.ExecuteOnErrorInstallationsIdSiteWidgetsTempSummaryAndGraph(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse"/>
        /// </summary>
        public partial class InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse(ILogger<InstallationsIdSiteWidgetsTempSummaryAndGraphApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.InstallationsIdSiteWidgetsBatterySummary200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
