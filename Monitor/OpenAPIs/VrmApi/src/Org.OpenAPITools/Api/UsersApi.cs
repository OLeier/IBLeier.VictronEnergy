// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUsersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UsersApiEvents Events { get; }

        /// <summary>
        /// Create an access token for a user.
        /// </summary>
        /// <remarks>
        /// Users can create personal access tokens for usage with external services. These tokens can be used as an alternative way of authentication against the VRM API. The token is returned, after which it is not possible to ever retrieve it again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensCreateApiResponse"/>&gt;</returns>
        Task<IUsersIdUserAccesstokensCreateApiResponse> UsersIdUserAccesstokensCreateAsync(string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an access token for a user.
        /// </summary>
        /// <remarks>
        /// Users can create personal access tokens for usage with external services. These tokens can be used as an alternative way of authentication against the VRM API. The token is returned, after which it is not possible to ever retrieve it again.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensCreateApiResponse"/>?&gt;</returns>
        Task<IUsersIdUserAccesstokensCreateApiResponse?> UsersIdUserAccesstokensCreateOrDefaultAsync(string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all access tokens for a user.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all access token details for this user, excluding the actual token itself. Always returns tokens for the requesting user, never for another, regardless of account type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensListApiResponse"/>&gt;</returns>
        Task<IUsersIdUserAccesstokensListApiResponse> UsersIdUserAccesstokensListAsync(string xAuthorization, string idUser, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all access tokens for a user.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all access token details for this user, excluding the actual token itself. Always returns tokens for the requesting user, never for another, regardless of account type.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensListApiResponse"/>?&gt;</returns>
        Task<IUsersIdUserAccesstokensListApiResponse?> UsersIdUserAccesstokensListOrDefaultAsync(string xAuthorization, string idUser, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke an access token for a user.
        /// </summary>
        /// <remarks>
        /// Revokes one or more personal access token for a user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="idAccessToken">Access token to revoke, or wildcard &#39;*&#39; to revoke all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensRevokeApiResponse"/>&gt;</returns>
        Task<IUsersIdUserAccesstokensRevokeApiResponse> UsersIdUserAccesstokensRevokeAsync(string xAuthorization, string idUser, string idAccessToken, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke an access token for a user.
        /// </summary>
        /// <remarks>
        /// Revokes one or more personal access token for a user.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="idAccessToken">Access token to revoke, or wildcard &#39;*&#39; to revoke all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensRevokeApiResponse"/>?&gt;</returns>
        Task<IUsersIdUserAccesstokensRevokeApiResponse?> UsersIdUserAccesstokensRevokeOrDefaultAsync(string xAuthorization, string idUser, string idAccessToken, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds a new site
        /// </summary>
        /// <remarks>
        /// Adds a new site to the user. An email will be sent when the procedure is done.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAddsiteApiResponse"/>&gt;</returns>
        Task<IUsersIdUserAddsiteApiResponse> UsersIdUserAddsiteAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds a new site
        /// </summary>
        /// <remarks>
        /// Adds a new site to the user. An email will be sent when the procedure is done.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAddsiteApiResponse"/>?&gt;</returns>
        Task<IUsersIdUserAddsiteApiResponse?> UsersIdUserAddsiteOrDefaultAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns site id given site identifier
        /// </summary>
        /// <remarks>
        /// Retrieves the site id from user&#39;s installations given site identifier. Admins can retrieve any installation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserGetSiteIdApiResponse"/>&gt;</returns>
        Task<IUsersIdUserGetSiteIdApiResponse> UsersIdUserGetSiteIdAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns site id given site identifier
        /// </summary>
        /// <remarks>
        /// Retrieves the site id from user&#39;s installations given site identifier. Admins can retrieve any installation.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserGetSiteIdApiResponse"/>?&gt;</returns>
        Task<IUsersIdUserGetSiteIdApiResponse?> UsersIdUserGetSiteIdOrDefaultAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// All installations/sites for a given user
        /// </summary>
        /// <remarks>
        /// Retrieves a list of installations to which the user is connected. Normal users can only retrieve their own installations, dealers only those of their linked customers and admins those of all users.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="extended">If 1, include all optional response values. (optional)</param>
        /// <param name="idSite">Id of the site we want to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserInstallationsApiResponse"/>&gt;</returns>
        Task<IUsersIdUserInstallationsApiResponse> UsersIdUserInstallationsAsync(string xAuthorization, string idUser, Option<int> extended = default, Option<int> idSite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// All installations/sites for a given user
        /// </summary>
        /// <remarks>
        /// Retrieves a list of installations to which the user is connected. Normal users can only retrieve their own installations, dealers only those of their linked customers and admins those of all users.
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="extended">If 1, include all optional response values. (optional)</param>
        /// <param name="idSite">Id of the site we want to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserInstallationsApiResponse"/>?&gt;</returns>
        Task<IUsersIdUserInstallationsApiResponse?> UsersIdUserInstallationsOrDefaultAsync(string xAuthorization, string idUser, Option<int> extended = default, Option<int> idSite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Search for sites that you have access to based on ID of the site, email of a user, name of a user, serial number of a device attached to a site, site identifier or email domain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term to filter results.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserSearchApiResponse"/>&gt;</returns>
        Task<IUsersIdUserSearchApiResponse> UsersIdUserSearchAsync(string query, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Search for sites that you have access to based on ID of the site, email of a user, name of a user, serial number of a device attached to a site, site identifier or email domain
        /// </remarks>
        /// <param name="query">Search term to filter results.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserSearchApiResponse"/>?&gt;</returns>
        Task<IUsersIdUserSearchApiResponse?> UsersIdUserSearchOrDefaultAsync(string query, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Basic information about logged in user
        /// </summary>
        /// <remarks>
        /// Retrieves id, name, email and country of the user that is currently logged in
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersMeApiResponse"/>&gt;</returns>
        Task<IUsersMeApiResponse> UsersMeAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Basic information about logged in user
        /// </summary>
        /// <remarks>
        /// Retrieves id, name, email and country of the user that is currently logged in
        /// </remarks>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersMeApiResponse"/>?&gt;</returns>
        Task<IUsersMeApiResponse?> UsersMeOrDefaultAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IUsersIdUserAccesstokensCreateApiResponse"/>
    /// </summary>
    public interface IUsersIdUserAccesstokensCreateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersIdUserAccesstokensCreate200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUserAccesstokensListApiResponse"/>
    /// </summary>
    public interface IUsersIdUserAccesstokensListApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersIdUserAccesstokensList200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUserAccesstokensRevokeApiResponse"/>
    /// </summary>
    public interface IUsersIdUserAccesstokensRevokeApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersIdUserAccesstokensRevoke200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUserAddsiteApiResponse"/>
    /// </summary>
    public interface IUsersIdUserAddsiteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersIdUserAddsite200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUserGetSiteIdApiResponse"/>
    /// </summary>
    public interface IUsersIdUserGetSiteIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersIdUserGetSiteId200Response?>, IHttpStatusCode4XX<Org.OpenAPITools.Model.AuthLogin401Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4xx HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUserInstallationsApiResponse"/>
    /// </summary>
    public interface IUsersIdUserInstallationsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersIdUserInstallations200Response?>, IForbidden<Org.OpenAPITools.Model.UsersIdUserInstallations403Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUserSearchApiResponse"/>
    /// </summary>
    public interface IUsersIdUserSearchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersIdUserSearch200Response?>, IBadRequest<Org.OpenAPITools.Model.UsersIdUserSearch400Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IUsersMeApiResponse"/>
    /// </summary>
    public interface IUsersMeApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersMe200Response?>, IUnauthorized<Org.OpenAPITools.Model.UsersIdUserInstallations403Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UsersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUserAccesstokensCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUserAccesstokensCreate;

        internal void ExecuteOnUsersIdUserAccesstokensCreate(UsersApi.UsersIdUserAccesstokensCreateApiResponse apiResponse)
        {
            OnUsersIdUserAccesstokensCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUserAccesstokensCreate(Exception exception)
        {
            OnErrorUsersIdUserAccesstokensCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUserAccesstokensList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUserAccesstokensList;

        internal void ExecuteOnUsersIdUserAccesstokensList(UsersApi.UsersIdUserAccesstokensListApiResponse apiResponse)
        {
            OnUsersIdUserAccesstokensList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUserAccesstokensList(Exception exception)
        {
            OnErrorUsersIdUserAccesstokensList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUserAccesstokensRevoke;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUserAccesstokensRevoke;

        internal void ExecuteOnUsersIdUserAccesstokensRevoke(UsersApi.UsersIdUserAccesstokensRevokeApiResponse apiResponse)
        {
            OnUsersIdUserAccesstokensRevoke?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUserAccesstokensRevoke(Exception exception)
        {
            OnErrorUsersIdUserAccesstokensRevoke?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUserAddsite;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUserAddsite;

        internal void ExecuteOnUsersIdUserAddsite(UsersApi.UsersIdUserAddsiteApiResponse apiResponse)
        {
            OnUsersIdUserAddsite?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUserAddsite(Exception exception)
        {
            OnErrorUsersIdUserAddsite?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUserGetSiteId;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUserGetSiteId;

        internal void ExecuteOnUsersIdUserGetSiteId(UsersApi.UsersIdUserGetSiteIdApiResponse apiResponse)
        {
            OnUsersIdUserGetSiteId?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUserGetSiteId(Exception exception)
        {
            OnErrorUsersIdUserGetSiteId?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUserInstallations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUserInstallations;

        internal void ExecuteOnUsersIdUserInstallations(UsersApi.UsersIdUserInstallationsApiResponse apiResponse)
        {
            OnUsersIdUserInstallations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUserInstallations(Exception exception)
        {
            OnErrorUsersIdUserInstallations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUserSearch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUserSearch;

        internal void ExecuteOnUsersIdUserSearch(UsersApi.UsersIdUserSearchApiResponse apiResponse)
        {
            OnUsersIdUserSearch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUserSearch(Exception exception)
        {
            OnErrorUsersIdUserSearch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersMe;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersMe;

        internal void ExecuteOnUsersMe(UsersApi.UsersMeApiResponse apiResponse)
        {
            OnUsersMe?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersMe(Exception exception)
        {
            OnErrorUsersMe?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UsersApi : IUsersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UsersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UsersApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(ILogger<UsersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UsersApiEvents usersApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UsersApi>();
            HttpClient = httpClient;
            Events = usersApiEvents;
        }

        partial void FormatUsersIdUserAccesstokensCreate(ref string xAuthorization, ref string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        /// <returns></returns>
        private void ValidateUsersIdUserAccesstokensCreate(string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idUser == null)
                throw new ArgumentNullException(nameof(idUser));

            if (usersIdUserAccesstokensCreateRequest == null)
                throw new ArgumentNullException(nameof(usersIdUserAccesstokensCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        private void AfterUsersIdUserAccesstokensCreateDefaultImplementation(IUsersIdUserAccesstokensCreateApiResponse apiResponseLocalVar, string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUserAccesstokensCreate(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idUser, usersIdUserAccesstokensCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        partial void AfterUsersIdUserAccesstokensCreate(ref bool suppressDefaultLog, IUsersIdUserAccesstokensCreateApiResponse apiResponseLocalVar, string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        private void OnErrorUsersIdUserAccesstokensCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUserAccesstokensCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idUser, usersIdUserAccesstokensCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        partial void OnErrorUsersIdUserAccesstokensCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest);

        /// <summary>
        /// Create an access token for a user. Users can create personal access tokens for usage with external services. These tokens can be used as an alternative way of authentication against the VRM API. The token is returned, after which it is not possible to ever retrieve it again.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensCreateApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAccesstokensCreateApiResponse?> UsersIdUserAccesstokensCreateOrDefaultAsync(string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUserAccesstokensCreateAsync(xAuthorization, idUser, usersIdUserAccesstokensCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an access token for a user. Users can create personal access tokens for usage with external services. These tokens can be used as an alternative way of authentication against the VRM API. The token is returned, after which it is not possible to ever retrieve it again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="usersIdUserAccesstokensCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensCreateApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAccesstokensCreateApiResponse> UsersIdUserAccesstokensCreateAsync(string xAuthorization, string idUser, UsersIdUserAccesstokensCreateRequest usersIdUserAccesstokensCreateRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUserAccesstokensCreate(xAuthorization, idUser, usersIdUserAccesstokensCreateRequest);

                FormatUsersIdUserAccesstokensCreate(ref xAuthorization, ref idUser, usersIdUserAccesstokensCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{idUser}/accesstokens/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{idUser}/accesstokens/create");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidUser%7D", Uri.EscapeDataString(idUser.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (usersIdUserAccesstokensCreateRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(usersIdUserAccesstokensCreateRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUserAccesstokensCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUserAccesstokensCreateApiResponse>();

                        UsersIdUserAccesstokensCreateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{idUser}/accesstokens/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUserAccesstokensCreateDefaultImplementation(apiResponseLocalVar, xAuthorization, idUser, usersIdUserAccesstokensCreateRequest);

                        Events.ExecuteOnUsersIdUserAccesstokensCreate(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUserAccesstokensCreateDefaultImplementation(e, "/users/{idUser}/accesstokens/create", uriBuilderLocalVar.Path, xAuthorization, idUser, usersIdUserAccesstokensCreateRequest);
                Events.ExecuteOnErrorUsersIdUserAccesstokensCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUserAccesstokensCreateApiResponse"/>
        /// </summary>
        public partial class UsersIdUserAccesstokensCreateApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUserAccesstokensCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUserAccesstokensCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUserAccesstokensCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUserAccesstokensCreateApiResponse(ILogger<UsersIdUserAccesstokensCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserAccesstokensCreate200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserAccesstokensCreate200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserAccesstokensCreate200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUserAccesstokensList(ref string xAuthorization, ref string idUser);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        private void ValidateUsersIdUserAccesstokensList(string xAuthorization, string idUser)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idUser == null)
                throw new ArgumentNullException(nameof(idUser));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        private void AfterUsersIdUserAccesstokensListDefaultImplementation(IUsersIdUserAccesstokensListApiResponse apiResponseLocalVar, string xAuthorization, string idUser)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUserAccesstokensList(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idUser);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        partial void AfterUsersIdUserAccesstokensList(ref bool suppressDefaultLog, IUsersIdUserAccesstokensListApiResponse apiResponseLocalVar, string xAuthorization, string idUser);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        private void OnErrorUsersIdUserAccesstokensListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUserAccesstokensList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idUser);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        partial void OnErrorUsersIdUserAccesstokensList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser);

        /// <summary>
        /// List all access tokens for a user. Retrieves a list of all access token details for this user, excluding the actual token itself. Always returns tokens for the requesting user, never for another, regardless of account type.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensListApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAccesstokensListApiResponse?> UsersIdUserAccesstokensListOrDefaultAsync(string xAuthorization, string idUser, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUserAccesstokensListAsync(xAuthorization, idUser, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all access tokens for a user. Retrieves a list of all access token details for this user, excluding the actual token itself. Always returns tokens for the requesting user, never for another, regardless of account type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensListApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAccesstokensListApiResponse> UsersIdUserAccesstokensListAsync(string xAuthorization, string idUser, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUserAccesstokensList(xAuthorization, idUser);

                FormatUsersIdUserAccesstokensList(ref xAuthorization, ref idUser);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{idUser}/accesstokens/list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{idUser}/accesstokens/list");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidUser%7D", Uri.EscapeDataString(idUser.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUserAccesstokensListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUserAccesstokensListApiResponse>();

                        UsersIdUserAccesstokensListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{idUser}/accesstokens/list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUserAccesstokensListDefaultImplementation(apiResponseLocalVar, xAuthorization, idUser);

                        Events.ExecuteOnUsersIdUserAccesstokensList(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUserAccesstokensListDefaultImplementation(e, "/users/{idUser}/accesstokens/list", uriBuilderLocalVar.Path, xAuthorization, idUser);
                Events.ExecuteOnErrorUsersIdUserAccesstokensList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUserAccesstokensListApiResponse"/>
        /// </summary>
        public partial class UsersIdUserAccesstokensListApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUserAccesstokensListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUserAccesstokensListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUserAccesstokensListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUserAccesstokensListApiResponse(ILogger<UsersIdUserAccesstokensListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserAccesstokensList200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserAccesstokensList200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserAccesstokensList200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUserAccesstokensRevoke(ref string xAuthorization, ref string idUser, ref string idAccessToken);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="idAccessToken"></param>
        /// <returns></returns>
        private void ValidateUsersIdUserAccesstokensRevoke(string xAuthorization, string idUser, string idAccessToken)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idUser == null)
                throw new ArgumentNullException(nameof(idUser));

            if (idAccessToken == null)
                throw new ArgumentNullException(nameof(idAccessToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="idAccessToken"></param>
        private void AfterUsersIdUserAccesstokensRevokeDefaultImplementation(IUsersIdUserAccesstokensRevokeApiResponse apiResponseLocalVar, string xAuthorization, string idUser, string idAccessToken)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUserAccesstokensRevoke(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idUser, idAccessToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="idAccessToken"></param>
        partial void AfterUsersIdUserAccesstokensRevoke(ref bool suppressDefaultLog, IUsersIdUserAccesstokensRevokeApiResponse apiResponseLocalVar, string xAuthorization, string idUser, string idAccessToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="idAccessToken"></param>
        private void OnErrorUsersIdUserAccesstokensRevokeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser, string idAccessToken)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUserAccesstokensRevoke(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idUser, idAccessToken);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="idAccessToken"></param>
        partial void OnErrorUsersIdUserAccesstokensRevoke(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser, string idAccessToken);

        /// <summary>
        /// Revoke an access token for a user. Revokes one or more personal access token for a user.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="idAccessToken">Access token to revoke, or wildcard &#39;*&#39; to revoke all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensRevokeApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAccesstokensRevokeApiResponse?> UsersIdUserAccesstokensRevokeOrDefaultAsync(string xAuthorization, string idUser, string idAccessToken, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUserAccesstokensRevokeAsync(xAuthorization, idUser, idAccessToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Revoke an access token for a user. Revokes one or more personal access token for a user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="idAccessToken">Access token to revoke, or wildcard &#39;*&#39; to revoke all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAccesstokensRevokeApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAccesstokensRevokeApiResponse> UsersIdUserAccesstokensRevokeAsync(string xAuthorization, string idUser, string idAccessToken, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUserAccesstokensRevoke(xAuthorization, idUser, idAccessToken);

                FormatUsersIdUserAccesstokensRevoke(ref xAuthorization, ref idUser, ref idAccessToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{idUser}/accesstokens/{idAccessToken}/revoke"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{idUser}/accesstokens/{idAccessToken}/revoke");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidUser%7D", Uri.EscapeDataString(idUser.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidAccessToken%7D", Uri.EscapeDataString(idAccessToken.ToString()));

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUserAccesstokensRevokeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUserAccesstokensRevokeApiResponse>();

                        UsersIdUserAccesstokensRevokeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{idUser}/accesstokens/{idAccessToken}/revoke", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUserAccesstokensRevokeDefaultImplementation(apiResponseLocalVar, xAuthorization, idUser, idAccessToken);

                        Events.ExecuteOnUsersIdUserAccesstokensRevoke(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUserAccesstokensRevokeDefaultImplementation(e, "/users/{idUser}/accesstokens/{idAccessToken}/revoke", uriBuilderLocalVar.Path, xAuthorization, idUser, idAccessToken);
                Events.ExecuteOnErrorUsersIdUserAccesstokensRevoke(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUserAccesstokensRevokeApiResponse"/>
        /// </summary>
        public partial class UsersIdUserAccesstokensRevokeApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUserAccesstokensRevokeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUserAccesstokensRevokeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUserAccesstokensRevokeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUserAccesstokensRevokeApiResponse(ILogger<UsersIdUserAccesstokensRevokeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserAccesstokensRevoke200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserAccesstokensRevoke200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserAccesstokensRevoke200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUserAddsite(ref string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <returns></returns>
        private void ValidateUsersIdUserAddsite(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (usersIdUserAddsiteRequest == null)
                throw new ArgumentNullException(nameof(usersIdUserAddsiteRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        private void AfterUsersIdUserAddsiteDefaultImplementation(IUsersIdUserAddsiteApiResponse apiResponseLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUserAddsite(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, usersIdUserAddsiteRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        partial void AfterUsersIdUserAddsite(ref bool suppressDefaultLog, IUsersIdUserAddsiteApiResponse apiResponseLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        private void OnErrorUsersIdUserAddsiteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUserAddsite(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, usersIdUserAddsiteRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        partial void OnErrorUsersIdUserAddsite(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest);

        /// <summary>
        /// Adds a new site Adds a new site to the user. An email will be sent when the procedure is done.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAddsiteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAddsiteApiResponse?> UsersIdUserAddsiteOrDefaultAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUserAddsiteAsync(xAuthorization, usersIdUserAddsiteRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Adds a new site Adds a new site to the user. An email will be sent when the procedure is done.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserAddsiteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserAddsiteApiResponse> UsersIdUserAddsiteAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUserAddsite(xAuthorization, usersIdUserAddsiteRequest);

                FormatUsersIdUserAddsite(ref xAuthorization, usersIdUserAddsiteRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{idUser}/addsite"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{idUser}/addsite");

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (usersIdUserAddsiteRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(usersIdUserAddsiteRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUserAddsiteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUserAddsiteApiResponse>();

                        UsersIdUserAddsiteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{idUser}/addsite", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUserAddsiteDefaultImplementation(apiResponseLocalVar, xAuthorization, usersIdUserAddsiteRequest);

                        Events.ExecuteOnUsersIdUserAddsite(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUserAddsiteDefaultImplementation(e, "/users/{idUser}/addsite", uriBuilderLocalVar.Path, xAuthorization, usersIdUserAddsiteRequest);
                Events.ExecuteOnErrorUsersIdUserAddsite(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUserAddsiteApiResponse"/>
        /// </summary>
        public partial class UsersIdUserAddsiteApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUserAddsiteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUserAddsiteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUserAddsiteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUserAddsiteApiResponse(ILogger<UsersIdUserAddsiteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserAddsite200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserAddsite200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserAddsite200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUserGetSiteId(ref string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <returns></returns>
        private void ValidateUsersIdUserGetSiteId(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (usersIdUserAddsiteRequest == null)
                throw new ArgumentNullException(nameof(usersIdUserAddsiteRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        private void AfterUsersIdUserGetSiteIdDefaultImplementation(IUsersIdUserGetSiteIdApiResponse apiResponseLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUserGetSiteId(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, usersIdUserAddsiteRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        partial void AfterUsersIdUserGetSiteId(ref bool suppressDefaultLog, IUsersIdUserGetSiteIdApiResponse apiResponseLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        private void OnErrorUsersIdUserGetSiteIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUserGetSiteId(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, usersIdUserAddsiteRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        partial void OnErrorUsersIdUserGetSiteId(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest);

        /// <summary>
        /// Returns site id given site identifier Retrieves the site id from user&#39;s installations given site identifier. Admins can retrieve any installation.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserGetSiteIdApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserGetSiteIdApiResponse?> UsersIdUserGetSiteIdOrDefaultAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUserGetSiteIdAsync(xAuthorization, usersIdUserAddsiteRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns site id given site identifier Retrieves the site id from user&#39;s installations given site identifier. Admins can retrieve any installation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="usersIdUserAddsiteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserGetSiteIdApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserGetSiteIdApiResponse> UsersIdUserGetSiteIdAsync(string xAuthorization, UsersIdUserAddsiteRequest usersIdUserAddsiteRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUserGetSiteId(xAuthorization, usersIdUserAddsiteRequest);

                FormatUsersIdUserGetSiteId(ref xAuthorization, usersIdUserAddsiteRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{idUser}/get-site-id"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{idUser}/get-site-id");

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.Content = (usersIdUserAddsiteRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(usersIdUserAddsiteRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUserGetSiteIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUserGetSiteIdApiResponse>();

                        UsersIdUserGetSiteIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{idUser}/get-site-id", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUserGetSiteIdDefaultImplementation(apiResponseLocalVar, xAuthorization, usersIdUserAddsiteRequest);

                        Events.ExecuteOnUsersIdUserGetSiteId(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUserGetSiteIdDefaultImplementation(e, "/users/{idUser}/get-site-id", uriBuilderLocalVar.Path, xAuthorization, usersIdUserAddsiteRequest);
                Events.ExecuteOnErrorUsersIdUserGetSiteId(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUserGetSiteIdApiResponse"/>
        /// </summary>
        public partial class UsersIdUserGetSiteIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUserGetSiteIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUserGetSiteIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUserGetSiteIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUserGetSiteIdApiResponse(ILogger<UsersIdUserGetSiteIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserGetSiteId200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserGetSiteId200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserGetSiteId200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4xx HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AuthLogin401Response? HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AuthLogin401Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4xx HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out Org.OpenAPITools.Model.AuthLogin401Response? result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUserInstallations(ref string xAuthorization, ref string idUser, ref Option<int> extended, ref Option<int> idSite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        private void ValidateUsersIdUserInstallations(string xAuthorization, string idUser)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));

            if (idUser == null)
                throw new ArgumentNullException(nameof(idUser));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="extended"></param>
        /// <param name="idSite"></param>
        private void AfterUsersIdUserInstallationsDefaultImplementation(IUsersIdUserInstallationsApiResponse apiResponseLocalVar, string xAuthorization, string idUser, Option<int> extended, Option<int> idSite)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUserInstallations(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization, idUser, extended, idSite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="extended"></param>
        /// <param name="idSite"></param>
        partial void AfterUsersIdUserInstallations(ref bool suppressDefaultLog, IUsersIdUserInstallationsApiResponse apiResponseLocalVar, string xAuthorization, string idUser, Option<int> extended, Option<int> idSite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="extended"></param>
        /// <param name="idSite"></param>
        private void OnErrorUsersIdUserInstallationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser, Option<int> extended, Option<int> idSite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUserInstallations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization, idUser, extended, idSite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="idUser"></param>
        /// <param name="extended"></param>
        /// <param name="idSite"></param>
        partial void OnErrorUsersIdUserInstallations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization, string idUser, Option<int> extended, Option<int> idSite);

        /// <summary>
        /// All installations/sites for a given user Retrieves a list of installations to which the user is connected. Normal users can only retrieve their own installations, dealers only those of their linked customers and admins those of all users.
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="extended">If 1, include all optional response values. (optional)</param>
        /// <param name="idSite">Id of the site we want to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserInstallationsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserInstallationsApiResponse?> UsersIdUserInstallationsOrDefaultAsync(string xAuthorization, string idUser, Option<int> extended = default, Option<int> idSite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUserInstallationsAsync(xAuthorization, idUser, extended, idSite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// All installations/sites for a given user Retrieves a list of installations to which the user is connected. Normal users can only retrieve their own installations, dealers only those of their linked customers and admins those of all users.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="extended">If 1, include all optional response values. (optional)</param>
        /// <param name="idSite">Id of the site we want to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserInstallationsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserInstallationsApiResponse> UsersIdUserInstallationsAsync(string xAuthorization, string idUser, Option<int> extended = default, Option<int> idSite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUserInstallations(xAuthorization, idUser);

                FormatUsersIdUserInstallations(ref xAuthorization, ref idUser, ref extended, ref idSite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{idUser}/installations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{idUser}/installations");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BidUser%7D", Uri.EscapeDataString(idUser.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (extended.IsSet)
                        parseQueryStringLocalVar["extended"] = ClientUtils.ParameterToString(extended.Value);

                    if (idSite.IsSet)
                        parseQueryStringLocalVar["idSite"] = ClientUtils.ParameterToString(idSite.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUserInstallationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUserInstallationsApiResponse>();

                        UsersIdUserInstallationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{idUser}/installations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUserInstallationsDefaultImplementation(apiResponseLocalVar, xAuthorization, idUser, extended, idSite);

                        Events.ExecuteOnUsersIdUserInstallations(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUserInstallationsDefaultImplementation(e, "/users/{idUser}/installations", uriBuilderLocalVar.Path, xAuthorization, idUser, extended, idSite);
                Events.ExecuteOnErrorUsersIdUserInstallations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUserInstallationsApiResponse"/>
        /// </summary>
        public partial class UsersIdUserInstallationsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUserInstallationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUserInstallationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUserInstallationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUserInstallationsApiResponse(ILogger<UsersIdUserInstallationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserInstallations200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserInstallations200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserInstallations200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserInstallations403Response? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserInstallations403Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserInstallations403Response? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUserSearch(ref string query);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <returns></returns>
        private void ValidateUsersIdUserSearch(string query)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        private void AfterUsersIdUserSearchDefaultImplementation(IUsersIdUserSearchApiResponse apiResponseLocalVar, string query)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUserSearch(ref suppressDefaultLog, apiResponseLocalVar, query);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        partial void AfterUsersIdUserSearch(ref bool suppressDefaultLog, IUsersIdUserSearchApiResponse apiResponseLocalVar, string query);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        private void OnErrorUsersIdUserSearchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUserSearch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        partial void OnErrorUsersIdUserSearch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query);

        /// <summary>
        /// Search Search for sites that you have access to based on ID of the site, email of a user, name of a user, serial number of a device attached to a site, site identifier or email domain
        /// </summary>
        /// <param name="query">Search term to filter results.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserSearchApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserSearchApiResponse?> UsersIdUserSearchOrDefaultAsync(string query, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUserSearchAsync(query, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Search Search for sites that you have access to based on ID of the site, email of a user, name of a user, serial number of a device attached to a site, site identifier or email domain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search term to filter results.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUserSearchApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUserSearchApiResponse> UsersIdUserSearchAsync(string query, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUserSearch(query);

                FormatUsersIdUserSearch(ref query);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/{idUser}/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/{idUser}/search");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUserSearchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUserSearchApiResponse>();

                        UsersIdUserSearchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{idUser}/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUserSearchDefaultImplementation(apiResponseLocalVar, query);

                        Events.ExecuteOnUsersIdUserSearch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUserSearchDefaultImplementation(e, "/users/{idUser}/search", uriBuilderLocalVar.Path, query);
                Events.ExecuteOnErrorUsersIdUserSearch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUserSearchApiResponse"/>
        /// </summary>
        public partial class UsersIdUserSearchApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUserSearchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUserSearchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUserSearchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUserSearchApiResponse(ILogger<UsersIdUserSearchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserSearch200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserSearch200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserSearch200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserSearch400Response? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserSearch400Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserSearch400Response? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersMe(ref string xAuthorization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <returns></returns>
        private void ValidateUsersMe(string xAuthorization)
        {
            if (xAuthorization == null)
                throw new ArgumentNullException(nameof(xAuthorization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        private void AfterUsersMeDefaultImplementation(IUsersMeApiResponse apiResponseLocalVar, string xAuthorization)
        {
            bool suppressDefaultLog = false;
            AfterUsersMe(ref suppressDefaultLog, apiResponseLocalVar, xAuthorization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xAuthorization"></param>
        partial void AfterUsersMe(ref bool suppressDefaultLog, IUsersMeApiResponse apiResponseLocalVar, string xAuthorization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        private void OnErrorUsersMeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersMe(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xAuthorization);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xAuthorization"></param>
        partial void OnErrorUsersMe(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string xAuthorization);

        /// <summary>
        /// Basic information about logged in user Retrieves id, name, email and country of the user that is currently logged in
        /// </summary>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersMeApiResponse"/>&gt;</returns>
        public async Task<IUsersMeApiResponse?> UsersMeOrDefaultAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersMeAsync(xAuthorization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Basic information about logged in user Retrieves id, name, email and country of the user that is currently logged in
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The bearer token to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersMeApiResponse"/>&gt;</returns>
        public async Task<IUsersMeApiResponse> UsersMeAsync(string xAuthorization, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersMe(xAuthorization);

                FormatUsersMe(ref xAuthorization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/users/me"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/users/me");

                    httpRequestMessageLocalVar.Headers.Add("x-authorization", ClientUtils.ParameterToString(xAuthorization));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersMeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersMeApiResponse>();

                        UsersMeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersMeDefaultImplementation(apiResponseLocalVar, xAuthorization);

                        Events.ExecuteOnUsersMe(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersMeDefaultImplementation(e, "/users/me", uriBuilderLocalVar.Path, xAuthorization);
                Events.ExecuteOnErrorUsersMe(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersMeApiResponse"/>
        /// </summary>
        public partial class UsersMeApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersMeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersMeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersMeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersMeApiResponse(ILogger<UsersMeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersMe200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersMe200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersMe200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersIdUserInstallations403Response? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersIdUserInstallations403Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersIdUserInstallations403Response? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
