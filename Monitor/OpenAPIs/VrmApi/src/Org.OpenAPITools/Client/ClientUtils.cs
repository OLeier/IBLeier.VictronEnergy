/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Org.OpenAPITools.Model;

[assembly: InternalsVisibleTo("Org.OpenAPITools.Test")]

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static partial class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string? ParameterToString(object? obj, string? format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is DateOnly dateOnly)
                return dateOnly.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is InstallationsIdSiteDynamicEssSettingsGet200ResponseData.BatteryFlowRestrictionEnum installationsIdSiteDynamicEssSettingsGet200ResponseDataBatteryFlowRestrictionEnum)
                return InstallationsIdSiteDynamicEssSettingsGet200ResponseData.BatteryFlowRestrictionEnumToJsonValue(installationsIdSiteDynamicEssSettingsGet200ResponseDataBatteryFlowRestrictionEnum);
            if (obj is InstallationsIdSiteDynamicEssSettingsGet200ResponseData.BuyPriceTypeEnum installationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceTypeEnum)
                return InstallationsIdSiteDynamicEssSettingsGet200ResponseData.BuyPriceTypeEnumToJsonValue(installationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceTypeEnum).ToString();
            if (obj is InstallationsIdSiteDynamicEssSettingsGet200ResponseData.GridSellEnum installationsIdSiteDynamicEssSettingsGet200ResponseDataGridSellEnum)
                return InstallationsIdSiteDynamicEssSettingsGet200ResponseData.GridSellEnumToJsonValue(installationsIdSiteDynamicEssSettingsGet200ResponseDataGridSellEnum).ToString();
            if (obj is InstallationsIdSiteDynamicEssSettingsGet200ResponseData.SellPriceTypeEnum installationsIdSiteDynamicEssSettingsGet200ResponseDataSellPriceTypeEnum)
                return InstallationsIdSiteDynamicEssSettingsGet200ResponseData.SellPriceTypeEnumToJsonValue(installationsIdSiteDynamicEssSettingsGet200ResponseDataSellPriceTypeEnum).ToString();
            if (obj is InstallationsIdSiteDynamicEssSettingsPostRequest.BatteryFlowRestrictionEnum installationsIdSiteDynamicEssSettingsPostRequestBatteryFlowRestrictionEnum)
                return InstallationsIdSiteDynamicEssSettingsPostRequest.BatteryFlowRestrictionEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequestBatteryFlowRestrictionEnum);
            if (obj is InstallationsIdSiteDynamicEssSettingsPostRequest.BuyPriceTypeEnum installationsIdSiteDynamicEssSettingsPostRequestBuyPriceTypeEnum)
                return InstallationsIdSiteDynamicEssSettingsPostRequest.BuyPriceTypeEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequestBuyPriceTypeEnum).ToString();
            if (obj is InstallationsIdSiteDynamicEssSettingsPostRequest.GridSellEnum installationsIdSiteDynamicEssSettingsPostRequestGridSellEnum)
                return InstallationsIdSiteDynamicEssSettingsPostRequest.GridSellEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequestGridSellEnum).ToString();
            if (obj is InstallationsIdSiteDynamicEssSettingsPostRequest.SellPriceTypeEnum installationsIdSiteDynamicEssSettingsPostRequestSellPriceTypeEnum)
                return InstallationsIdSiteDynamicEssSettingsPostRequest.SellPriceTypeEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequestSellPriceTypeEnum).ToString();
            if (obj is InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AntennaTypeEnum installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerAntennaTypeEnum)
                return InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AntennaTypeEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerAntennaTypeEnum);
            if (obj is InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AutoUpdateEnum installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerAutoUpdateEnum)
                return InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AutoUpdateEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerAutoUpdateEnum);
            if (obj is InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.UpdateToEnum installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerUpdateToEnum)
                return InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.UpdateToEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerUpdateToEnum);
            if (obj is InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncStatusEnum installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVncStatusEnum)
                return InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncStatusEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVncStatusEnum);
            if (obj is InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnum installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportEnum)
                return InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportEnum);
            if (obj is InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.EnumValueEnum installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidEnumValueEnum)
                return InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.EnumValueEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidEnumValueEnum);
            if (obj is InstallationsIdSiteWidgetsBatterySummary200ResponseRecordsDataValue.DataTypeEnum installationsIdSiteWidgetsBatterySummary200ResponseRecordsDataValueDataTypeEnum)
                return InstallationsIdSiteWidgetsBatterySummary200ResponseRecordsDataValue.DataTypeEnumToJsonValue(installationsIdSiteWidgetsBatterySummary200ResponseRecordsDataValueDataTypeEnum);
            if (obj is InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataTypeEnum installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValueDataTypeEnum)
                return InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataTypeEnumToJsonValue(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValueDataTypeEnum);
            if (obj is UsersIdUserInstallations200ResponseRecordsInnerExtendedInnerAnyOf.DataTypeEnum usersIdUserInstallations200ResponseRecordsInnerExtendedInnerAnyOfDataTypeEnum)
                return UsersIdUserInstallations200ResponseRecordsInnerExtendedInnerAnyOf.DataTypeEnumToJsonValue(usersIdUserInstallations200ResponseRecordsInnerExtendedInnerAnyOfDataTypeEnum);
            if (obj is ICollection collection)
            {
                List<string?> entries = new();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string? SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string? SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        [GeneratedRegex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$")]
        private static partial Regex JsonRegex();

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex().IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string? GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "https://vrmapi.victronenergy.com/v2";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "https";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "/v2";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "vrmapi.victronenergy.com";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
