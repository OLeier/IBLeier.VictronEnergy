// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AuthLoginRequest
    /// </summary>
    public partial class AuthLoginRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthLoginRequest" /> class.
        /// </summary>
        /// <param name="username">User e-mail</param>
        /// <param name="password">User password</param>
        /// <param name="smsToken">2FA code (if 2FA is enabled for the user)</param>
        /// <param name="rememberMe">Get a long-lived token which stays valid for longer</param>
        [JsonConstructor]
        public AuthLoginRequest(string username, string password, Option<string?> smsToken = default, Option<bool?> rememberMe = default)
        {
            Username = username;
            Password = password;
            SmsTokenOption = smsToken;
            RememberMeOption = rememberMe;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// User e-mail
        /// </summary>
        /// <value>User e-mail</value>
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// User password
        /// </summary>
        /// <value>User password</value>
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Used to track the state of SmsToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SmsTokenOption { get; private set; }

        /// <summary>
        /// 2FA code (if 2FA is enabled for the user)
        /// </summary>
        /// <value>2FA code (if 2FA is enabled for the user)</value>
        [JsonPropertyName("sms_token")]
        public string? SmsToken { get { return this.SmsTokenOption; } set { this.SmsTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of RememberMe
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RememberMeOption { get; private set; }

        /// <summary>
        /// Get a long-lived token which stays valid for longer
        /// </summary>
        /// <value>Get a long-lived token which stays valid for longer</value>
        [JsonPropertyName("remember_me")]
        public bool? RememberMe { get { return this.RememberMeOption; } set { this.RememberMeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthLoginRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SmsToken: ").Append(SmsToken).Append("\n");
            sb.Append("  RememberMe: ").Append(RememberMe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthLoginRequest" />
    /// </summary>
    public class AuthLoginRequestJsonConverter : JsonConverter<AuthLoginRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthLoginRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthLoginRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> username = default;
            Option<string?> password = default;
            Option<string?> smsToken = default;
            Option<bool?> rememberMe = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sms_token":
                            smsToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remember_me":
                            rememberMe = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!username.IsSet)
                throw new ArgumentException("Property is required for class AuthLoginRequest.", nameof(username));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class AuthLoginRequest.", nameof(password));

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class AuthLoginRequest.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class AuthLoginRequest.");

            if (smsToken.IsSet && smsToken.Value == null)
                throw new ArgumentNullException(nameof(smsToken), "Property is not nullable for class AuthLoginRequest.");

            if (rememberMe.IsSet && rememberMe.Value == null)
                throw new ArgumentNullException(nameof(rememberMe), "Property is not nullable for class AuthLoginRequest.");

            return new AuthLoginRequest(username.Value!, password.Value!, smsToken, rememberMe);
        }

        /// <summary>
        /// Serializes a <see cref="AuthLoginRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authLoginRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthLoginRequest authLoginRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authLoginRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthLoginRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authLoginRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthLoginRequest authLoginRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authLoginRequest.Username == null)
                throw new ArgumentNullException(nameof(authLoginRequest.Username), "Property is required for class AuthLoginRequest.");

            if (authLoginRequest.Password == null)
                throw new ArgumentNullException(nameof(authLoginRequest.Password), "Property is required for class AuthLoginRequest.");

            if (authLoginRequest.SmsTokenOption.IsSet && authLoginRequest.SmsToken == null)
                throw new ArgumentNullException(nameof(authLoginRequest.SmsToken), "Property is required for class AuthLoginRequest.");

            writer.WriteString("username", authLoginRequest.Username);

            writer.WriteString("password", authLoginRequest.Password);

            if (authLoginRequest.SmsTokenOption.IsSet)
                writer.WriteString("sms_token", authLoginRequest.SmsToken);

            if (authLoginRequest.RememberMeOption.IsSet)
                writer.WriteBoolean("remember_me", authLoginRequest.RememberMeOption.Value!.Value);
        }
    }
}
