// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InstallationsIdSiteDynamicEssSettingsPostRequest
    /// </summary>
    public partial class InstallationsIdSiteDynamicEssSettingsPostRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsIdSiteDynamicEssSettingsPostRequest" /> class.
        /// </summary>
        /// <param name="batteryCapacity">Battery capacity of the system in kWh</param>
        /// <param name="batteryCosts">Battery cycle costs per kWh - You can calculate this value using this formula: battery price / (amount of battery cycles * battery capacity)</param>
        /// <param name="batteryFlowRestriction">Do you need to disable grid charging or discharging?  * &#x60;unrestricted&#x60; - No  * &#x60;noExport&#x60; - Disable discharging battery to grid  * &#x60;noImport&#x60; - Disable charging battery from grid </param>
        /// <param name="buyPriceType">Whether or not you have dynamic buy prices</param>
        /// <param name="chargePower">Maximum battery charging power in kW</param>
        /// <param name="dischargePower">Maximum battery discharging power in kW</param>
        /// <param name="gridSell">Whether or not you can sell energy to the grid.</param>
        /// <param name="isOn">Whether or not you want to enable Dynamic ESS in VRM</param>
        /// <param name="maxPowerFromGrid">Maximum power from the grid in kW</param>
        /// <param name="maxPowerToGrid">Maximum power to the grid in kW</param>
        /// <param name="sellPriceType">Whether or not you have dynamic sell prices</param>
        /// <param name="batteryPrice">Battery price</param>
        /// <param name="buyEnergyProviderId">Identifier of the energy provider for buying energy (see /energy-providers)</param>
        /// <param name="buyPriceFormula">A formula to apply to the raw dynamic energy prices, where p is the raw price.</param>
        /// <param name="buyPriceSchedule">buyPriceSchedule</param>
        /// <param name="idBiddingZone">Identifier of the EU bidding zone (see /bidding-zones)</param>
        /// <param name="isDessSocDifferent">Whether or not you want to have a separate minimum SOC for Dynamic ESS</param>
        /// <param name="isGreenModeOn">Whether or not you want to have green mode turned on for Dynamic ESS</param>
        /// <param name="sellEnergyProviderId">Identifier of the energy provider for buying energy (see /energy-providers)</param>
        /// <param name="sellPriceSchedule">sellPriceSchedule</param>
        /// <param name="sellPriceFormula">A formula to apply to the raw dynamic energy prices, where p is the raw price.</param>
        /// <param name="isPeriodicFullChargeOn">Whether or not do you want to periodically charge your battery to 100% in order to extend battery life</param>
        /// <param name="periodicFullChargeDuration">How many hours should your battery stay at 100% during the periodic recharge</param>
        /// <param name="periodicFullChargeInterval">How often should the battery be fully charged (in days)</param>
        [JsonConstructor]
        public InstallationsIdSiteDynamicEssSettingsPostRequest(decimal batteryCapacity, decimal batteryCosts, BatteryFlowRestrictionEnum batteryFlowRestriction, BuyPriceTypeEnum buyPriceType, decimal chargePower, decimal dischargePower, GridSellEnum gridSell, bool isOn, decimal maxPowerFromGrid, decimal maxPowerToGrid, SellPriceTypeEnum sellPriceType, Option<decimal?> batteryPrice = default, Option<decimal?> buyEnergyProviderId = default, Option<string?> buyPriceFormula = default, Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?> buyPriceSchedule = default, Option<decimal?> idBiddingZone = default, Option<bool?> isDessSocDifferent = default, Option<bool?> isGreenModeOn = default, Option<decimal?> sellEnergyProviderId = default, Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?> sellPriceSchedule = default, Option<string?> sellPriceFormula = default, Option<bool?> isPeriodicFullChargeOn = default, Option<uint?> periodicFullChargeDuration = default, Option<uint?> periodicFullChargeInterval = default)
        {
            BatteryCapacity = batteryCapacity;
            BatteryCosts = batteryCosts;
            BatteryFlowRestriction = batteryFlowRestriction;
            BuyPriceType = buyPriceType;
            ChargePower = chargePower;
            DischargePower = dischargePower;
            GridSell = gridSell;
            IsOn = isOn;
            MaxPowerFromGrid = maxPowerFromGrid;
            MaxPowerToGrid = maxPowerToGrid;
            SellPriceType = sellPriceType;
            BatteryPriceOption = batteryPrice;
            BuyEnergyProviderIdOption = buyEnergyProviderId;
            BuyPriceFormulaOption = buyPriceFormula;
            BuyPriceScheduleOption = buyPriceSchedule;
            IdBiddingZoneOption = idBiddingZone;
            IsDessSocDifferentOption = isDessSocDifferent;
            IsGreenModeOnOption = isGreenModeOn;
            SellEnergyProviderIdOption = sellEnergyProviderId;
            SellPriceScheduleOption = sellPriceSchedule;
            SellPriceFormulaOption = sellPriceFormula;
            IsPeriodicFullChargeOnOption = isPeriodicFullChargeOn;
            PeriodicFullChargeDurationOption = periodicFullChargeDuration;
            PeriodicFullChargeIntervalOption = periodicFullChargeInterval;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Do you need to disable grid charging or discharging?  * &#x60;unrestricted&#x60; - No  * &#x60;noExport&#x60; - Disable discharging battery to grid  * &#x60;noImport&#x60; - Disable charging battery from grid 
        /// </summary>
        /// <value>Do you need to disable grid charging or discharging?  * &#x60;unrestricted&#x60; - No  * &#x60;noExport&#x60; - Disable discharging battery to grid  * &#x60;noImport&#x60; - Disable charging battery from grid </value>
        public enum BatteryFlowRestrictionEnum
        {
            /// <summary>
            /// Enum Unrestricted for value: unrestricted
            /// </summary>
            Unrestricted = 1,

            /// <summary>
            /// Enum NoExport for value: noExport
            /// </summary>
            NoExport = 2,

            /// <summary>
            /// Enum NoImport for value: noImport
            /// </summary>
            NoImport = 3
        }

        /// <summary>
        /// Returns a <see cref="BatteryFlowRestrictionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static BatteryFlowRestrictionEnum BatteryFlowRestrictionEnumFromString(string value)
        {
            if (value.Equals("unrestricted"))
                return BatteryFlowRestrictionEnum.Unrestricted;

            if (value.Equals("noExport"))
                return BatteryFlowRestrictionEnum.NoExport;

            if (value.Equals("noImport"))
                return BatteryFlowRestrictionEnum.NoImport;

            throw new NotImplementedException($"Could not convert value to type BatteryFlowRestrictionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="BatteryFlowRestrictionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BatteryFlowRestrictionEnum? BatteryFlowRestrictionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("unrestricted"))
                return BatteryFlowRestrictionEnum.Unrestricted;

            if (value.Equals("noExport"))
                return BatteryFlowRestrictionEnum.NoExport;

            if (value.Equals("noImport"))
                return BatteryFlowRestrictionEnum.NoImport;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BatteryFlowRestrictionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string BatteryFlowRestrictionEnumToJsonValue(BatteryFlowRestrictionEnum value)
        {
            if (value == BatteryFlowRestrictionEnum.Unrestricted)
                return "unrestricted";

            if (value == BatteryFlowRestrictionEnum.NoExport)
                return "noExport";

            if (value == BatteryFlowRestrictionEnum.NoImport)
                return "noImport";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Do you need to disable grid charging or discharging?  * &#x60;unrestricted&#x60; - No  * &#x60;noExport&#x60; - Disable discharging battery to grid  * &#x60;noImport&#x60; - Disable charging battery from grid 
        /// </summary>
        /// <value>Do you need to disable grid charging or discharging?  * &#x60;unrestricted&#x60; - No  * &#x60;noExport&#x60; - Disable discharging battery to grid  * &#x60;noImport&#x60; - Disable charging battery from grid </value>
        /* <example>unrestricted</example> */
        [JsonPropertyName("batteryFlowRestriction")]
        public BatteryFlowRestrictionEnum BatteryFlowRestriction { get; set; }

        /// <summary>
        /// Whether or not you have dynamic buy prices
        /// </summary>
        /// <value>Whether or not you have dynamic buy prices</value>
        public enum BuyPriceTypeEnum
        {
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 1,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 2
        }

        /// <summary>
        /// Returns a <see cref="BuyPriceTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static BuyPriceTypeEnum BuyPriceTypeEnumFromString(string value)
        {
            if (value.Equals("0"))
                return BuyPriceTypeEnum._0;

            if (value.Equals("1"))
                return BuyPriceTypeEnum._1;

            throw new NotImplementedException($"Could not convert value to type BuyPriceTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="BuyPriceTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BuyPriceTypeEnum? BuyPriceTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("0"))
                return BuyPriceTypeEnum._0;

            if (value.Equals("1"))
                return BuyPriceTypeEnum._1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BuyPriceTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int BuyPriceTypeEnumToJsonValue(BuyPriceTypeEnum value)
        {
            if (value == BuyPriceTypeEnum._0)
                return 0;

            if (value == BuyPriceTypeEnum._1)
                return 1;

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Whether or not you have dynamic buy prices
        /// </summary>
        /// <value>Whether or not you have dynamic buy prices</value>
        /* <example>1</example> */
        [JsonPropertyName("buyPriceType")]
        public BuyPriceTypeEnum BuyPriceType { get; set; }

        /// <summary>
        /// Whether or not you can sell energy to the grid.
        /// </summary>
        /// <value>Whether or not you can sell energy to the grid.</value>
        public enum GridSellEnum
        {
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 1,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 2
        }

        /// <summary>
        /// Returns a <see cref="GridSellEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static GridSellEnum GridSellEnumFromString(string value)
        {
            if (value.Equals("0"))
                return GridSellEnum._0;

            if (value.Equals("1"))
                return GridSellEnum._1;

            throw new NotImplementedException($"Could not convert value to type GridSellEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="GridSellEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GridSellEnum? GridSellEnumFromStringOrDefault(string value)
        {
            if (value.Equals("0"))
                return GridSellEnum._0;

            if (value.Equals("1"))
                return GridSellEnum._1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="GridSellEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int GridSellEnumToJsonValue(GridSellEnum value)
        {
            if (value == GridSellEnum._0)
                return 0;

            if (value == GridSellEnum._1)
                return 1;

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Whether or not you can sell energy to the grid.
        /// </summary>
        /// <value>Whether or not you can sell energy to the grid.</value>
        /* <example>1</example> */
        [JsonPropertyName("gridSell")]
        public GridSellEnum GridSell { get; set; }

        /// <summary>
        /// Whether or not you have dynamic sell prices
        /// </summary>
        /// <value>Whether or not you have dynamic sell prices</value>
        public enum SellPriceTypeEnum
        {
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 1,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 2
        }

        /// <summary>
        /// Returns a <see cref="SellPriceTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SellPriceTypeEnum SellPriceTypeEnumFromString(string value)
        {
            if (value.Equals("0"))
                return SellPriceTypeEnum._0;

            if (value.Equals("1"))
                return SellPriceTypeEnum._1;

            throw new NotImplementedException($"Could not convert value to type SellPriceTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SellPriceTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SellPriceTypeEnum? SellPriceTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("0"))
                return SellPriceTypeEnum._0;

            if (value.Equals("1"))
                return SellPriceTypeEnum._1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SellPriceTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int SellPriceTypeEnumToJsonValue(SellPriceTypeEnum value)
        {
            if (value == SellPriceTypeEnum._0)
                return 0;

            if (value == SellPriceTypeEnum._1)
                return 1;

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Whether or not you have dynamic sell prices
        /// </summary>
        /// <value>Whether or not you have dynamic sell prices</value>
        /* <example>1</example> */
        [JsonPropertyName("sellPriceType")]
        public SellPriceTypeEnum SellPriceType { get; set; }

        /// <summary>
        /// Battery capacity of the system in kWh
        /// </summary>
        /// <value>Battery capacity of the system in kWh</value>
        /* <example>10</example> */
        [JsonPropertyName("batteryCapacity")]
        public decimal BatteryCapacity { get; set; }

        /// <summary>
        /// Battery cycle costs per kWh - You can calculate this value using this formula: battery price / (amount of battery cycles * battery capacity)
        /// </summary>
        /// <value>Battery cycle costs per kWh - You can calculate this value using this formula: battery price / (amount of battery cycles * battery capacity)</value>
        /* <example>0.02</example> */
        [JsonPropertyName("batteryCosts")]
        public decimal BatteryCosts { get; set; }

        /// <summary>
        /// Maximum battery charging power in kW
        /// </summary>
        /// <value>Maximum battery charging power in kW</value>
        /* <example>10</example> */
        [JsonPropertyName("chargePower")]
        public decimal ChargePower { get; set; }

        /// <summary>
        /// Maximum battery discharging power in kW
        /// </summary>
        /// <value>Maximum battery discharging power in kW</value>
        /* <example>10</example> */
        [JsonPropertyName("dischargePower")]
        public decimal DischargePower { get; set; }

        /// <summary>
        /// Whether or not you want to enable Dynamic ESS in VRM
        /// </summary>
        /// <value>Whether or not you want to enable Dynamic ESS in VRM</value>
        /* <example>true</example> */
        [JsonPropertyName("isOn")]
        public bool IsOn { get; set; }

        /// <summary>
        /// Maximum power from the grid in kW
        /// </summary>
        /// <value>Maximum power from the grid in kW</value>
        /* <example>10</example> */
        [JsonPropertyName("maxPowerFromGrid")]
        public decimal MaxPowerFromGrid { get; set; }

        /// <summary>
        /// Maximum power to the grid in kW
        /// </summary>
        /// <value>Maximum power to the grid in kW</value>
        /* <example>10</example> */
        [JsonPropertyName("maxPowerToGrid")]
        public decimal MaxPowerToGrid { get; set; }

        /// <summary>
        /// Used to track the state of BatteryPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BatteryPriceOption { get; private set; }

        /// <summary>
        /// Battery price
        /// </summary>
        /// <value>Battery price</value>
        /* <example>250</example> */
        [JsonPropertyName("batteryPrice")]
        public decimal? BatteryPrice { get { return this.BatteryPriceOption; } set { this.BatteryPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuyEnergyProviderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BuyEnergyProviderIdOption { get; private set; }

        /// <summary>
        /// Identifier of the energy provider for buying energy (see /energy-providers)
        /// </summary>
        /// <value>Identifier of the energy provider for buying energy (see /energy-providers)</value>
        /* <example>1</example> */
        [JsonPropertyName("buyEnergyProviderId")]
        public decimal? BuyEnergyProviderId { get { return this.BuyEnergyProviderIdOption; } set { this.BuyEnergyProviderIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuyPriceFormula
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuyPriceFormulaOption { get; private set; }

        /// <summary>
        /// A formula to apply to the raw dynamic energy prices, where p is the raw price.
        /// </summary>
        /// <value>A formula to apply to the raw dynamic energy prices, where p is the raw price.</value>
        /* <example>1.21*p+0.04</example> */
        [JsonPropertyName("buyPriceFormula")]
        public string? BuyPriceFormula { get { return this.BuyPriceFormulaOption; } set { this.BuyPriceFormulaOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuyPriceSchedule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?> BuyPriceScheduleOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyPriceSchedule
        /// </summary>
        [JsonPropertyName("buyPriceSchedule")]
        public List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>? BuyPriceSchedule { get { return this.BuyPriceScheduleOption; } set { this.BuyPriceScheduleOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdBiddingZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> IdBiddingZoneOption { get; private set; }

        /// <summary>
        /// Identifier of the EU bidding zone (see /bidding-zones)
        /// </summary>
        /// <value>Identifier of the EU bidding zone (see /bidding-zones)</value>
        /* <example>1</example> */
        [JsonPropertyName("idBiddingZone")]
        public decimal? IdBiddingZone { get { return this.IdBiddingZoneOption; } set { this.IdBiddingZoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDessSocDifferent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDessSocDifferentOption { get; private set; }

        /// <summary>
        /// Whether or not you want to have a separate minimum SOC for Dynamic ESS
        /// </summary>
        /// <value>Whether or not you want to have a separate minimum SOC for Dynamic ESS</value>
        /* <example>false</example> */
        [JsonPropertyName("isDessSocDifferent")]
        public bool? IsDessSocDifferent { get { return this.IsDessSocDifferentOption; } set { this.IsDessSocDifferentOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsGreenModeOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsGreenModeOnOption { get; private set; }

        /// <summary>
        /// Whether or not you want to have green mode turned on for Dynamic ESS
        /// </summary>
        /// <value>Whether or not you want to have green mode turned on for Dynamic ESS</value>
        /* <example>false</example> */
        [JsonPropertyName("isGreenModeOn")]
        public bool? IsGreenModeOn { get { return this.IsGreenModeOnOption; } set { this.IsGreenModeOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of SellEnergyProviderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SellEnergyProviderIdOption { get; private set; }

        /// <summary>
        /// Identifier of the energy provider for buying energy (see /energy-providers)
        /// </summary>
        /// <value>Identifier of the energy provider for buying energy (see /energy-providers)</value>
        /* <example>1</example> */
        [JsonPropertyName("sellEnergyProviderId")]
        public decimal? SellEnergyProviderId { get { return this.SellEnergyProviderIdOption; } set { this.SellEnergyProviderIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SellPriceSchedule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?> SellPriceScheduleOption { get; private set; }

        /// <summary>
        /// Gets or Sets SellPriceSchedule
        /// </summary>
        [JsonPropertyName("sellPriceSchedule")]
        public List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>? SellPriceSchedule { get { return this.SellPriceScheduleOption; } set { this.SellPriceScheduleOption = new(value); } }

        /// <summary>
        /// Used to track the state of SellPriceFormula
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SellPriceFormulaOption { get; private set; }

        /// <summary>
        /// A formula to apply to the raw dynamic energy prices, where p is the raw price.
        /// </summary>
        /// <value>A formula to apply to the raw dynamic energy prices, where p is the raw price.</value>
        /* <example>1.21*p+0.04</example> */
        [JsonPropertyName("sellPriceFormula")]
        public string? SellPriceFormula { get { return this.SellPriceFormulaOption; } set { this.SellPriceFormulaOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPeriodicFullChargeOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPeriodicFullChargeOnOption { get; private set; }

        /// <summary>
        /// Whether or not do you want to periodically charge your battery to 100% in order to extend battery life
        /// </summary>
        /// <value>Whether or not do you want to periodically charge your battery to 100% in order to extend battery life</value>
        /* <example>true</example> */
        [JsonPropertyName("isPeriodicFullChargeOn")]
        public bool? IsPeriodicFullChargeOn { get { return this.IsPeriodicFullChargeOnOption; } set { this.IsPeriodicFullChargeOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of PeriodicFullChargeDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<uint?> PeriodicFullChargeDurationOption { get; private set; }

        /// <summary>
        /// How many hours should your battery stay at 100% during the periodic recharge
        /// </summary>
        /// <value>How many hours should your battery stay at 100% during the periodic recharge</value>
        /* <example>2</example> */
        [JsonPropertyName("periodicFullChargeDuration")]
        public uint? PeriodicFullChargeDuration { get { return this.PeriodicFullChargeDurationOption; } set { this.PeriodicFullChargeDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of PeriodicFullChargeInterval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<uint?> PeriodicFullChargeIntervalOption { get; private set; }

        /// <summary>
        /// How often should the battery be fully charged (in days)
        /// </summary>
        /// <value>How often should the battery be fully charged (in days)</value>
        /* <example>14</example> */
        [JsonPropertyName("periodicFullChargeInterval")]
        public uint? PeriodicFullChargeInterval { get { return this.PeriodicFullChargeIntervalOption; } set { this.PeriodicFullChargeIntervalOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallationsIdSiteDynamicEssSettingsPostRequest {\n");
            sb.Append("  BatteryCapacity: ").Append(BatteryCapacity).Append("\n");
            sb.Append("  BatteryCosts: ").Append(BatteryCosts).Append("\n");
            sb.Append("  BatteryFlowRestriction: ").Append(BatteryFlowRestriction).Append("\n");
            sb.Append("  BuyPriceType: ").Append(BuyPriceType).Append("\n");
            sb.Append("  ChargePower: ").Append(ChargePower).Append("\n");
            sb.Append("  DischargePower: ").Append(DischargePower).Append("\n");
            sb.Append("  GridSell: ").Append(GridSell).Append("\n");
            sb.Append("  IsOn: ").Append(IsOn).Append("\n");
            sb.Append("  MaxPowerFromGrid: ").Append(MaxPowerFromGrid).Append("\n");
            sb.Append("  MaxPowerToGrid: ").Append(MaxPowerToGrid).Append("\n");
            sb.Append("  SellPriceType: ").Append(SellPriceType).Append("\n");
            sb.Append("  BatteryPrice: ").Append(BatteryPrice).Append("\n");
            sb.Append("  BuyEnergyProviderId: ").Append(BuyEnergyProviderId).Append("\n");
            sb.Append("  BuyPriceFormula: ").Append(BuyPriceFormula).Append("\n");
            sb.Append("  BuyPriceSchedule: ").Append(BuyPriceSchedule).Append("\n");
            sb.Append("  IdBiddingZone: ").Append(IdBiddingZone).Append("\n");
            sb.Append("  IsDessSocDifferent: ").Append(IsDessSocDifferent).Append("\n");
            sb.Append("  IsGreenModeOn: ").Append(IsGreenModeOn).Append("\n");
            sb.Append("  SellEnergyProviderId: ").Append(SellEnergyProviderId).Append("\n");
            sb.Append("  SellPriceSchedule: ").Append(SellPriceSchedule).Append("\n");
            sb.Append("  SellPriceFormula: ").Append(SellPriceFormula).Append("\n");
            sb.Append("  IsPeriodicFullChargeOn: ").Append(IsPeriodicFullChargeOn).Append("\n");
            sb.Append("  PeriodicFullChargeDuration: ").Append(PeriodicFullChargeDuration).Append("\n");
            sb.Append("  PeriodicFullChargeInterval: ").Append(PeriodicFullChargeInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallationsIdSiteDynamicEssSettingsPostRequest" />
    /// </summary>
    public class InstallationsIdSiteDynamicEssSettingsPostRequestJsonConverter : JsonConverter<InstallationsIdSiteDynamicEssSettingsPostRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallationsIdSiteDynamicEssSettingsPostRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallationsIdSiteDynamicEssSettingsPostRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> batteryCapacity = default;
            Option<decimal?> batteryCosts = default;
            Option<InstallationsIdSiteDynamicEssSettingsPostRequest.BatteryFlowRestrictionEnum?> batteryFlowRestriction = default;
            Option<InstallationsIdSiteDynamicEssSettingsPostRequest.BuyPriceTypeEnum?> buyPriceType = default;
            Option<decimal?> chargePower = default;
            Option<decimal?> dischargePower = default;
            Option<InstallationsIdSiteDynamicEssSettingsPostRequest.GridSellEnum?> gridSell = default;
            Option<bool?> isOn = default;
            Option<decimal?> maxPowerFromGrid = default;
            Option<decimal?> maxPowerToGrid = default;
            Option<InstallationsIdSiteDynamicEssSettingsPostRequest.SellPriceTypeEnum?> sellPriceType = default;
            Option<decimal?> batteryPrice = default;
            Option<decimal?> buyEnergyProviderId = default;
            Option<string?> buyPriceFormula = default;
            Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?> buyPriceSchedule = default;
            Option<decimal?> idBiddingZone = default;
            Option<bool?> isDessSocDifferent = default;
            Option<bool?> isGreenModeOn = default;
            Option<decimal?> sellEnergyProviderId = default;
            Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?> sellPriceSchedule = default;
            Option<string?> sellPriceFormula = default;
            Option<bool?> isPeriodicFullChargeOn = default;
            Option<uint?> periodicFullChargeDuration = default;
            Option<uint?> periodicFullChargeInterval = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "batteryCapacity":
                            batteryCapacity = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "batteryCosts":
                            batteryCosts = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "batteryFlowRestriction":
                            string? batteryFlowRestrictionRawValue = utf8JsonReader.GetString();
                            if (batteryFlowRestrictionRawValue != null)
                                batteryFlowRestriction = new Option<InstallationsIdSiteDynamicEssSettingsPostRequest.BatteryFlowRestrictionEnum?>(InstallationsIdSiteDynamicEssSettingsPostRequest.BatteryFlowRestrictionEnumFromStringOrDefault(batteryFlowRestrictionRawValue));
                            break;
                        case "buyPriceType":
                            buyPriceType = new Option<InstallationsIdSiteDynamicEssSettingsPostRequest.BuyPriceTypeEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (InstallationsIdSiteDynamicEssSettingsPostRequest.BuyPriceTypeEnum?)null : (InstallationsIdSiteDynamicEssSettingsPostRequest.BuyPriceTypeEnum)utf8JsonReader.GetInt32());
                            break;
                        case "chargePower":
                            chargePower = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "dischargePower":
                            dischargePower = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "gridSell":
                            gridSell = new Option<InstallationsIdSiteDynamicEssSettingsPostRequest.GridSellEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (InstallationsIdSiteDynamicEssSettingsPostRequest.GridSellEnum?)null : (InstallationsIdSiteDynamicEssSettingsPostRequest.GridSellEnum)utf8JsonReader.GetInt32());
                            break;
                        case "isOn":
                            isOn = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "maxPowerFromGrid":
                            maxPowerFromGrid = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "maxPowerToGrid":
                            maxPowerToGrid = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "sellPriceType":
                            sellPriceType = new Option<InstallationsIdSiteDynamicEssSettingsPostRequest.SellPriceTypeEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (InstallationsIdSiteDynamicEssSettingsPostRequest.SellPriceTypeEnum?)null : (InstallationsIdSiteDynamicEssSettingsPostRequest.SellPriceTypeEnum)utf8JsonReader.GetInt32());
                            break;
                        case "batteryPrice":
                            batteryPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "buyEnergyProviderId":
                            buyEnergyProviderId = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "buyPriceFormula":
                            buyPriceFormula = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "buyPriceSchedule":
                            buyPriceSchedule = new Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?>(JsonSerializer.Deserialize<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "idBiddingZone":
                            idBiddingZone = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "isDessSocDifferent":
                            isDessSocDifferent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isGreenModeOn":
                            isGreenModeOn = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sellEnergyProviderId":
                            sellEnergyProviderId = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "sellPriceSchedule":
                            sellPriceSchedule = new Option<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>?>(JsonSerializer.Deserialize<List<InstallationsIdSiteDynamicEssSettingsGet200ResponseDataBuyPriceScheduleInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sellPriceFormula":
                            sellPriceFormula = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isPeriodicFullChargeOn":
                            isPeriodicFullChargeOn = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "periodicFullChargeDuration":
                            periodicFullChargeDuration = new Option<uint?>(JsonSerializer.Deserialize<uint>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "periodicFullChargeInterval":
                            periodicFullChargeInterval = new Option<uint?>(JsonSerializer.Deserialize<uint>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!batteryCapacity.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(batteryCapacity));

            if (!batteryCosts.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(batteryCosts));

            if (!batteryFlowRestriction.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(batteryFlowRestriction));

            if (!buyPriceType.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(buyPriceType));

            if (!chargePower.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(chargePower));

            if (!dischargePower.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(dischargePower));

            if (!gridSell.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(gridSell));

            if (!isOn.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(isOn));

            if (!maxPowerFromGrid.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(maxPowerFromGrid));

            if (!maxPowerToGrid.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(maxPowerToGrid));

            if (!sellPriceType.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.", nameof(sellPriceType));

            if (batteryCapacity.IsSet && batteryCapacity.Value == null)
                throw new ArgumentNullException(nameof(batteryCapacity), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (batteryCosts.IsSet && batteryCosts.Value == null)
                throw new ArgumentNullException(nameof(batteryCosts), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (batteryFlowRestriction.IsSet && batteryFlowRestriction.Value == null)
                throw new ArgumentNullException(nameof(batteryFlowRestriction), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (buyPriceType.IsSet && buyPriceType.Value == null)
                throw new ArgumentNullException(nameof(buyPriceType), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (chargePower.IsSet && chargePower.Value == null)
                throw new ArgumentNullException(nameof(chargePower), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (dischargePower.IsSet && dischargePower.Value == null)
                throw new ArgumentNullException(nameof(dischargePower), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (gridSell.IsSet && gridSell.Value == null)
                throw new ArgumentNullException(nameof(gridSell), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (isOn.IsSet && isOn.Value == null)
                throw new ArgumentNullException(nameof(isOn), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (maxPowerFromGrid.IsSet && maxPowerFromGrid.Value == null)
                throw new ArgumentNullException(nameof(maxPowerFromGrid), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (maxPowerToGrid.IsSet && maxPowerToGrid.Value == null)
                throw new ArgumentNullException(nameof(maxPowerToGrid), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (sellPriceType.IsSet && sellPriceType.Value == null)
                throw new ArgumentNullException(nameof(sellPriceType), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (batteryPrice.IsSet && batteryPrice.Value == null)
                throw new ArgumentNullException(nameof(batteryPrice), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (buyEnergyProviderId.IsSet && buyEnergyProviderId.Value == null)
                throw new ArgumentNullException(nameof(buyEnergyProviderId), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (buyPriceFormula.IsSet && buyPriceFormula.Value == null)
                throw new ArgumentNullException(nameof(buyPriceFormula), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (buyPriceSchedule.IsSet && buyPriceSchedule.Value == null)
                throw new ArgumentNullException(nameof(buyPriceSchedule), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (idBiddingZone.IsSet && idBiddingZone.Value == null)
                throw new ArgumentNullException(nameof(idBiddingZone), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (isDessSocDifferent.IsSet && isDessSocDifferent.Value == null)
                throw new ArgumentNullException(nameof(isDessSocDifferent), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (isGreenModeOn.IsSet && isGreenModeOn.Value == null)
                throw new ArgumentNullException(nameof(isGreenModeOn), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (sellEnergyProviderId.IsSet && sellEnergyProviderId.Value == null)
                throw new ArgumentNullException(nameof(sellEnergyProviderId), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (sellPriceSchedule.IsSet && sellPriceSchedule.Value == null)
                throw new ArgumentNullException(nameof(sellPriceSchedule), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (sellPriceFormula.IsSet && sellPriceFormula.Value == null)
                throw new ArgumentNullException(nameof(sellPriceFormula), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (isPeriodicFullChargeOn.IsSet && isPeriodicFullChargeOn.Value == null)
                throw new ArgumentNullException(nameof(isPeriodicFullChargeOn), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (periodicFullChargeDuration.IsSet && periodicFullChargeDuration.Value == null)
                throw new ArgumentNullException(nameof(periodicFullChargeDuration), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (periodicFullChargeInterval.IsSet && periodicFullChargeInterval.Value == null)
                throw new ArgumentNullException(nameof(periodicFullChargeInterval), "Property is not nullable for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            return new InstallationsIdSiteDynamicEssSettingsPostRequest(batteryCapacity.Value!.Value!, batteryCosts.Value!.Value!, batteryFlowRestriction.Value!.Value!, buyPriceType.Value!.Value!, chargePower.Value!.Value!, dischargePower.Value!.Value!, gridSell.Value!.Value!, isOn.Value!.Value!, maxPowerFromGrid.Value!.Value!, maxPowerToGrid.Value!.Value!, sellPriceType.Value!.Value!, batteryPrice, buyEnergyProviderId, buyPriceFormula, buyPriceSchedule, idBiddingZone, isDessSocDifferent, isGreenModeOn, sellEnergyProviderId, sellPriceSchedule, sellPriceFormula, isPeriodicFullChargeOn, periodicFullChargeDuration, periodicFullChargeInterval);
        }

        /// <summary>
        /// Serializes a <see cref="InstallationsIdSiteDynamicEssSettingsPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallationsIdSiteDynamicEssSettingsPostRequest installationsIdSiteDynamicEssSettingsPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installationsIdSiteDynamicEssSettingsPostRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallationsIdSiteDynamicEssSettingsPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteDynamicEssSettingsPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallationsIdSiteDynamicEssSettingsPostRequest installationsIdSiteDynamicEssSettingsPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceFormulaOption.IsSet && installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceFormula == null)
                throw new ArgumentNullException(nameof(installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceFormula), "Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceScheduleOption.IsSet && installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceSchedule == null)
                throw new ArgumentNullException(nameof(installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceSchedule), "Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (installationsIdSiteDynamicEssSettingsPostRequest.SellPriceScheduleOption.IsSet && installationsIdSiteDynamicEssSettingsPostRequest.SellPriceSchedule == null)
                throw new ArgumentNullException(nameof(installationsIdSiteDynamicEssSettingsPostRequest.SellPriceSchedule), "Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (installationsIdSiteDynamicEssSettingsPostRequest.SellPriceFormulaOption.IsSet && installationsIdSiteDynamicEssSettingsPostRequest.SellPriceFormula == null)
                throw new ArgumentNullException(nameof(installationsIdSiteDynamicEssSettingsPostRequest.SellPriceFormula), "Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeDurationOption.IsSet && installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeDuration == null)
                throw new ArgumentNullException(nameof(installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeDuration), "Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            if (installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeIntervalOption.IsSet && installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeInterval == null)
                throw new ArgumentNullException(nameof(installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeInterval), "Property is required for class InstallationsIdSiteDynamicEssSettingsPostRequest.");

            writer.WriteNumber("batteryCapacity", installationsIdSiteDynamicEssSettingsPostRequest.BatteryCapacity);

            writer.WriteNumber("batteryCosts", installationsIdSiteDynamicEssSettingsPostRequest.BatteryCosts);

            var batteryFlowRestrictionRawValue = InstallationsIdSiteDynamicEssSettingsPostRequest.BatteryFlowRestrictionEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequest.BatteryFlowRestriction);
            writer.WriteString("batteryFlowRestriction", batteryFlowRestrictionRawValue);
            writer.WriteNumber("buyPriceType", InstallationsIdSiteDynamicEssSettingsPostRequest.BuyPriceTypeEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceType));

            writer.WriteNumber("chargePower", installationsIdSiteDynamicEssSettingsPostRequest.ChargePower);

            writer.WriteNumber("dischargePower", installationsIdSiteDynamicEssSettingsPostRequest.DischargePower);

            writer.WriteNumber("gridSell", InstallationsIdSiteDynamicEssSettingsPostRequest.GridSellEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequest.GridSell));

            writer.WriteBoolean("isOn", installationsIdSiteDynamicEssSettingsPostRequest.IsOn);

            writer.WriteNumber("maxPowerFromGrid", installationsIdSiteDynamicEssSettingsPostRequest.MaxPowerFromGrid);

            writer.WriteNumber("maxPowerToGrid", installationsIdSiteDynamicEssSettingsPostRequest.MaxPowerToGrid);

            writer.WriteNumber("sellPriceType", InstallationsIdSiteDynamicEssSettingsPostRequest.SellPriceTypeEnumToJsonValue(installationsIdSiteDynamicEssSettingsPostRequest.SellPriceType));

            if (installationsIdSiteDynamicEssSettingsPostRequest.BatteryPriceOption.IsSet)
                writer.WriteNumber("batteryPrice", installationsIdSiteDynamicEssSettingsPostRequest.BatteryPriceOption.Value!.Value);

            if (installationsIdSiteDynamicEssSettingsPostRequest.BuyEnergyProviderIdOption.IsSet)
                writer.WriteNumber("buyEnergyProviderId", installationsIdSiteDynamicEssSettingsPostRequest.BuyEnergyProviderIdOption.Value!.Value);

            if (installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceFormulaOption.IsSet)
                writer.WriteString("buyPriceFormula", installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceFormula);

            if (installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceScheduleOption.IsSet)
            {
                writer.WritePropertyName("buyPriceSchedule");
                JsonSerializer.Serialize(writer, installationsIdSiteDynamicEssSettingsPostRequest.BuyPriceSchedule, jsonSerializerOptions);
            }
            if (installationsIdSiteDynamicEssSettingsPostRequest.IdBiddingZoneOption.IsSet)
                writer.WriteNumber("idBiddingZone", installationsIdSiteDynamicEssSettingsPostRequest.IdBiddingZoneOption.Value!.Value);

            if (installationsIdSiteDynamicEssSettingsPostRequest.IsDessSocDifferentOption.IsSet)
                writer.WriteBoolean("isDessSocDifferent", installationsIdSiteDynamicEssSettingsPostRequest.IsDessSocDifferentOption.Value!.Value);

            if (installationsIdSiteDynamicEssSettingsPostRequest.IsGreenModeOnOption.IsSet)
                writer.WriteBoolean("isGreenModeOn", installationsIdSiteDynamicEssSettingsPostRequest.IsGreenModeOnOption.Value!.Value);

            if (installationsIdSiteDynamicEssSettingsPostRequest.SellEnergyProviderIdOption.IsSet)
                writer.WriteNumber("sellEnergyProviderId", installationsIdSiteDynamicEssSettingsPostRequest.SellEnergyProviderIdOption.Value!.Value);

            if (installationsIdSiteDynamicEssSettingsPostRequest.SellPriceScheduleOption.IsSet)
            {
                writer.WritePropertyName("sellPriceSchedule");
                JsonSerializer.Serialize(writer, installationsIdSiteDynamicEssSettingsPostRequest.SellPriceSchedule, jsonSerializerOptions);
            }
            if (installationsIdSiteDynamicEssSettingsPostRequest.SellPriceFormulaOption.IsSet)
                writer.WriteString("sellPriceFormula", installationsIdSiteDynamicEssSettingsPostRequest.SellPriceFormula);

            if (installationsIdSiteDynamicEssSettingsPostRequest.IsPeriodicFullChargeOnOption.IsSet)
                writer.WriteBoolean("isPeriodicFullChargeOn", installationsIdSiteDynamicEssSettingsPostRequest.IsPeriodicFullChargeOnOption.Value!.Value);

            if (installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeDurationOption.IsSet)
            {
                writer.WritePropertyName("periodicFullChargeDuration");
                JsonSerializer.Serialize(writer, installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeDuration, jsonSerializerOptions);
            }
            if (installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeIntervalOption.IsSet)
            {
                writer.WritePropertyName("periodicFullChargeInterval");
                JsonSerializer.Serialize(writer, installationsIdSiteDynamicEssSettingsPostRequest.PeriodicFullChargeInterval, jsonSerializerOptions);
            }
        }
    }
}
