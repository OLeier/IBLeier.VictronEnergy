// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Description of added user
    /// </summary>
    public partial class InstallationsIdSiteInvitePost200ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsIdSiteInvitePost200ResponseData" /> class.
        /// </summary>
        /// <param name="idUser">idUser</param>
        /// <param name="idSite">ID of the installation.</param>
        /// <param name="created">Timestamp when user was invited.</param>
        /// <param name="name">name</param>
        /// <param name="email">email</param>
        /// <param name="accessLevel">accessLevel</param>
        /// <param name="idInvite">idInvite</param>
        [JsonConstructor]
        public InstallationsIdSiteInvitePost200ResponseData(Option<decimal?> idUser = default, Option<decimal?> idSite = default, Option<decimal?> created = default, Option<string?> name = default, Option<string?> email = default, Option<decimal?> accessLevel = default, Option<decimal?> idInvite = default)
        {
            IdUserOption = idUser;
            IdSiteOption = idSite;
            CreatedOption = created;
            NameOption = name;
            EmailOption = email;
            AccessLevelOption = accessLevel;
            IdInviteOption = idInvite;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IdUser
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> IdUserOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdUser
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("idUser")]
        public decimal? IdUser { get { return this.IdUserOption; } set { this.IdUserOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdSite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> IdSiteOption { get; private set; }

        /// <summary>
        /// ID of the installation.
        /// </summary>
        /// <value>ID of the installation.</value>
        /* <example>60</example> */
        [JsonPropertyName("idSite")]
        public decimal? IdSite { get { return this.IdSiteOption; } set { this.IdSiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CreatedOption { get; private set; }

        /// <summary>
        /// Timestamp when user was invited.
        /// </summary>
        /// <value>Timestamp when user was invited.</value>
        /* <example>1698415280</example> */
        [JsonPropertyName("created")]
        public decimal? Created { get { return this.CreatedOption; } set { this.CreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Andrew</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        /* <example>andrew@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccessLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AccessLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessLevel
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("accessLevel")]
        public decimal? AccessLevel { get { return this.AccessLevelOption; } set { this.AccessLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdInvite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> IdInviteOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdInvite
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("idInvite")]
        public decimal? IdInvite { get { return this.IdInviteOption; } set { this.IdInviteOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallationsIdSiteInvitePost200ResponseData {\n");
            sb.Append("  IdUser: ").Append(IdUser).Append("\n");
            sb.Append("  IdSite: ").Append(IdSite).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  IdInvite: ").Append(IdInvite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallationsIdSiteInvitePost200ResponseData" />
    /// </summary>
    public class InstallationsIdSiteInvitePost200ResponseDataJsonConverter : JsonConverter<InstallationsIdSiteInvitePost200ResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallationsIdSiteInvitePost200ResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallationsIdSiteInvitePost200ResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> idUser = default;
            Option<decimal?> idSite = default;
            Option<decimal?> created = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<decimal?> accessLevel = default;
            Option<decimal?> idInvite = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "idUser":
                            idUser = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "idSite":
                            idSite = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "created":
                            created = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "accessLevel":
                            accessLevel = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "idInvite":
                            idInvite = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (idUser.IsSet && idUser.Value == null)
                throw new ArgumentNullException(nameof(idUser), "Property is not nullable for class InstallationsIdSiteInvitePost200ResponseData.");

            if (idSite.IsSet && idSite.Value == null)
                throw new ArgumentNullException(nameof(idSite), "Property is not nullable for class InstallationsIdSiteInvitePost200ResponseData.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class InstallationsIdSiteInvitePost200ResponseData.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class InstallationsIdSiteInvitePost200ResponseData.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class InstallationsIdSiteInvitePost200ResponseData.");

            if (accessLevel.IsSet && accessLevel.Value == null)
                throw new ArgumentNullException(nameof(accessLevel), "Property is not nullable for class InstallationsIdSiteInvitePost200ResponseData.");

            if (idInvite.IsSet && idInvite.Value == null)
                throw new ArgumentNullException(nameof(idInvite), "Property is not nullable for class InstallationsIdSiteInvitePost200ResponseData.");

            return new InstallationsIdSiteInvitePost200ResponseData(idUser, idSite, created, name, email, accessLevel, idInvite);
        }

        /// <summary>
        /// Serializes a <see cref="InstallationsIdSiteInvitePost200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteInvitePost200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallationsIdSiteInvitePost200ResponseData installationsIdSiteInvitePost200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installationsIdSiteInvitePost200ResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallationsIdSiteInvitePost200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteInvitePost200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallationsIdSiteInvitePost200ResponseData installationsIdSiteInvitePost200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installationsIdSiteInvitePost200ResponseData.NameOption.IsSet && installationsIdSiteInvitePost200ResponseData.Name == null)
                throw new ArgumentNullException(nameof(installationsIdSiteInvitePost200ResponseData.Name), "Property is required for class InstallationsIdSiteInvitePost200ResponseData.");

            if (installationsIdSiteInvitePost200ResponseData.EmailOption.IsSet && installationsIdSiteInvitePost200ResponseData.Email == null)
                throw new ArgumentNullException(nameof(installationsIdSiteInvitePost200ResponseData.Email), "Property is required for class InstallationsIdSiteInvitePost200ResponseData.");

            if (installationsIdSiteInvitePost200ResponseData.IdUserOption.IsSet)
                writer.WriteNumber("idUser", installationsIdSiteInvitePost200ResponseData.IdUserOption.Value!.Value);

            if (installationsIdSiteInvitePost200ResponseData.IdSiteOption.IsSet)
                writer.WriteNumber("idSite", installationsIdSiteInvitePost200ResponseData.IdSiteOption.Value!.Value);

            if (installationsIdSiteInvitePost200ResponseData.CreatedOption.IsSet)
                writer.WriteNumber("created", installationsIdSiteInvitePost200ResponseData.CreatedOption.Value!.Value);

            if (installationsIdSiteInvitePost200ResponseData.NameOption.IsSet)
                writer.WriteString("name", installationsIdSiteInvitePost200ResponseData.Name);

            if (installationsIdSiteInvitePost200ResponseData.EmailOption.IsSet)
                writer.WriteString("email", installationsIdSiteInvitePost200ResponseData.Email);

            if (installationsIdSiteInvitePost200ResponseData.AccessLevelOption.IsSet)
                writer.WriteNumber("accessLevel", installationsIdSiteInvitePost200ResponseData.AccessLevelOption.Value!.Value);

            if (installationsIdSiteInvitePost200ResponseData.IdInviteOption.IsSet)
                writer.WriteNumber("idInvite", installationsIdSiteInvitePost200ResponseData.IdInviteOption.Value!.Value);
        }
    }
}
