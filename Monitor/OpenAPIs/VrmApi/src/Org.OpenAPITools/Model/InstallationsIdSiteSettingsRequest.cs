// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InstallationsIdSiteSettingsRequest
    /// </summary>
    public partial class InstallationsIdSiteSettingsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsIdSiteSettingsRequest" /> class.
        /// </summary>
        /// <param name="description">Name of the installation</param>
        /// <param name="notes">Any additional notes related to the installation.</param>
        /// <param name="phonenumber">Phone number associated with the installation.</param>
        /// <param name="noDataAlarmTimeout">Timeout for no data alarm.</param>
        /// <param name="noDataAlarmActive">Indicates if the no data alarm is active.</param>
        /// <param name="geofence">Geofence settings for the installation.</param>
        /// <param name="geofenceEnabled">Indicates if geofencing is enabled.</param>
        /// <param name="alarmMonitoring">Indicates if alarm monitoring is active.</param>
        /// <param name="realtimeUpdates">Indicates if real-time updates are enabled.</param>
        /// <param name="inverterChargerControl">Indicates if inverter charger control is active.</param>
        [JsonConstructor]
        public InstallationsIdSiteSettingsRequest(Option<string?> description = default, Option<string?> notes = default, Option<string?> phonenumber = default, Option<int?> noDataAlarmTimeout = default, Option<bool?> noDataAlarmActive = default, Option<Object?> geofence = default, Option<bool?> geofenceEnabled = default, Option<bool?> alarmMonitoring = default, Option<bool?> realtimeUpdates = default, Option<bool?> inverterChargerControl = default)
        {
            DescriptionOption = description;
            NotesOption = notes;
            PhonenumberOption = phonenumber;
            NoDataAlarmTimeoutOption = noDataAlarmTimeout;
            NoDataAlarmActiveOption = noDataAlarmActive;
            GeofenceOption = geofence;
            GeofenceEnabledOption = geofenceEnabled;
            AlarmMonitoringOption = alarmMonitoring;
            RealtimeUpdatesOption = realtimeUpdates;
            InverterChargerControlOption = inverterChargerControl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Name of the installation
        /// </summary>
        /// <value>Name of the installation</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Any additional notes related to the installation.
        /// </summary>
        /// <value>Any additional notes related to the installation.</value>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Phonenumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhonenumberOption { get; private set; }

        /// <summary>
        /// Phone number associated with the installation.
        /// </summary>
        /// <value>Phone number associated with the installation.</value>
        [JsonPropertyName("phonenumber")]
        public string? Phonenumber { get { return this.PhonenumberOption; } set { this.PhonenumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoDataAlarmTimeout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NoDataAlarmTimeoutOption { get; private set; }

        /// <summary>
        /// Timeout for no data alarm.
        /// </summary>
        /// <value>Timeout for no data alarm.</value>
        [JsonPropertyName("noDataAlarmTimeout")]
        public int? NoDataAlarmTimeout { get { return this.NoDataAlarmTimeoutOption; } set { this.NoDataAlarmTimeoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoDataAlarmActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NoDataAlarmActiveOption { get; private set; }

        /// <summary>
        /// Indicates if the no data alarm is active.
        /// </summary>
        /// <value>Indicates if the no data alarm is active.</value>
        [JsonPropertyName("noDataAlarmActive")]
        public bool? NoDataAlarmActive { get { return this.NoDataAlarmActiveOption; } set { this.NoDataAlarmActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geofence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> GeofenceOption { get; private set; }

        /// <summary>
        /// Geofence settings for the installation.
        /// </summary>
        /// <value>Geofence settings for the installation.</value>
        [JsonPropertyName("geofence")]
        public Object? Geofence { get { return this.GeofenceOption; } set { this.GeofenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeofenceEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> GeofenceEnabledOption { get; private set; }

        /// <summary>
        /// Indicates if geofencing is enabled.
        /// </summary>
        /// <value>Indicates if geofencing is enabled.</value>
        [JsonPropertyName("geofenceEnabled")]
        public bool? GeofenceEnabled { get { return this.GeofenceEnabledOption; } set { this.GeofenceEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlarmMonitoring
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AlarmMonitoringOption { get; private set; }

        /// <summary>
        /// Indicates if alarm monitoring is active.
        /// </summary>
        /// <value>Indicates if alarm monitoring is active.</value>
        [JsonPropertyName("alarmMonitoring")]
        public bool? AlarmMonitoring { get { return this.AlarmMonitoringOption; } set { this.AlarmMonitoringOption = new(value); } }

        /// <summary>
        /// Used to track the state of RealtimeUpdates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RealtimeUpdatesOption { get; private set; }

        /// <summary>
        /// Indicates if real-time updates are enabled.
        /// </summary>
        /// <value>Indicates if real-time updates are enabled.</value>
        [JsonPropertyName("realtimeUpdates")]
        public bool? RealtimeUpdates { get { return this.RealtimeUpdatesOption; } set { this.RealtimeUpdatesOption = new(value); } }

        /// <summary>
        /// Used to track the state of InverterChargerControl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InverterChargerControlOption { get; private set; }

        /// <summary>
        /// Indicates if inverter charger control is active.
        /// </summary>
        /// <value>Indicates if inverter charger control is active.</value>
        [JsonPropertyName("inverterChargerControl")]
        public bool? InverterChargerControl { get { return this.InverterChargerControlOption; } set { this.InverterChargerControlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallationsIdSiteSettingsRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Phonenumber: ").Append(Phonenumber).Append("\n");
            sb.Append("  NoDataAlarmTimeout: ").Append(NoDataAlarmTimeout).Append("\n");
            sb.Append("  NoDataAlarmActive: ").Append(NoDataAlarmActive).Append("\n");
            sb.Append("  Geofence: ").Append(Geofence).Append("\n");
            sb.Append("  GeofenceEnabled: ").Append(GeofenceEnabled).Append("\n");
            sb.Append("  AlarmMonitoring: ").Append(AlarmMonitoring).Append("\n");
            sb.Append("  RealtimeUpdates: ").Append(RealtimeUpdates).Append("\n");
            sb.Append("  InverterChargerControl: ").Append(InverterChargerControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallationsIdSiteSettingsRequest" />
    /// </summary>
    public class InstallationsIdSiteSettingsRequestJsonConverter : JsonConverter<InstallationsIdSiteSettingsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallationsIdSiteSettingsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallationsIdSiteSettingsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<string?> notes = default;
            Option<string?> phonenumber = default;
            Option<int?> noDataAlarmTimeout = default;
            Option<bool?> noDataAlarmActive = default;
            Option<Object?> geofence = default;
            Option<bool?> geofenceEnabled = default;
            Option<bool?> alarmMonitoring = default;
            Option<bool?> realtimeUpdates = default;
            Option<bool?> inverterChargerControl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phonenumber":
                            phonenumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "noDataAlarmTimeout":
                            noDataAlarmTimeout = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "noDataAlarmActive":
                            noDataAlarmActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "geofence":
                            geofence = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "geofenceEnabled":
                            geofenceEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "alarmMonitoring":
                            alarmMonitoring = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "realtimeUpdates":
                            realtimeUpdates = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "inverterChargerControl":
                            inverterChargerControl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (notes.IsSet && notes.Value == null)
                throw new ArgumentNullException(nameof(notes), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (phonenumber.IsSet && phonenumber.Value == null)
                throw new ArgumentNullException(nameof(phonenumber), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (noDataAlarmTimeout.IsSet && noDataAlarmTimeout.Value == null)
                throw new ArgumentNullException(nameof(noDataAlarmTimeout), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (noDataAlarmActive.IsSet && noDataAlarmActive.Value == null)
                throw new ArgumentNullException(nameof(noDataAlarmActive), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (geofence.IsSet && geofence.Value == null)
                throw new ArgumentNullException(nameof(geofence), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (geofenceEnabled.IsSet && geofenceEnabled.Value == null)
                throw new ArgumentNullException(nameof(geofenceEnabled), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (alarmMonitoring.IsSet && alarmMonitoring.Value == null)
                throw new ArgumentNullException(nameof(alarmMonitoring), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (realtimeUpdates.IsSet && realtimeUpdates.Value == null)
                throw new ArgumentNullException(nameof(realtimeUpdates), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            if (inverterChargerControl.IsSet && inverterChargerControl.Value == null)
                throw new ArgumentNullException(nameof(inverterChargerControl), "Property is not nullable for class InstallationsIdSiteSettingsRequest.");

            return new InstallationsIdSiteSettingsRequest(description, notes, phonenumber, noDataAlarmTimeout, noDataAlarmActive, geofence, geofenceEnabled, alarmMonitoring, realtimeUpdates, inverterChargerControl);
        }

        /// <summary>
        /// Serializes a <see cref="InstallationsIdSiteSettingsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSettingsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallationsIdSiteSettingsRequest installationsIdSiteSettingsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installationsIdSiteSettingsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallationsIdSiteSettingsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSettingsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallationsIdSiteSettingsRequest installationsIdSiteSettingsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installationsIdSiteSettingsRequest.DescriptionOption.IsSet && installationsIdSiteSettingsRequest.Description == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSettingsRequest.Description), "Property is required for class InstallationsIdSiteSettingsRequest.");

            if (installationsIdSiteSettingsRequest.NotesOption.IsSet && installationsIdSiteSettingsRequest.Notes == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSettingsRequest.Notes), "Property is required for class InstallationsIdSiteSettingsRequest.");

            if (installationsIdSiteSettingsRequest.PhonenumberOption.IsSet && installationsIdSiteSettingsRequest.Phonenumber == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSettingsRequest.Phonenumber), "Property is required for class InstallationsIdSiteSettingsRequest.");

            if (installationsIdSiteSettingsRequest.GeofenceOption.IsSet && installationsIdSiteSettingsRequest.Geofence == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSettingsRequest.Geofence), "Property is required for class InstallationsIdSiteSettingsRequest.");

            if (installationsIdSiteSettingsRequest.DescriptionOption.IsSet)
                writer.WriteString("description", installationsIdSiteSettingsRequest.Description);

            if (installationsIdSiteSettingsRequest.NotesOption.IsSet)
                writer.WriteString("notes", installationsIdSiteSettingsRequest.Notes);

            if (installationsIdSiteSettingsRequest.PhonenumberOption.IsSet)
                writer.WriteString("phonenumber", installationsIdSiteSettingsRequest.Phonenumber);

            if (installationsIdSiteSettingsRequest.NoDataAlarmTimeoutOption.IsSet)
                writer.WriteNumber("noDataAlarmTimeout", installationsIdSiteSettingsRequest.NoDataAlarmTimeoutOption.Value!.Value);

            if (installationsIdSiteSettingsRequest.NoDataAlarmActiveOption.IsSet)
                writer.WriteBoolean("noDataAlarmActive", installationsIdSiteSettingsRequest.NoDataAlarmActiveOption.Value!.Value);

            if (installationsIdSiteSettingsRequest.GeofenceOption.IsSet)
            {
                writer.WritePropertyName("geofence");
                JsonSerializer.Serialize(writer, installationsIdSiteSettingsRequest.Geofence, jsonSerializerOptions);
            }
            if (installationsIdSiteSettingsRequest.GeofenceEnabledOption.IsSet)
                writer.WriteBoolean("geofenceEnabled", installationsIdSiteSettingsRequest.GeofenceEnabledOption.Value!.Value);

            if (installationsIdSiteSettingsRequest.AlarmMonitoringOption.IsSet)
                writer.WriteBoolean("alarmMonitoring", installationsIdSiteSettingsRequest.AlarmMonitoringOption.Value!.Value);

            if (installationsIdSiteSettingsRequest.RealtimeUpdatesOption.IsSet)
                writer.WriteBoolean("realtimeUpdates", installationsIdSiteSettingsRequest.RealtimeUpdatesOption.Value!.Value);

            if (installationsIdSiteSettingsRequest.InverterChargerControlOption.IsSet)
                writer.WriteBoolean("inverterChargerControl", installationsIdSiteSettingsRequest.InverterChargerControlOption.Value!.Value);
        }
    }
}
