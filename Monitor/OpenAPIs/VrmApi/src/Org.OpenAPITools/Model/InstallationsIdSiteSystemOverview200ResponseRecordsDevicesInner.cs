// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner
    /// </summary>
    public partial class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner" /> class.
        /// </summary>
        /// <param name="name">Device name.</param>
        /// <param name="productCode">Device product code.</param>
        /// <param name="idSite">Installation to which the device belongs.</param>
        /// <param name="lastConnection">lastConnection</param>
        /// <param name="settings">Device settings.</param>
        /// <param name="customName">Custom device name.</param>
        /// <param name="productName">Device product name.</param>
        /// <param name="firmwareVersion">Detailed firmware version information.</param>
        /// <param name="class">Styling field used for VRM.</param>
        /// <param name="connection">Device connection string.</param>
        /// <param name="instance">Installation instance to which this device belongs.</param>
        /// <param name="idDeviceType">Device type id.</param>
        /// <param name="signalRSSI">Device formatted signal RSSI.</param>
        /// <param name="signalSNR">Device formatted signal SNR.</param>
        /// <param name="signalFrequency">Device formatted signal frequency.</param>
        /// <param name="antennaType">GlobalLink device antenna switch state.</param>
        /// <param name="networkName">Device network name.</param>
        /// <param name="loggingInterval">loggingInterval</param>
        /// <param name="identifier">Gateway device identifier, not visible to demo user or using site sharing.</param>
        /// <param name="lastPowerUpOrRestart">lastPowerUpOrRestart</param>
        /// <param name="machineSerialNumber">Gateway device serial number.</param>
        /// <param name="remoteOnLan">Remote on LAN address, only for Venus OS devices.</param>
        /// <param name="autoUpdate">Auto update setting, only for Venus OS devices.</param>
        /// <param name="updateTo">Maxiumum version to update to, only for Venus OS devices.</param>
        /// <param name="vncSshAuth">True if the Venus OS gateway has SSH authentication enabled.</param>
        /// <param name="vncStatus">Venus OS gateway internet setting.</param>
        /// <param name="vncPort">Venus OS gateway remote VNC port.</param>
        /// <param name="twoWayCommunication">True if the Venus OS gateway has two way communication enabled.</param>
        /// <param name="remoteSupportEnabled">True if the Venus OS gateway has remote support enabled.</param>
        /// <param name="remoteSupportPort">remoteSupportPort</param>
        /// <param name="remoteSupportIp">Venus OS gateway remote support connection ip.</param>
        /// <param name="remoteSupport">Venus OS gateway remote support status.</param>
        /// <param name="productId">productId</param>
        /// <param name="vmc">vmc</param>
        /// <param name="vid">vid</param>
        /// <param name="tempSensorConnected">IO Extender device temperature sensor connection, true if connected.</param>
        /// <param name="froniusDeviceType">PV Inverter Fronius device type.</param>
        /// <param name="pL">pL</param>
        /// <param name="pdV">PV Inverter device data manager version.</param>
        /// <param name="inputType">inputType</param>
        /// <param name="inputState">inputState</param>
        [JsonConstructor]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner(string name, string productCode, int idSite, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastConnection lastConnection, List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner> settings, string? customName = default, Option<string?> productName = default, Option<string?> firmwareVersion = default, Option<string?> @class = default, Option<string?> connection = default, Option<int?> instance = default, Option<int?> idDeviceType = default, Option<string?> signalRSSI = default, Option<string?> signalSNR = default, Option<string?> signalFrequency = default, Option<AntennaTypeEnum?> antennaType = default, Option<string?> networkName = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLoggingInterval?> loggingInterval = default, Option<string?> identifier = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastPowerUpOrRestart?> lastPowerUpOrRestart = default, Option<string?> machineSerialNumber = default, Option<string?> remoteOnLan = default, Option<AutoUpdateEnum?> autoUpdate = default, Option<UpdateToEnum?> updateTo = default, Option<bool?> vncSshAuth = default, Option<VncStatusEnum?> vncStatus = default, Option<int?> vncPort = default, Option<bool?> twoWayCommunication = default, Option<bool?> remoteSupportEnabled = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportPort?> remoteSupportPort = default, Option<string?> remoteSupportIp = default, Option<RemoteSupportEnum?> remoteSupport = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerProductId?> productId = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVmc?> vmc = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid?> vid = default, Option<bool?> tempSensorConnected = default, Option<string?> froniusDeviceType = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerPL?> pL = default, Option<string?> pdV = default, Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerInputType?> inputType = default, Option<string?> inputState = default)
        {
            Name = name;
            ProductCode = productCode;
            IdSite = idSite;
            LastConnection = lastConnection;
            Settings = settings;
            CustomName = customName;
            ProductNameOption = productName;
            FirmwareVersionOption = firmwareVersion;
            ClassOption = @class;
            ConnectionOption = connection;
            InstanceOption = instance;
            IdDeviceTypeOption = idDeviceType;
            SignalRSSIOption = signalRSSI;
            SignalSNROption = signalSNR;
            SignalFrequencyOption = signalFrequency;
            AntennaTypeOption = antennaType;
            NetworkNameOption = networkName;
            LoggingIntervalOption = loggingInterval;
            IdentifierOption = identifier;
            LastPowerUpOrRestartOption = lastPowerUpOrRestart;
            MachineSerialNumberOption = machineSerialNumber;
            RemoteOnLanOption = remoteOnLan;
            AutoUpdateOption = autoUpdate;
            UpdateToOption = updateTo;
            VncSshAuthOption = vncSshAuth;
            VncStatusOption = vncStatus;
            VncPortOption = vncPort;
            TwoWayCommunicationOption = twoWayCommunication;
            RemoteSupportEnabledOption = remoteSupportEnabled;
            RemoteSupportPortOption = remoteSupportPort;
            RemoteSupportIpOption = remoteSupportIp;
            RemoteSupportOption = remoteSupport;
            ProductIdOption = productId;
            VmcOption = vmc;
            VidOption = vid;
            TempSensorConnectedOption = tempSensorConnected;
            FroniusDeviceTypeOption = froniusDeviceType;
            PLOption = pL;
            PdVOption = pdV;
            InputTypeOption = inputType;
            InputStateOption = inputState;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// GlobalLink device antenna switch state.
        /// </summary>
        /// <value>GlobalLink device antenna switch state.</value>
        public enum AntennaTypeEnum
        {
            /// <summary>
            /// Enum Internal for value: Internal
            /// </summary>
            Internal = 1,

            /// <summary>
            /// Enum External for value: External
            /// </summary>
            External = 2
        }

        /// <summary>
        /// Returns a <see cref="AntennaTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AntennaTypeEnum AntennaTypeEnumFromString(string value)
        {
            if (value.Equals("Internal"))
                return AntennaTypeEnum.Internal;

            if (value.Equals("External"))
                return AntennaTypeEnum.External;

            throw new NotImplementedException($"Could not convert value to type AntennaTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AntennaTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AntennaTypeEnum? AntennaTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Internal"))
                return AntennaTypeEnum.Internal;

            if (value.Equals("External"))
                return AntennaTypeEnum.External;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AntennaTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AntennaTypeEnumToJsonValue(AntennaTypeEnum? value)
        {
            if (value == AntennaTypeEnum.Internal)
                return "Internal";

            if (value == AntennaTypeEnum.External)
                return "External";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AntennaType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AntennaTypeEnum?> AntennaTypeOption { get; private set; }

        /// <summary>
        /// GlobalLink device antenna switch state.
        /// </summary>
        /// <value>GlobalLink device antenna switch state.</value>
        [JsonPropertyName("antennaType")]
        public AntennaTypeEnum? AntennaType { get { return this.AntennaTypeOption; } set { this.AntennaTypeOption = new(value); } }

        /// <summary>
        /// Auto update setting, only for Venus OS devices.
        /// </summary>
        /// <value>Auto update setting, only for Venus OS devices.</value>
        public enum AutoUpdateEnum
        {
            /// <summary>
            /// Enum On for value: On
            /// </summary>
            On = 1,

            /// <summary>
            /// Enum Off for value: Off
            /// </summary>
            Off = 2,

            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            Check = 3
        }

        /// <summary>
        /// Returns a <see cref="AutoUpdateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AutoUpdateEnum AutoUpdateEnumFromString(string value)
        {
            if (value.Equals("On"))
                return AutoUpdateEnum.On;

            if (value.Equals("Off"))
                return AutoUpdateEnum.Off;

            if (value.Equals("Check"))
                return AutoUpdateEnum.Check;

            throw new NotImplementedException($"Could not convert value to type AutoUpdateEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AutoUpdateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AutoUpdateEnum? AutoUpdateEnumFromStringOrDefault(string value)
        {
            if (value.Equals("On"))
                return AutoUpdateEnum.On;

            if (value.Equals("Off"))
                return AutoUpdateEnum.Off;

            if (value.Equals("Check"))
                return AutoUpdateEnum.Check;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AutoUpdateEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AutoUpdateEnumToJsonValue(AutoUpdateEnum? value)
        {
            if (value == AutoUpdateEnum.On)
                return "On";

            if (value == AutoUpdateEnum.Off)
                return "Off";

            if (value == AutoUpdateEnum.Check)
                return "Check";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of AutoUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AutoUpdateEnum?> AutoUpdateOption { get; private set; }

        /// <summary>
        /// Auto update setting, only for Venus OS devices.
        /// </summary>
        /// <value>Auto update setting, only for Venus OS devices.</value>
        [JsonPropertyName("autoUpdate")]
        public AutoUpdateEnum? AutoUpdate { get { return this.AutoUpdateOption; } set { this.AutoUpdateOption = new(value); } }

        /// <summary>
        /// Maxiumum version to update to, only for Venus OS devices.
        /// </summary>
        /// <value>Maxiumum version to update to, only for Venus OS devices.</value>
        public enum UpdateToEnum
        {
            /// <summary>
            /// Enum OfficialRelease for value: Official release
            /// </summary>
            OfficialRelease = 1,

            /// <summary>
            /// Enum ReleaseCandidate for value: Release-candidate
            /// </summary>
            ReleaseCandidate = 2,

            /// <summary>
            /// Enum Testing for value: Testing
            /// </summary>
            Testing = 3,

            /// <summary>
            /// Enum Develop for value: Develop
            /// </summary>
            Develop = 4
        }

        /// <summary>
        /// Returns a <see cref="UpdateToEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static UpdateToEnum UpdateToEnumFromString(string value)
        {
            if (value.Equals("Official release"))
                return UpdateToEnum.OfficialRelease;

            if (value.Equals("Release-candidate"))
                return UpdateToEnum.ReleaseCandidate;

            if (value.Equals("Testing"))
                return UpdateToEnum.Testing;

            if (value.Equals("Develop"))
                return UpdateToEnum.Develop;

            throw new NotImplementedException($"Could not convert value to type UpdateToEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="UpdateToEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UpdateToEnum? UpdateToEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Official release"))
                return UpdateToEnum.OfficialRelease;

            if (value.Equals("Release-candidate"))
                return UpdateToEnum.ReleaseCandidate;

            if (value.Equals("Testing"))
                return UpdateToEnum.Testing;

            if (value.Equals("Develop"))
                return UpdateToEnum.Develop;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UpdateToEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string UpdateToEnumToJsonValue(UpdateToEnum? value)
        {
            if (value == UpdateToEnum.OfficialRelease)
                return "Official release";

            if (value == UpdateToEnum.ReleaseCandidate)
                return "Release-candidate";

            if (value == UpdateToEnum.Testing)
                return "Testing";

            if (value == UpdateToEnum.Develop)
                return "Develop";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of UpdateTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UpdateToEnum?> UpdateToOption { get; private set; }

        /// <summary>
        /// Maxiumum version to update to, only for Venus OS devices.
        /// </summary>
        /// <value>Maxiumum version to update to, only for Venus OS devices.</value>
        [JsonPropertyName("updateTo")]
        public UpdateToEnum? UpdateTo { get { return this.UpdateToOption; } set { this.UpdateToOption = new(value); } }

        /// <summary>
        /// Venus OS gateway internet setting.
        /// </summary>
        /// <value>Venus OS gateway internet setting.</value>
        public enum VncStatusEnum
        {
            /// <summary>
            /// Enum Enabled for value: Enabled
            /// </summary>
            Enabled = 1,

            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            Disabled = 2
        }

        /// <summary>
        /// Returns a <see cref="VncStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VncStatusEnum VncStatusEnumFromString(string value)
        {
            if (value.Equals("Enabled"))
                return VncStatusEnum.Enabled;

            if (value.Equals("Disabled"))
                return VncStatusEnum.Disabled;

            throw new NotImplementedException($"Could not convert value to type VncStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VncStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VncStatusEnum? VncStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Enabled"))
                return VncStatusEnum.Enabled;

            if (value.Equals("Disabled"))
                return VncStatusEnum.Disabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VncStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VncStatusEnumToJsonValue(VncStatusEnum? value)
        {
            if (value == VncStatusEnum.Enabled)
                return "Enabled";

            if (value == VncStatusEnum.Disabled)
                return "Disabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of VncStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VncStatusEnum?> VncStatusOption { get; private set; }

        /// <summary>
        /// Venus OS gateway internet setting.
        /// </summary>
        /// <value>Venus OS gateway internet setting.</value>
        [JsonPropertyName("vncStatus")]
        public VncStatusEnum? VncStatus { get { return this.VncStatusOption; } set { this.VncStatusOption = new(value); } }

        /// <summary>
        /// Venus OS gateway remote support status.
        /// </summary>
        /// <value>Venus OS gateway remote support status.</value>
        public enum RemoteSupportEnum
        {
            /// <summary>
            /// Enum EnabledOnline for value: enabled_online
            /// </summary>
            EnabledOnline = 1,

            /// <summary>
            /// Enum EnabledOffline for value: enabled_offline
            /// </summary>
            EnabledOffline = 2,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            Disabled = 3
        }

        /// <summary>
        /// Returns a <see cref="RemoteSupportEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RemoteSupportEnum RemoteSupportEnumFromString(string value)
        {
            if (value.Equals("enabled_online"))
                return RemoteSupportEnum.EnabledOnline;

            if (value.Equals("enabled_offline"))
                return RemoteSupportEnum.EnabledOffline;

            if (value.Equals("disabled"))
                return RemoteSupportEnum.Disabled;

            throw new NotImplementedException($"Could not convert value to type RemoteSupportEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RemoteSupportEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RemoteSupportEnum? RemoteSupportEnumFromStringOrDefault(string value)
        {
            if (value.Equals("enabled_online"))
                return RemoteSupportEnum.EnabledOnline;

            if (value.Equals("enabled_offline"))
                return RemoteSupportEnum.EnabledOffline;

            if (value.Equals("disabled"))
                return RemoteSupportEnum.Disabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RemoteSupportEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RemoteSupportEnumToJsonValue(RemoteSupportEnum? value)
        {
            if (value == RemoteSupportEnum.EnabledOnline)
                return "enabled_online";

            if (value == RemoteSupportEnum.EnabledOffline)
                return "enabled_offline";

            if (value == RemoteSupportEnum.Disabled)
                return "disabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RemoteSupport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RemoteSupportEnum?> RemoteSupportOption { get; private set; }

        /// <summary>
        /// Venus OS gateway remote support status.
        /// </summary>
        /// <value>Venus OS gateway remote support status.</value>
        [JsonPropertyName("remoteSupport")]
        public RemoteSupportEnum? RemoteSupport { get { return this.RemoteSupportOption; } set { this.RemoteSupportOption = new(value); } }

        /// <summary>
        /// Device name.
        /// </summary>
        /// <value>Device name.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Device product code.
        /// </summary>
        /// <value>Device product code.</value>
        [JsonPropertyName("productCode")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Installation to which the device belongs.
        /// </summary>
        /// <value>Installation to which the device belongs.</value>
        [JsonPropertyName("idSite")]
        public int IdSite { get; set; }

        /// <summary>
        /// Gets or Sets LastConnection
        /// </summary>
        [JsonPropertyName("lastConnection")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastConnection LastConnection { get; set; }

        /// <summary>
        /// Device settings.
        /// </summary>
        /// <value>Device settings.</value>
        [JsonPropertyName("settings")]
        public List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner> Settings { get; set; }

        /// <summary>
        /// Custom device name.
        /// </summary>
        /// <value>Custom device name.</value>
        [JsonPropertyName("customName")]
        public string? CustomName { get; set; }

        /// <summary>
        /// Used to track the state of ProductName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductNameOption { get; private set; }

        /// <summary>
        /// Device product name.
        /// </summary>
        /// <value>Device product name.</value>
        [JsonPropertyName("productName")]
        public string? ProductName { get { return this.ProductNameOption; } set { this.ProductNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirmwareVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirmwareVersionOption { get; private set; }

        /// <summary>
        /// Detailed firmware version information.
        /// </summary>
        /// <value>Detailed firmware version information.</value>
        [JsonPropertyName("firmwareVersion")]
        public string? FirmwareVersion { get { return this.FirmwareVersionOption; } set { this.FirmwareVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Styling field used for VRM.
        /// </summary>
        /// <value>Styling field used for VRM.</value>
        [JsonPropertyName("class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Connection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConnectionOption { get; private set; }

        /// <summary>
        /// Device connection string.
        /// </summary>
        /// <value>Device connection string.</value>
        [JsonPropertyName("connection")]
        public string? Connection { get { return this.ConnectionOption; } set { this.ConnectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Instance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InstanceOption { get; private set; }

        /// <summary>
        /// Installation instance to which this device belongs.
        /// </summary>
        /// <value>Installation instance to which this device belongs.</value>
        [JsonPropertyName("instance")]
        public int? Instance { get { return this.InstanceOption; } set { this.InstanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdDeviceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdDeviceTypeOption { get; private set; }

        /// <summary>
        /// Device type id.
        /// </summary>
        /// <value>Device type id.</value>
        [JsonPropertyName("idDeviceType")]
        public int? IdDeviceType { get { return this.IdDeviceTypeOption; } set { this.IdDeviceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SignalRSSI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SignalRSSIOption { get; private set; }

        /// <summary>
        /// Device formatted signal RSSI.
        /// </summary>
        /// <value>Device formatted signal RSSI.</value>
        [JsonPropertyName("signalRSSI")]
        public string? SignalRSSI { get { return this.SignalRSSIOption; } set { this.SignalRSSIOption = new(value); } }

        /// <summary>
        /// Used to track the state of SignalSNR
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SignalSNROption { get; private set; }

        /// <summary>
        /// Device formatted signal SNR.
        /// </summary>
        /// <value>Device formatted signal SNR.</value>
        [JsonPropertyName("signalSNR")]
        public string? SignalSNR { get { return this.SignalSNROption; } set { this.SignalSNROption = new(value); } }

        /// <summary>
        /// Used to track the state of SignalFrequency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SignalFrequencyOption { get; private set; }

        /// <summary>
        /// Device formatted signal frequency.
        /// </summary>
        /// <value>Device formatted signal frequency.</value>
        [JsonPropertyName("signalFrequency")]
        public string? SignalFrequency { get { return this.SignalFrequencyOption; } set { this.SignalFrequencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of NetworkName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NetworkNameOption { get; private set; }

        /// <summary>
        /// Device network name.
        /// </summary>
        /// <value>Device network name.</value>
        [JsonPropertyName("networkName")]
        public string? NetworkName { get { return this.NetworkNameOption; } set { this.NetworkNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoggingInterval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLoggingInterval?> LoggingIntervalOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoggingInterval
        /// </summary>
        [JsonPropertyName("loggingInterval")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLoggingInterval? LoggingInterval { get { return this.LoggingIntervalOption; } set { this.LoggingIntervalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Identifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdentifierOption { get; private set; }

        /// <summary>
        /// Gateway device identifier, not visible to demo user or using site sharing.
        /// </summary>
        /// <value>Gateway device identifier, not visible to demo user or using site sharing.</value>
        [JsonPropertyName("identifier")]
        public string? Identifier { get { return this.IdentifierOption; } set { this.IdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastPowerUpOrRestart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastPowerUpOrRestart?> LastPowerUpOrRestartOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastPowerUpOrRestart
        /// </summary>
        [JsonPropertyName("lastPowerUpOrRestart")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastPowerUpOrRestart? LastPowerUpOrRestart { get { return this.LastPowerUpOrRestartOption; } set { this.LastPowerUpOrRestartOption = new(value); } }

        /// <summary>
        /// Used to track the state of MachineSerialNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MachineSerialNumberOption { get; private set; }

        /// <summary>
        /// Gateway device serial number.
        /// </summary>
        /// <value>Gateway device serial number.</value>
        [JsonPropertyName("machineSerialNumber")]
        public string? MachineSerialNumber { get { return this.MachineSerialNumberOption; } set { this.MachineSerialNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemoteOnLan
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RemoteOnLanOption { get; private set; }

        /// <summary>
        /// Remote on LAN address, only for Venus OS devices.
        /// </summary>
        /// <value>Remote on LAN address, only for Venus OS devices.</value>
        [JsonPropertyName("remoteOnLan")]
        public string? RemoteOnLan { get { return this.RemoteOnLanOption; } set { this.RemoteOnLanOption = new(value); } }

        /// <summary>
        /// Used to track the state of VncSshAuth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VncSshAuthOption { get; private set; }

        /// <summary>
        /// True if the Venus OS gateway has SSH authentication enabled.
        /// </summary>
        /// <value>True if the Venus OS gateway has SSH authentication enabled.</value>
        [JsonPropertyName("vncSshAuth")]
        public bool? VncSshAuth { get { return this.VncSshAuthOption; } set { this.VncSshAuthOption = new(value); } }

        /// <summary>
        /// Used to track the state of VncPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VncPortOption { get; private set; }

        /// <summary>
        /// Venus OS gateway remote VNC port.
        /// </summary>
        /// <value>Venus OS gateway remote VNC port.</value>
        [JsonPropertyName("vncPort")]
        public int? VncPort { get { return this.VncPortOption; } set { this.VncPortOption = new(value); } }

        /// <summary>
        /// Used to track the state of TwoWayCommunication
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TwoWayCommunicationOption { get; private set; }

        /// <summary>
        /// True if the Venus OS gateway has two way communication enabled.
        /// </summary>
        /// <value>True if the Venus OS gateway has two way communication enabled.</value>
        [JsonPropertyName("twoWayCommunication")]
        public bool? TwoWayCommunication { get { return this.TwoWayCommunicationOption; } set { this.TwoWayCommunicationOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemoteSupportEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RemoteSupportEnabledOption { get; private set; }

        /// <summary>
        /// True if the Venus OS gateway has remote support enabled.
        /// </summary>
        /// <value>True if the Venus OS gateway has remote support enabled.</value>
        [JsonPropertyName("remoteSupportEnabled")]
        public bool? RemoteSupportEnabled { get { return this.RemoteSupportEnabledOption; } set { this.RemoteSupportEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemoteSupportPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportPort?> RemoteSupportPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemoteSupportPort
        /// </summary>
        [JsonPropertyName("remoteSupportPort")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportPort? RemoteSupportPort { get { return this.RemoteSupportPortOption; } set { this.RemoteSupportPortOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemoteSupportIp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RemoteSupportIpOption { get; private set; }

        /// <summary>
        /// Venus OS gateway remote support connection ip.
        /// </summary>
        /// <value>Venus OS gateway remote support connection ip.</value>
        [JsonPropertyName("remoteSupportIp")]
        public string? RemoteSupportIp { get { return this.RemoteSupportIpOption; } set { this.RemoteSupportIpOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerProductId?> ProductIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [JsonPropertyName("productId")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerProductId? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Vmc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVmc?> VmcOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vmc
        /// </summary>
        [JsonPropertyName("vmc")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVmc? Vmc { get { return this.VmcOption; } set { this.VmcOption = new(value); } }

        /// <summary>
        /// Used to track the state of Vid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid?> VidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [JsonPropertyName("vid")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid? Vid { get { return this.VidOption; } set { this.VidOption = new(value); } }

        /// <summary>
        /// Used to track the state of TempSensorConnected
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TempSensorConnectedOption { get; private set; }

        /// <summary>
        /// IO Extender device temperature sensor connection, true if connected.
        /// </summary>
        /// <value>IO Extender device temperature sensor connection, true if connected.</value>
        [JsonPropertyName("tempSensorConnected")]
        public bool? TempSensorConnected { get { return this.TempSensorConnectedOption; } set { this.TempSensorConnectedOption = new(value); } }

        /// <summary>
        /// Used to track the state of FroniusDeviceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FroniusDeviceTypeOption { get; private set; }

        /// <summary>
        /// PV Inverter Fronius device type.
        /// </summary>
        /// <value>PV Inverter Fronius device type.</value>
        [JsonPropertyName("froniusDeviceType")]
        public string? FroniusDeviceType { get { return this.FroniusDeviceTypeOption; } set { this.FroniusDeviceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerPL?> PLOption { get; private set; }

        /// <summary>
        /// Gets or Sets PL
        /// </summary>
        [JsonPropertyName("pL")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerPL? PL { get { return this.PLOption; } set { this.PLOption = new(value); } }

        /// <summary>
        /// Used to track the state of PdV
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PdVOption { get; private set; }

        /// <summary>
        /// PV Inverter device data manager version.
        /// </summary>
        /// <value>PV Inverter device data manager version.</value>
        [JsonPropertyName("pdV")]
        public string? PdV { get { return this.PdVOption; } set { this.PdVOption = new(value); } }

        /// <summary>
        /// Used to track the state of InputType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerInputType?> InputTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets InputType
        /// </summary>
        [JsonPropertyName("inputType")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerInputType? InputType { get { return this.InputTypeOption; } set { this.InputTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of InputState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InputStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets InputState
        /// </summary>
        [JsonPropertyName("inputState")]
        public string? InputState { get { return this.InputStateOption; } set { this.InputStateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  IdSite: ").Append(IdSite).Append("\n");
            sb.Append("  LastConnection: ").Append(LastConnection).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  CustomName: ").Append(CustomName).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  IdDeviceType: ").Append(IdDeviceType).Append("\n");
            sb.Append("  SignalRSSI: ").Append(SignalRSSI).Append("\n");
            sb.Append("  SignalSNR: ").Append(SignalSNR).Append("\n");
            sb.Append("  SignalFrequency: ").Append(SignalFrequency).Append("\n");
            sb.Append("  AntennaType: ").Append(AntennaType).Append("\n");
            sb.Append("  NetworkName: ").Append(NetworkName).Append("\n");
            sb.Append("  LoggingInterval: ").Append(LoggingInterval).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  LastPowerUpOrRestart: ").Append(LastPowerUpOrRestart).Append("\n");
            sb.Append("  MachineSerialNumber: ").Append(MachineSerialNumber).Append("\n");
            sb.Append("  RemoteOnLan: ").Append(RemoteOnLan).Append("\n");
            sb.Append("  AutoUpdate: ").Append(AutoUpdate).Append("\n");
            sb.Append("  UpdateTo: ").Append(UpdateTo).Append("\n");
            sb.Append("  VncSshAuth: ").Append(VncSshAuth).Append("\n");
            sb.Append("  VncStatus: ").Append(VncStatus).Append("\n");
            sb.Append("  VncPort: ").Append(VncPort).Append("\n");
            sb.Append("  TwoWayCommunication: ").Append(TwoWayCommunication).Append("\n");
            sb.Append("  RemoteSupportEnabled: ").Append(RemoteSupportEnabled).Append("\n");
            sb.Append("  RemoteSupportPort: ").Append(RemoteSupportPort).Append("\n");
            sb.Append("  RemoteSupportIp: ").Append(RemoteSupportIp).Append("\n");
            sb.Append("  RemoteSupport: ").Append(RemoteSupport).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Vmc: ").Append(Vmc).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("  TempSensorConnected: ").Append(TempSensorConnected).Append("\n");
            sb.Append("  FroniusDeviceType: ").Append(FroniusDeviceType).Append("\n");
            sb.Append("  PL: ").Append(PL).Append("\n");
            sb.Append("  PdV: ").Append(PdV).Append("\n");
            sb.Append("  InputType: ").Append(InputType).Append("\n");
            sb.Append("  InputState: ").Append(InputState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner" />
    /// </summary>
    public class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerJsonConverter : JsonConverter<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> productCode = default;
            Option<int?> idSite = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastConnection?> lastConnection = default;
            Option<List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner>?> settings = default;
            Option<string?> customName = default;
            Option<string?> productName = default;
            Option<string?> firmwareVersion = default;
            Option<string?> varClass = default;
            Option<string?> connection = default;
            Option<int?> instance = default;
            Option<int?> idDeviceType = default;
            Option<string?> signalRSSI = default;
            Option<string?> signalSNR = default;
            Option<string?> signalFrequency = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AntennaTypeEnum?> antennaType = default;
            Option<string?> networkName = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLoggingInterval?> loggingInterval = default;
            Option<string?> identifier = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastPowerUpOrRestart?> lastPowerUpOrRestart = default;
            Option<string?> machineSerialNumber = default;
            Option<string?> remoteOnLan = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AutoUpdateEnum?> autoUpdate = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.UpdateToEnum?> updateTo = default;
            Option<bool?> vncSshAuth = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncStatusEnum?> vncStatus = default;
            Option<int?> vncPort = default;
            Option<bool?> twoWayCommunication = default;
            Option<bool?> remoteSupportEnabled = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportPort?> remoteSupportPort = default;
            Option<string?> remoteSupportIp = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnum?> remoteSupport = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerProductId?> productId = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVmc?> vmc = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid?> vid = default;
            Option<bool?> tempSensorConnected = default;
            Option<string?> froniusDeviceType = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerPL?> pL = default;
            Option<string?> pdV = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerInputType?> inputType = default;
            Option<string?> inputState = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "productCode":
                            productCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idSite":
                            idSite = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "lastConnection":
                            lastConnection = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastConnection?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastConnection>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "settings":
                            settings = new Option<List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner>?>(JsonSerializer.Deserialize<List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customName":
                            customName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "productName":
                            productName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firmwareVersion":
                            firmwareVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "connection":
                            connection = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "instance":
                            instance = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "idDeviceType":
                            idDeviceType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "signalRSSI":
                            signalRSSI = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "signalSNR":
                            signalSNR = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "signalFrequency":
                            signalFrequency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "antennaType":
                            string? antennaTypeRawValue = utf8JsonReader.GetString();
                            if (antennaTypeRawValue != null)
                                antennaType = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AntennaTypeEnum?>(InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AntennaTypeEnumFromStringOrDefault(antennaTypeRawValue));
                            break;
                        case "networkName":
                            networkName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "loggingInterval":
                            loggingInterval = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLoggingInterval?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLoggingInterval>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "identifier":
                            identifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastPowerUpOrRestart":
                            lastPowerUpOrRestart = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastPowerUpOrRestart?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerLastPowerUpOrRestart>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "machineSerialNumber":
                            machineSerialNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "remoteOnLan":
                            remoteOnLan = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "autoUpdate":
                            string? autoUpdateRawValue = utf8JsonReader.GetString();
                            if (autoUpdateRawValue != null)
                                autoUpdate = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AutoUpdateEnum?>(InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AutoUpdateEnumFromStringOrDefault(autoUpdateRawValue));
                            break;
                        case "updateTo":
                            string? updateToRawValue = utf8JsonReader.GetString();
                            if (updateToRawValue != null)
                                updateTo = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.UpdateToEnum?>(InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.UpdateToEnumFromStringOrDefault(updateToRawValue));
                            break;
                        case "vncSshAuth":
                            vncSshAuth = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "vncStatus":
                            string? vncStatusRawValue = utf8JsonReader.GetString();
                            if (vncStatusRawValue != null)
                                vncStatus = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncStatusEnum?>(InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncStatusEnumFromStringOrDefault(vncStatusRawValue));
                            break;
                        case "vncPort":
                            vncPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "twoWayCommunication":
                            twoWayCommunication = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "remoteSupportEnabled":
                            remoteSupportEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "remoteSupportPort":
                            remoteSupportPort = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportPort?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerRemoteSupportPort>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "remoteSupportIp":
                            remoteSupportIp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "remoteSupport":
                            string? remoteSupportRawValue = utf8JsonReader.GetString();
                            if (remoteSupportRawValue != null)
                                remoteSupport = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnum?>(InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnumFromStringOrDefault(remoteSupportRawValue));
                            break;
                        case "productId":
                            productId = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerProductId?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerProductId>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "vmc":
                            vmc = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVmc?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVmc>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "vid":
                            vid = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tempSensorConnected":
                            tempSensorConnected = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "froniusDeviceType":
                            froniusDeviceType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pL":
                            pL = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerPL?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerPL>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pdV":
                            pdV = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "inputType":
                            inputType = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerInputType?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerInputType>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "inputState":
                            inputState = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.", nameof(name));

            if (!productCode.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.", nameof(productCode));

            if (!idSite.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.", nameof(idSite));

            if (!lastConnection.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.", nameof(lastConnection));

            if (!settings.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.", nameof(settings));

            if (!customName.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.", nameof(customName));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (productCode.IsSet && productCode.Value == null)
                throw new ArgumentNullException(nameof(productCode), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (idSite.IsSet && idSite.Value == null)
                throw new ArgumentNullException(nameof(idSite), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (lastConnection.IsSet && lastConnection.Value == null)
                throw new ArgumentNullException(nameof(lastConnection), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (settings.IsSet && settings.Value == null)
                throw new ArgumentNullException(nameof(settings), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (productName.IsSet && productName.Value == null)
                throw new ArgumentNullException(nameof(productName), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (firmwareVersion.IsSet && firmwareVersion.Value == null)
                throw new ArgumentNullException(nameof(firmwareVersion), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (connection.IsSet && connection.Value == null)
                throw new ArgumentNullException(nameof(connection), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (instance.IsSet && instance.Value == null)
                throw new ArgumentNullException(nameof(instance), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (idDeviceType.IsSet && idDeviceType.Value == null)
                throw new ArgumentNullException(nameof(idDeviceType), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (signalRSSI.IsSet && signalRSSI.Value == null)
                throw new ArgumentNullException(nameof(signalRSSI), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (signalSNR.IsSet && signalSNR.Value == null)
                throw new ArgumentNullException(nameof(signalSNR), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (signalFrequency.IsSet && signalFrequency.Value == null)
                throw new ArgumentNullException(nameof(signalFrequency), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (antennaType.IsSet && antennaType.Value == null)
                throw new ArgumentNullException(nameof(antennaType), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (networkName.IsSet && networkName.Value == null)
                throw new ArgumentNullException(nameof(networkName), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (loggingInterval.IsSet && loggingInterval.Value == null)
                throw new ArgumentNullException(nameof(loggingInterval), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (identifier.IsSet && identifier.Value == null)
                throw new ArgumentNullException(nameof(identifier), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (lastPowerUpOrRestart.IsSet && lastPowerUpOrRestart.Value == null)
                throw new ArgumentNullException(nameof(lastPowerUpOrRestart), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (remoteOnLan.IsSet && remoteOnLan.Value == null)
                throw new ArgumentNullException(nameof(remoteOnLan), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (autoUpdate.IsSet && autoUpdate.Value == null)
                throw new ArgumentNullException(nameof(autoUpdate), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (updateTo.IsSet && updateTo.Value == null)
                throw new ArgumentNullException(nameof(updateTo), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (vncSshAuth.IsSet && vncSshAuth.Value == null)
                throw new ArgumentNullException(nameof(vncSshAuth), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (vncStatus.IsSet && vncStatus.Value == null)
                throw new ArgumentNullException(nameof(vncStatus), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (vncPort.IsSet && vncPort.Value == null)
                throw new ArgumentNullException(nameof(vncPort), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (twoWayCommunication.IsSet && twoWayCommunication.Value == null)
                throw new ArgumentNullException(nameof(twoWayCommunication), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (remoteSupportEnabled.IsSet && remoteSupportEnabled.Value == null)
                throw new ArgumentNullException(nameof(remoteSupportEnabled), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (remoteSupportPort.IsSet && remoteSupportPort.Value == null)
                throw new ArgumentNullException(nameof(remoteSupportPort), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (remoteSupportIp.IsSet && remoteSupportIp.Value == null)
                throw new ArgumentNullException(nameof(remoteSupportIp), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (remoteSupport.IsSet && remoteSupport.Value == null)
                throw new ArgumentNullException(nameof(remoteSupport), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (productId.IsSet && productId.Value == null)
                throw new ArgumentNullException(nameof(productId), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (vmc.IsSet && vmc.Value == null)
                throw new ArgumentNullException(nameof(vmc), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (vid.IsSet && vid.Value == null)
                throw new ArgumentNullException(nameof(vid), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (tempSensorConnected.IsSet && tempSensorConnected.Value == null)
                throw new ArgumentNullException(nameof(tempSensorConnected), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (froniusDeviceType.IsSet && froniusDeviceType.Value == null)
                throw new ArgumentNullException(nameof(froniusDeviceType), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (pL.IsSet && pL.Value == null)
                throw new ArgumentNullException(nameof(pL), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (pdV.IsSet && pdV.Value == null)
                throw new ArgumentNullException(nameof(pdV), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (inputType.IsSet && inputType.Value == null)
                throw new ArgumentNullException(nameof(inputType), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (inputState.IsSet && inputState.Value == null)
                throw new ArgumentNullException(nameof(inputState), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            return new InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner(name.Value!, productCode.Value!, idSite.Value!.Value!, lastConnection.Value!, settings.Value!, customName.Value!, productName, firmwareVersion, varClass, connection, instance, idDeviceType, signalRSSI, signalSNR, signalFrequency, antennaType, networkName, loggingInterval, identifier, lastPowerUpOrRestart, machineSerialNumber, remoteOnLan, autoUpdate, updateTo, vncSshAuth, vncStatus, vncPort, twoWayCommunication, remoteSupportEnabled, remoteSupportPort, remoteSupportIp, remoteSupport, productId, vmc, vid, tempSensorConnected, froniusDeviceType, pL, pdV, inputType, inputState);
        }

        /// <summary>
        /// Serializes a <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSystemOverview200ResponseRecordsDevicesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner installationsIdSiteSystemOverview200ResponseRecordsDevicesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSystemOverview200ResponseRecordsDevicesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner installationsIdSiteSystemOverview200ResponseRecordsDevicesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Name == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Name), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductCode == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductCode), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastConnection == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastConnection), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Settings == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Settings), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductNameOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductName == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductName), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FirmwareVersionOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FirmwareVersion == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FirmwareVersion), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ClassOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Class == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Class), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ConnectionOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Connection == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Connection), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalRSSIOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalRSSI == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalRSSI), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalSNROption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalSNR == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalSNR), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalFrequencyOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalFrequency == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalFrequency), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.NetworkNameOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.NetworkName == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.NetworkName), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LoggingIntervalOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LoggingInterval == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LoggingInterval), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.IdentifierOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Identifier == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Identifier), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastPowerUpOrRestartOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastPowerUpOrRestart == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastPowerUpOrRestart), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteOnLanOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteOnLan == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteOnLan), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportPortOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportPort == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportPort), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportIpOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportIp == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportIp), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductIdOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductId == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductId), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VmcOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Vmc == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Vmc), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VidOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Vid == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Vid), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FroniusDeviceTypeOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FroniusDeviceType == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FroniusDeviceType), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PLOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PL == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PL), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PdVOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PdV == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PdV), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputTypeOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputType == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputType), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputStateOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputState == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputState), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.");

            writer.WriteString("name", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Name);

            writer.WriteString("productCode", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductCode);

            writer.WriteNumber("idSite", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.IdSite);

            writer.WritePropertyName("lastConnection");
            JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastConnection, jsonSerializerOptions);
            writer.WritePropertyName("settings");
            JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Settings, jsonSerializerOptions);
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.CustomName != null)
                writer.WriteString("customName", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.CustomName);
            else
                writer.WriteNull("customName");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductNameOption.IsSet)
                writer.WriteString("productName", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductName);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FirmwareVersionOption.IsSet)
                writer.WriteString("firmwareVersion", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FirmwareVersion);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ClassOption.IsSet)
                writer.WriteString("class", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Class);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ConnectionOption.IsSet)
                writer.WriteString("connection", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Connection);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InstanceOption.IsSet)
                writer.WriteNumber("instance", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InstanceOption.Value!.Value);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.IdDeviceTypeOption.IsSet)
                writer.WriteNumber("idDeviceType", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.IdDeviceTypeOption.Value!.Value);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalRSSIOption.IsSet)
                writer.WriteString("signalRSSI", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalRSSI);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalSNROption.IsSet)
                writer.WriteString("signalSNR", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalSNR);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalFrequencyOption.IsSet)
                writer.WriteString("signalFrequency", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.SignalFrequency);

            var antennaTypeRawValue = InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AntennaTypeEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AntennaTypeOption.Value!.Value);
            writer.WriteString("antennaType", antennaTypeRawValue);
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.NetworkNameOption.IsSet)
                writer.WriteString("networkName", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.NetworkName);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LoggingIntervalOption.IsSet)
            {
                writer.WritePropertyName("loggingInterval");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LoggingInterval, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.IdentifierOption.IsSet)
                writer.WriteString("identifier", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Identifier);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastPowerUpOrRestartOption.IsSet)
            {
                writer.WritePropertyName("lastPowerUpOrRestart");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.LastPowerUpOrRestart, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.MachineSerialNumberOption.IsSet)
                if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.MachineSerialNumberOption.Value != null)
                    writer.WriteString("machineSerialNumber", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.MachineSerialNumber);
                else
                    writer.WriteNull("machineSerialNumber");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteOnLanOption.IsSet)
                writer.WriteString("remoteOnLan", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteOnLan);

            var autoUpdateRawValue = InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AutoUpdateEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.AutoUpdateOption.Value!.Value);
            writer.WriteString("autoUpdate", autoUpdateRawValue);
            var updateToRawValue = InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.UpdateToEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.UpdateToOption.Value!.Value);
            writer.WriteString("updateTo", updateToRawValue);
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncSshAuthOption.IsSet)
                writer.WriteBoolean("vncSshAuth", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncSshAuthOption.Value!.Value);

            var vncStatusRawValue = InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncStatusEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncStatusOption.Value!.Value);
            writer.WriteString("vncStatus", vncStatusRawValue);
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncPortOption.IsSet)
                writer.WriteNumber("vncPort", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VncPortOption.Value!.Value);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.TwoWayCommunicationOption.IsSet)
                writer.WriteBoolean("twoWayCommunication", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.TwoWayCommunicationOption.Value!.Value);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnabledOption.IsSet)
                writer.WriteBoolean("remoteSupportEnabled", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnabledOption.Value!.Value);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportPortOption.IsSet)
            {
                writer.WritePropertyName("remoteSupportPort");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportPort, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportIpOption.IsSet)
                writer.WriteString("remoteSupportIp", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportIp);

            var remoteSupportRawValue = InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.RemoteSupportOption.Value!.Value);
            writer.WriteString("remoteSupport", remoteSupportRawValue);
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductIdOption.IsSet)
            {
                writer.WritePropertyName("productId");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.ProductId, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VmcOption.IsSet)
            {
                writer.WritePropertyName("vmc");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Vmc, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.VidOption.IsSet)
            {
                writer.WritePropertyName("vid");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.Vid, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.TempSensorConnectedOption.IsSet)
                writer.WriteBoolean("tempSensorConnected", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.TempSensorConnectedOption.Value!.Value);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FroniusDeviceTypeOption.IsSet)
                writer.WriteString("froniusDeviceType", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.FroniusDeviceType);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PLOption.IsSet)
            {
                writer.WritePropertyName("pL");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PL, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PdVOption.IsSet)
                writer.WriteString("pdV", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.PdV);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputTypeOption.IsSet)
            {
                writer.WritePropertyName("inputType");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputType, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputStateOption.IsSet)
                writer.WriteString("inputState", installationsIdSiteSystemOverview200ResponseRecordsDevicesInner.InputState);
        }
    }
}
