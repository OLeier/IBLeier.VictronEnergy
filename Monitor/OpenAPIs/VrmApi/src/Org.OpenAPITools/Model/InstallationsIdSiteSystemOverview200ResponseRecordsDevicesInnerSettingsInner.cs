// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A setting for this device.
    /// </summary>
    public partial class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner" /> class.
        /// </summary>
        /// <param name="description">Setting description.</param>
        /// <param name="enumData">Possible enums.</param>
        /// <param name="idDataAttribute">The numeric data attribute id for this setting, or a description for compound settings.</param>
        /// <param name="idDeviceType">Device type id.</param>
        /// <param name="idSite">Installation id.</param>
        /// <param name="loggedTimestamp">Timestamp at which this setting was logged.</param>
        /// <param name="loggedValue">Value logged for this setting.</param>
        /// <param name="idUser">User id.</param>
        /// <param name="timestamp">Timestamp at which this setting was queued.</param>
        /// <param name="userName">User name.</param>
        /// <param name="value">Current value for this setting.</param>
        /// <param name="attributes">Underlying data attributes, only for compound settings.</param>
        /// <param name="values">Underlying values corresponding to this value, only for compounded settings.</param>
        [JsonConstructor]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner(string description, List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerEnumDataInner> enumData, string idDataAttribute, string idDeviceType, string idSite, string loggedTimestamp, int loggedValue, string? idUser = default, string? timestamp = default, string? userName = default, int? value = default, Option<List<int>?> attributes = default, Option<Dictionary<string, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerValuesValue>?> values = default)
        {
            Description = description;
            EnumData = enumData;
            IdDataAttribute = idDataAttribute;
            IdDeviceType = idDeviceType;
            IdSite = idSite;
            LoggedTimestamp = loggedTimestamp;
            LoggedValue = loggedValue;
            IdUser = idUser;
            Timestamp = timestamp;
            UserName = userName;
            Value = value;
            AttributesOption = attributes;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Setting description.
        /// </summary>
        /// <value>Setting description.</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Possible enums.
        /// </summary>
        /// <value>Possible enums.</value>
        [JsonPropertyName("enumData")]
        public List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerEnumDataInner> EnumData { get; set; }

        /// <summary>
        /// The numeric data attribute id for this setting, or a description for compound settings.
        /// </summary>
        /// <value>The numeric data attribute id for this setting, or a description for compound settings.</value>
        [JsonPropertyName("idDataAttribute")]
        public string IdDataAttribute { get; set; }

        /// <summary>
        /// Device type id.
        /// </summary>
        /// <value>Device type id.</value>
        [JsonPropertyName("idDeviceType")]
        public string IdDeviceType { get; set; }

        /// <summary>
        /// Installation id.
        /// </summary>
        /// <value>Installation id.</value>
        [JsonPropertyName("idSite")]
        public string IdSite { get; set; }

        /// <summary>
        /// Timestamp at which this setting was logged.
        /// </summary>
        /// <value>Timestamp at which this setting was logged.</value>
        [JsonPropertyName("loggedTimestamp")]
        public string LoggedTimestamp { get; set; }

        /// <summary>
        /// Value logged for this setting.
        /// </summary>
        /// <value>Value logged for this setting.</value>
        [JsonPropertyName("loggedValue")]
        public int LoggedValue { get; set; }

        /// <summary>
        /// User id.
        /// </summary>
        /// <value>User id.</value>
        [JsonPropertyName("idUser")]
        public string? IdUser { get; set; }

        /// <summary>
        /// Timestamp at which this setting was queued.
        /// </summary>
        /// <value>Timestamp at which this setting was queued.</value>
        [JsonPropertyName("timestamp")]
        public string? Timestamp { get; set; }

        /// <summary>
        /// User name.
        /// </summary>
        /// <value>User name.</value>
        [JsonPropertyName("user_name")]
        public string? UserName { get; set; }

        /// <summary>
        /// Current value for this setting.
        /// </summary>
        /// <value>Current value for this setting.</value>
        [JsonPropertyName("value")]
        public int? Value { get; set; }

        /// <summary>
        /// Used to track the state of Attributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> AttributesOption { get; private set; }

        /// <summary>
        /// Underlying data attributes, only for compound settings.
        /// </summary>
        /// <value>Underlying data attributes, only for compound settings.</value>
        [JsonPropertyName("attributes")]
        public List<int>? Attributes { get { return this.AttributesOption; } set { this.AttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerValuesValue>?> ValuesOption { get; private set; }

        /// <summary>
        /// Underlying values corresponding to this value, only for compounded settings.
        /// </summary>
        /// <value>Underlying values corresponding to this value, only for compounded settings.</value>
        [JsonPropertyName("values")]
        public Dictionary<string, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerValuesValue>? Values { get { return this.ValuesOption; } set { this.ValuesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnumData: ").Append(EnumData).Append("\n");
            sb.Append("  IdDataAttribute: ").Append(IdDataAttribute).Append("\n");
            sb.Append("  IdDeviceType: ").Append(IdDeviceType).Append("\n");
            sb.Append("  IdSite: ").Append(IdSite).Append("\n");
            sb.Append("  LoggedTimestamp: ").Append(LoggedTimestamp).Append("\n");
            sb.Append("  LoggedValue: ").Append(LoggedValue).Append("\n");
            sb.Append("  IdUser: ").Append(IdUser).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner" />
    /// </summary>
    public class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerJsonConverter : JsonConverter<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerEnumDataInner>?> enumData = default;
            Option<string?> idDataAttribute = default;
            Option<string?> idDeviceType = default;
            Option<string?> idSite = default;
            Option<string?> loggedTimestamp = default;
            Option<int?> loggedValue = default;
            Option<string?> idUser = default;
            Option<string?> timestamp = default;
            Option<string?> userName = default;
            Option<int?> value = default;
            Option<List<int>?> attributes = default;
            Option<Dictionary<string, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerValuesValue>?> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "enumData":
                            enumData = new Option<List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerEnumDataInner>?>(JsonSerializer.Deserialize<List<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerEnumDataInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "idDataAttribute":
                            idDataAttribute = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idDeviceType":
                            idDeviceType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idSite":
                            idSite = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "loggedTimestamp":
                            loggedTimestamp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "loggedValue":
                            loggedValue = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "idUser":
                            idUser = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "user_name":
                            userName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "attributes":
                            attributes = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "values":
                            values = new Option<Dictionary<string, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerValuesValue>?>(JsonSerializer.Deserialize<Dictionary<string, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInnerValuesValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(description));

            if (!enumData.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(enumData));

            if (!idDataAttribute.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(idDataAttribute));

            if (!idDeviceType.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(idDeviceType));

            if (!idSite.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(idSite));

            if (!loggedTimestamp.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(loggedTimestamp));

            if (!loggedValue.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(loggedValue));

            if (!idUser.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(idUser));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(timestamp));

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(userName));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.", nameof(value));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (enumData.IsSet && enumData.Value == null)
                throw new ArgumentNullException(nameof(enumData), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (idDataAttribute.IsSet && idDataAttribute.Value == null)
                throw new ArgumentNullException(nameof(idDataAttribute), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (idDeviceType.IsSet && idDeviceType.Value == null)
                throw new ArgumentNullException(nameof(idDeviceType), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (idSite.IsSet && idSite.Value == null)
                throw new ArgumentNullException(nameof(idSite), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (loggedTimestamp.IsSet && loggedTimestamp.Value == null)
                throw new ArgumentNullException(nameof(loggedTimestamp), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (loggedValue.IsSet && loggedValue.Value == null)
                throw new ArgumentNullException(nameof(loggedValue), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (attributes.IsSet && attributes.Value == null)
                throw new ArgumentNullException(nameof(attributes), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            return new InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner(description.Value!, enumData.Value!, idDataAttribute.Value!, idDeviceType.Value!, idSite.Value!, loggedTimestamp.Value!, loggedValue.Value!.Value!, idUser.Value!, timestamp.Value!, userName.Value!, value.Value!, attributes, values);
        }

        /// <summary>
        /// Serializes a <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Description == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Description), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.EnumData == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.EnumData), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdDataAttribute == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdDataAttribute), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdDeviceType == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdDeviceType), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdSite == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdSite), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.LoggedTimestamp == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.LoggedTimestamp), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.AttributesOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Attributes == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Attributes), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.ValuesOption.IsSet && installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Values == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Values), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.");

            writer.WriteString("description", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Description);

            writer.WritePropertyName("enumData");
            JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.EnumData, jsonSerializerOptions);
            writer.WriteString("idDataAttribute", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdDataAttribute);

            writer.WriteString("idDeviceType", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdDeviceType);

            writer.WriteString("idSite", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdSite);

            writer.WriteString("loggedTimestamp", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.LoggedTimestamp);

            writer.WriteNumber("loggedValue", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.LoggedValue);

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdUser != null)
                writer.WriteString("idUser", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.IdUser);
            else
                writer.WriteNull("idUser");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Timestamp != null)
                writer.WriteString("timestamp", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Timestamp);
            else
                writer.WriteNull("timestamp");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.UserName != null)
                writer.WriteString("user_name", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.UserName);
            else
                writer.WriteNull("user_name");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Value != null)
                writer.WriteNumber("value", installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Value.Value);
            else
                writer.WriteNull("value");

            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.AttributesOption.IsSet)
            {
                writer.WritePropertyName("attributes");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Attributes, jsonSerializerOptions);
            }
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.ValuesOption.IsSet)
            {
                writer.WritePropertyName("values");
                JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerSettingsInner.Values, jsonSerializerOptions);
            }
        }
    }
}
