// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VE.bus device hardware configuration.
    /// </summary>
    public partial class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid" /> class.
        /// </summary>
        /// <param name="enumValue">Pure enum value.</param>
        /// <param name="devicesPerPhase">devicesPerPhase</param>
        [JsonConstructor]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid(EnumValueEnum enumValue, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidDevicesPerPhase devicesPerPhase)
        {
            EnumValue = enumValue;
            DevicesPerPhase = devicesPerPhase;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Pure enum value.
        /// </summary>
        /// <value>Pure enum value.</value>
        public enum EnumValueEnum
        {
            /// <summary>
            /// Enum SingleUnit for value: Single unit
            /// </summary>
            SingleUnit = 1,

            /// <summary>
            /// Enum TwoUnitsConfiguredAsSplitPhase for value: Two units configured as split-phase
            /// </summary>
            TwoUnitsConfiguredAsSplitPhase = 2,

            /// <summary>
            /// Enum TwoUnitsConfiguredInParallel for value: Two units configured in parallel
            /// </summary>
            TwoUnitsConfiguredInParallel = 3,

            /// <summary>
            /// Enum ThreeUnitsConfiguredInParallel for value: Three units configured in parallel
            /// </summary>
            ThreeUnitsConfiguredInParallel = 4,

            /// <summary>
            /// Enum ThreePhaseSystemOneUnitPerPhase for value: three phase system, one unit per phase
            /// </summary>
            ThreePhaseSystemOneUnitPerPhase = 5,

            /// <summary>
            /// Enum ThreePhaseSystemTwoUnitsPerPhase for value: three phase system, two units per phase
            /// </summary>
            ThreePhaseSystemTwoUnitsPerPhase = 6,

            /// <summary>
            /// Enum ThreePhaseSystemThreeUnitsPerPhase for value: three phase system, three units per phase
            /// </summary>
            ThreePhaseSystemThreeUnitsPerPhase = 7,

            /// <summary>
            /// Enum ThreePhaseSystemFourUnitsPerPhase for value: three phase system, four units per phase
            /// </summary>
            ThreePhaseSystemFourUnitsPerPhase = 8,

            /// <summary>
            /// Enum ThreePhaseSystemFiveUnitsPerPhase for value: three phase system, five units per phase
            /// </summary>
            ThreePhaseSystemFiveUnitsPerPhase = 9
        }

        /// <summary>
        /// Returns a <see cref="EnumValueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EnumValueEnum EnumValueEnumFromString(string value)
        {
            if (value.Equals("Single unit"))
                return EnumValueEnum.SingleUnit;

            if (value.Equals("Two units configured as split-phase"))
                return EnumValueEnum.TwoUnitsConfiguredAsSplitPhase;

            if (value.Equals("Two units configured in parallel"))
                return EnumValueEnum.TwoUnitsConfiguredInParallel;

            if (value.Equals("Three units configured in parallel"))
                return EnumValueEnum.ThreeUnitsConfiguredInParallel;

            if (value.Equals("three phase system, one unit per phase"))
                return EnumValueEnum.ThreePhaseSystemOneUnitPerPhase;

            if (value.Equals("three phase system, two units per phase"))
                return EnumValueEnum.ThreePhaseSystemTwoUnitsPerPhase;

            if (value.Equals("three phase system, three units per phase"))
                return EnumValueEnum.ThreePhaseSystemThreeUnitsPerPhase;

            if (value.Equals("three phase system, four units per phase"))
                return EnumValueEnum.ThreePhaseSystemFourUnitsPerPhase;

            if (value.Equals("three phase system, five units per phase"))
                return EnumValueEnum.ThreePhaseSystemFiveUnitsPerPhase;

            throw new NotImplementedException($"Could not convert value to type EnumValueEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EnumValueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EnumValueEnum? EnumValueEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Single unit"))
                return EnumValueEnum.SingleUnit;

            if (value.Equals("Two units configured as split-phase"))
                return EnumValueEnum.TwoUnitsConfiguredAsSplitPhase;

            if (value.Equals("Two units configured in parallel"))
                return EnumValueEnum.TwoUnitsConfiguredInParallel;

            if (value.Equals("Three units configured in parallel"))
                return EnumValueEnum.ThreeUnitsConfiguredInParallel;

            if (value.Equals("three phase system, one unit per phase"))
                return EnumValueEnum.ThreePhaseSystemOneUnitPerPhase;

            if (value.Equals("three phase system, two units per phase"))
                return EnumValueEnum.ThreePhaseSystemTwoUnitsPerPhase;

            if (value.Equals("three phase system, three units per phase"))
                return EnumValueEnum.ThreePhaseSystemThreeUnitsPerPhase;

            if (value.Equals("three phase system, four units per phase"))
                return EnumValueEnum.ThreePhaseSystemFourUnitsPerPhase;

            if (value.Equals("three phase system, five units per phase"))
                return EnumValueEnum.ThreePhaseSystemFiveUnitsPerPhase;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EnumValueEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EnumValueEnumToJsonValue(EnumValueEnum value)
        {
            if (value == EnumValueEnum.SingleUnit)
                return "Single unit";

            if (value == EnumValueEnum.TwoUnitsConfiguredAsSplitPhase)
                return "Two units configured as split-phase";

            if (value == EnumValueEnum.TwoUnitsConfiguredInParallel)
                return "Two units configured in parallel";

            if (value == EnumValueEnum.ThreeUnitsConfiguredInParallel)
                return "Three units configured in parallel";

            if (value == EnumValueEnum.ThreePhaseSystemOneUnitPerPhase)
                return "three phase system, one unit per phase";

            if (value == EnumValueEnum.ThreePhaseSystemTwoUnitsPerPhase)
                return "three phase system, two units per phase";

            if (value == EnumValueEnum.ThreePhaseSystemThreeUnitsPerPhase)
                return "three phase system, three units per phase";

            if (value == EnumValueEnum.ThreePhaseSystemFourUnitsPerPhase)
                return "three phase system, four units per phase";

            if (value == EnumValueEnum.ThreePhaseSystemFiveUnitsPerPhase)
                return "three phase system, five units per phase";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Pure enum value.
        /// </summary>
        /// <value>Pure enum value.</value>
        [JsonPropertyName("enumValue")]
        public EnumValueEnum EnumValue { get; set; }

        /// <summary>
        /// Gets or Sets DevicesPerPhase
        /// </summary>
        [JsonPropertyName("devicesPerPhase")]
        public InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidDevicesPerPhase DevicesPerPhase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid {\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  DevicesPerPhase: ").Append(DevicesPerPhase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid" />
    /// </summary>
    public class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidJsonConverter : JsonConverter<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.EnumValueEnum?> enumValue = default;
            Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidDevicesPerPhase?> devicesPerPhase = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enumValue":
                            string? enumValueRawValue = utf8JsonReader.GetString();
                            if (enumValueRawValue != null)
                                enumValue = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.EnumValueEnum?>(InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.EnumValueEnumFromStringOrDefault(enumValueRawValue));
                            break;
                        case "devicesPerPhase":
                            devicesPerPhase = new Option<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidDevicesPerPhase?>(JsonSerializer.Deserialize<InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVidDevicesPerPhase>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!enumValue.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.", nameof(enumValue));

            if (!devicesPerPhase.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.", nameof(devicesPerPhase));

            if (enumValue.IsSet && enumValue.Value == null)
                throw new ArgumentNullException(nameof(enumValue), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.");

            if (devicesPerPhase.IsSet && devicesPerPhase.Value == null)
                throw new ArgumentNullException(nameof(devicesPerPhase), "Property is not nullable for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.");

            return new InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid(enumValue.Value!.Value!, devicesPerPhase.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.DevicesPerPhase == null)
                throw new ArgumentNullException(nameof(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.DevicesPerPhase), "Property is required for class InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.");

            var enumValueRawValue = InstallationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.EnumValueEnumToJsonValue(installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.EnumValue);
            writer.WriteString("enumValue", enumValueRawValue);
            writer.WritePropertyName("devicesPerPhase");
            JsonSerializer.Serialize(writer, installationsIdSiteSystemOverview200ResponseRecordsDevicesInnerVid.DevicesPerPhase, jsonSerializerOptions);
        }
    }
}
