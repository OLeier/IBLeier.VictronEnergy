// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data for data attribute with this key.
    /// </summary>
    public partial class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue" /> class.
        /// </summary>
        /// <param name="code">Data attribute code.</param>
        /// <param name="dataAttributeName">Data attribute name.</param>
        /// <param name="dataType">Data attribute data type.</param>
        /// <param name="dbusPath">Data attribute DBus path.</param>
        /// <param name="dbusServiceType">Data attribute DBus service type.</param>
        /// <param name="formatValueOnly">Data attribute string format without unit.</param>
        /// <param name="formatWithUnit">Data attribute string format with unit.</param>
        /// <param name="formattedValue">Data attribute formatted value with unit.</param>
        /// <param name="hasOldData">True if the retrieved data for this data attribute is old.</param>
        /// <param name="idDataAttribute">Data attribute id.</param>
        /// <param name="instance">Installation instance this data attribute belongs to.</param>
        /// <param name="isKeyDataAttribute">1 if this is the key data attribute, else 0.</param>
        /// <param name="isValid">1 if this data is valid, else 0.</param>
        /// <param name="rawValue">Data attribute raw value, regardless of data type.</param>
        /// <param name="secondsAgo">Data attribute seconds since last received data.</param>
        /// <param name="secondsToNextLog">Data attribute expected data logging interval.</param>
        /// <param name="value">Data attribute value, regardless of data type.</param>
        /// <param name="valueFormattedWithUnit">Data attribute formatted value with unit.</param>
        /// <param name="nameEnum">Data attribute enum name, if applicable.</param>
        /// <param name="valueEnum">Data attribute enum value, if applicable.</param>
        /// <param name="valueFloat">Data attribute float value, if applicable.</param>
        /// <param name="valueFormattedValueOnly">Data attribute formatted value without unit.</param>
        /// <param name="valueString">Data attribute string value, if applicable.</param>
        [JsonConstructor]
        public InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue(string code, string dataAttributeName, DataTypeEnum dataType, string dbusPath, string dbusServiceType, string formatValueOnly, string formatWithUnit, string formattedValue, bool hasOldData, string idDataAttribute, int instance, string isKeyDataAttribute, string isValid, string rawValue, string secondsAgo, string secondsToNextLog, string value, string valueFormattedWithUnit, string? nameEnum = default, string? valueEnum = default, string? valueFloat = default, Option<string?> valueFormattedValueOnly = default, string? valueString = default)
        {
            Code = code;
            DataAttributeName = dataAttributeName;
            DataType = dataType;
            DbusPath = dbusPath;
            DbusServiceType = dbusServiceType;
            FormatValueOnly = formatValueOnly;
            FormatWithUnit = formatWithUnit;
            FormattedValue = formattedValue;
            HasOldData = hasOldData;
            IdDataAttribute = idDataAttribute;
            Instance = instance;
            IsKeyDataAttribute = isKeyDataAttribute;
            IsValid = isValid;
            RawValue = rawValue;
            SecondsAgo = secondsAgo;
            SecondsToNextLog = secondsToNextLog;
            Value = value;
            ValueFormattedWithUnit = valueFormattedWithUnit;
            NameEnum = nameEnum;
            ValueEnum = valueEnum;
            ValueFloat = valueFloat;
            ValueFormattedValueOnlyOption = valueFormattedValueOnly;
            ValueString = valueString;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Data attribute data type.
        /// </summary>
        /// <value>Data attribute data type.</value>
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum Float for value: float
            /// </summary>
            Float = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            Enum = 2,

            /// <summary>
            /// Enum String for value: string
            /// </summary>
            String = 3
        }

        /// <summary>
        /// Returns a <see cref="DataTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DataTypeEnum DataTypeEnumFromString(string value)
        {
            if (value.Equals("float"))
                return DataTypeEnum.Float;

            if (value.Equals("enum"))
                return DataTypeEnum.Enum;

            if (value.Equals("string"))
                return DataTypeEnum.String;

            throw new NotImplementedException($"Could not convert value to type DataTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DataTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DataTypeEnum? DataTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("float"))
                return DataTypeEnum.Float;

            if (value.Equals("enum"))
                return DataTypeEnum.Enum;

            if (value.Equals("string"))
                return DataTypeEnum.String;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DataTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DataTypeEnumToJsonValue(DataTypeEnum value)
        {
            if (value == DataTypeEnum.Float)
                return "float";

            if (value == DataTypeEnum.Enum)
                return "enum";

            if (value == DataTypeEnum.String)
                return "string";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Data attribute data type.
        /// </summary>
        /// <value>Data attribute data type.</value>
        [JsonPropertyName("dataType")]
        public DataTypeEnum DataType { get; set; }

        /// <summary>
        /// Data attribute code.
        /// </summary>
        /// <value>Data attribute code.</value>
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Data attribute name.
        /// </summary>
        /// <value>Data attribute name.</value>
        [JsonPropertyName("dataAttributeName")]
        public string DataAttributeName { get; set; }

        /// <summary>
        /// Data attribute DBus path.
        /// </summary>
        /// <value>Data attribute DBus path.</value>
        [JsonPropertyName("dbusPath")]
        public string DbusPath { get; set; }

        /// <summary>
        /// Data attribute DBus service type.
        /// </summary>
        /// <value>Data attribute DBus service type.</value>
        [JsonPropertyName("dbusServiceType")]
        public string DbusServiceType { get; set; }

        /// <summary>
        /// Data attribute string format without unit.
        /// </summary>
        /// <value>Data attribute string format without unit.</value>
        [JsonPropertyName("formatValueOnly")]
        public string FormatValueOnly { get; set; }

        /// <summary>
        /// Data attribute string format with unit.
        /// </summary>
        /// <value>Data attribute string format with unit.</value>
        [JsonPropertyName("formatWithUnit")]
        public string FormatWithUnit { get; set; }

        /// <summary>
        /// Data attribute formatted value with unit.
        /// </summary>
        /// <value>Data attribute formatted value with unit.</value>
        [JsonPropertyName("formattedValue")]
        public string FormattedValue { get; set; }

        /// <summary>
        /// True if the retrieved data for this data attribute is old.
        /// </summary>
        /// <value>True if the retrieved data for this data attribute is old.</value>
        [JsonPropertyName("hasOldData")]
        public bool HasOldData { get; set; }

        /// <summary>
        /// Data attribute id.
        /// </summary>
        /// <value>Data attribute id.</value>
        [JsonPropertyName("idDataAttribute")]
        public string IdDataAttribute { get; set; }

        /// <summary>
        /// Installation instance this data attribute belongs to.
        /// </summary>
        /// <value>Installation instance this data attribute belongs to.</value>
        [JsonPropertyName("instance")]
        public int Instance { get; set; }

        /// <summary>
        /// 1 if this is the key data attribute, else 0.
        /// </summary>
        /// <value>1 if this is the key data attribute, else 0.</value>
        [JsonPropertyName("isKeyDataAttribute")]
        public string IsKeyDataAttribute { get; set; }

        /// <summary>
        /// 1 if this data is valid, else 0.
        /// </summary>
        /// <value>1 if this data is valid, else 0.</value>
        [JsonPropertyName("isValid")]
        public string IsValid { get; set; }

        /// <summary>
        /// Data attribute raw value, regardless of data type.
        /// </summary>
        /// <value>Data attribute raw value, regardless of data type.</value>
        [JsonPropertyName("rawValue")]
        public string RawValue { get; set; }

        /// <summary>
        /// Data attribute seconds since last received data.
        /// </summary>
        /// <value>Data attribute seconds since last received data.</value>
        [JsonPropertyName("secondsAgo")]
        public string SecondsAgo { get; set; }

        /// <summary>
        /// Data attribute expected data logging interval.
        /// </summary>
        /// <value>Data attribute expected data logging interval.</value>
        [JsonPropertyName("secondsToNextLog")]
        public string SecondsToNextLog { get; set; }

        /// <summary>
        /// Data attribute value, regardless of data type.
        /// </summary>
        /// <value>Data attribute value, regardless of data type.</value>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Data attribute formatted value with unit.
        /// </summary>
        /// <value>Data attribute formatted value with unit.</value>
        [JsonPropertyName("valueFormattedWithUnit")]
        public string ValueFormattedWithUnit { get; set; }

        /// <summary>
        /// Data attribute enum name, if applicable.
        /// </summary>
        /// <value>Data attribute enum name, if applicable.</value>
        [JsonPropertyName("nameEnum")]
        public string? NameEnum { get; set; }

        /// <summary>
        /// Data attribute enum value, if applicable.
        /// </summary>
        /// <value>Data attribute enum value, if applicable.</value>
        [JsonPropertyName("valueEnum")]
        public string? ValueEnum { get; set; }

        /// <summary>
        /// Data attribute float value, if applicable.
        /// </summary>
        /// <value>Data attribute float value, if applicable.</value>
        [JsonPropertyName("valueFloat")]
        public string? ValueFloat { get; set; }

        /// <summary>
        /// Used to track the state of ValueFormattedValueOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueFormattedValueOnlyOption { get; private set; }

        /// <summary>
        /// Data attribute formatted value without unit.
        /// </summary>
        /// <value>Data attribute formatted value without unit.</value>
        [JsonPropertyName("valueFormattedValueOnly")]
        public string? ValueFormattedValueOnly { get { return this.ValueFormattedValueOnlyOption; } set { this.ValueFormattedValueOnlyOption = new(value); } }

        /// <summary>
        /// Data attribute string value, if applicable.
        /// </summary>
        /// <value>Data attribute string value, if applicable.</value>
        [JsonPropertyName("valueString")]
        public string? ValueString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DataAttributeName: ").Append(DataAttributeName).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DbusPath: ").Append(DbusPath).Append("\n");
            sb.Append("  DbusServiceType: ").Append(DbusServiceType).Append("\n");
            sb.Append("  FormatValueOnly: ").Append(FormatValueOnly).Append("\n");
            sb.Append("  FormatWithUnit: ").Append(FormatWithUnit).Append("\n");
            sb.Append("  FormattedValue: ").Append(FormattedValue).Append("\n");
            sb.Append("  HasOldData: ").Append(HasOldData).Append("\n");
            sb.Append("  IdDataAttribute: ").Append(IdDataAttribute).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  IsKeyDataAttribute: ").Append(IsKeyDataAttribute).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  RawValue: ").Append(RawValue).Append("\n");
            sb.Append("  SecondsAgo: ").Append(SecondsAgo).Append("\n");
            sb.Append("  SecondsToNextLog: ").Append(SecondsToNextLog).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueFormattedWithUnit: ").Append(ValueFormattedWithUnit).Append("\n");
            sb.Append("  NameEnum: ").Append(NameEnum).Append("\n");
            sb.Append("  ValueEnum: ").Append(ValueEnum).Append("\n");
            sb.Append("  ValueFloat: ").Append(ValueFloat).Append("\n");
            sb.Append("  ValueFormattedValueOnly: ").Append(ValueFormattedValueOnly).Append("\n");
            sb.Append("  ValueString: ").Append(ValueString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue" />
    /// </summary>
    public class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValueJsonConverter : JsonConverter<InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> dataAttributeName = default;
            Option<InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataTypeEnum?> dataType = default;
            Option<string?> dbusPath = default;
            Option<string?> dbusServiceType = default;
            Option<string?> formatValueOnly = default;
            Option<string?> formatWithUnit = default;
            Option<string?> formattedValue = default;
            Option<bool?> hasOldData = default;
            Option<string?> idDataAttribute = default;
            Option<int?> instance = default;
            Option<string?> isKeyDataAttribute = default;
            Option<string?> isValid = default;
            Option<string?> rawValue = default;
            Option<string?> secondsAgo = default;
            Option<string?> secondsToNextLog = default;
            Option<string?> value = default;
            Option<string?> valueFormattedWithUnit = default;
            Option<string?> nameEnum = default;
            Option<string?> valueEnum = default;
            Option<string?> valueFloat = default;
            Option<string?> valueFormattedValueOnly = default;
            Option<string?> valueString = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dataAttributeName":
                            dataAttributeName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dataType":
                            string? dataTypeRawValue = utf8JsonReader.GetString();
                            if (dataTypeRawValue != null)
                                dataType = new Option<InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataTypeEnum?>(InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataTypeEnumFromStringOrDefault(dataTypeRawValue));
                            break;
                        case "dbusPath":
                            dbusPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dbusServiceType":
                            dbusServiceType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formatValueOnly":
                            formatValueOnly = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formatWithUnit":
                            formatWithUnit = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formattedValue":
                            formattedValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hasOldData":
                            hasOldData = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "idDataAttribute":
                            idDataAttribute = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "instance":
                            instance = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "isKeyDataAttribute":
                            isKeyDataAttribute = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isValid":
                            isValid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rawValue":
                            rawValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "secondsAgo":
                            secondsAgo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "secondsToNextLog":
                            secondsToNextLog = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "valueFormattedWithUnit":
                            valueFormattedWithUnit = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nameEnum":
                            nameEnum = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "valueEnum":
                            valueEnum = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "valueFloat":
                            valueFloat = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "valueFormattedValueOnly":
                            valueFormattedValueOnly = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "valueString":
                            valueString = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(code));

            if (!dataAttributeName.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(dataAttributeName));

            if (!dataType.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(dataType));

            if (!dbusPath.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(dbusPath));

            if (!dbusServiceType.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(dbusServiceType));

            if (!formatValueOnly.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(formatValueOnly));

            if (!formatWithUnit.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(formatWithUnit));

            if (!formattedValue.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(formattedValue));

            if (!hasOldData.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(hasOldData));

            if (!idDataAttribute.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(idDataAttribute));

            if (!instance.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(instance));

            if (!isKeyDataAttribute.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(isKeyDataAttribute));

            if (!isValid.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(isValid));

            if (!rawValue.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(rawValue));

            if (!secondsAgo.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(secondsAgo));

            if (!secondsToNextLog.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(secondsToNextLog));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(value));

            if (!valueFormattedWithUnit.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(valueFormattedWithUnit));

            if (!nameEnum.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(nameEnum));

            if (!valueEnum.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(valueEnum));

            if (!valueFloat.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(valueFloat));

            if (!valueString.IsSet)
                throw new ArgumentException("Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.", nameof(valueString));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (dataAttributeName.IsSet && dataAttributeName.Value == null)
                throw new ArgumentNullException(nameof(dataAttributeName), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (dataType.IsSet && dataType.Value == null)
                throw new ArgumentNullException(nameof(dataType), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (dbusPath.IsSet && dbusPath.Value == null)
                throw new ArgumentNullException(nameof(dbusPath), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (dbusServiceType.IsSet && dbusServiceType.Value == null)
                throw new ArgumentNullException(nameof(dbusServiceType), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (formatValueOnly.IsSet && formatValueOnly.Value == null)
                throw new ArgumentNullException(nameof(formatValueOnly), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (formatWithUnit.IsSet && formatWithUnit.Value == null)
                throw new ArgumentNullException(nameof(formatWithUnit), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (formattedValue.IsSet && formattedValue.Value == null)
                throw new ArgumentNullException(nameof(formattedValue), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (hasOldData.IsSet && hasOldData.Value == null)
                throw new ArgumentNullException(nameof(hasOldData), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (idDataAttribute.IsSet && idDataAttribute.Value == null)
                throw new ArgumentNullException(nameof(idDataAttribute), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (instance.IsSet && instance.Value == null)
                throw new ArgumentNullException(nameof(instance), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (isKeyDataAttribute.IsSet && isKeyDataAttribute.Value == null)
                throw new ArgumentNullException(nameof(isKeyDataAttribute), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (isValid.IsSet && isValid.Value == null)
                throw new ArgumentNullException(nameof(isValid), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (rawValue.IsSet && rawValue.Value == null)
                throw new ArgumentNullException(nameof(rawValue), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (secondsAgo.IsSet && secondsAgo.Value == null)
                throw new ArgumentNullException(nameof(secondsAgo), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (secondsToNextLog.IsSet && secondsToNextLog.Value == null)
                throw new ArgumentNullException(nameof(secondsToNextLog), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (valueFormattedWithUnit.IsSet && valueFormattedWithUnit.Value == null)
                throw new ArgumentNullException(nameof(valueFormattedWithUnit), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (valueFormattedValueOnly.IsSet && valueFormattedValueOnly.Value == null)
                throw new ArgumentNullException(nameof(valueFormattedValueOnly), "Property is not nullable for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            return new InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue(code.Value!, dataAttributeName.Value!, dataType.Value!.Value!, dbusPath.Value!, dbusServiceType.Value!, formatValueOnly.Value!, formatWithUnit.Value!, formattedValue.Value!, hasOldData.Value!.Value!, idDataAttribute.Value!, instance.Value!.Value!, isKeyDataAttribute.Value!, isValid.Value!, rawValue.Value!, secondsAgo.Value!, secondsToNextLog.Value!, value.Value!, valueFormattedWithUnit.Value!, nameEnum.Value!, valueEnum.Value!, valueFloat.Value!, valueFormattedValueOnly, valueString.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.Code == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.Code), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataAttributeName == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataAttributeName), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DbusPath == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DbusPath), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DbusServiceType == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DbusServiceType), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormatValueOnly == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormatValueOnly), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormatWithUnit == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormatWithUnit), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormattedValue == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormattedValue), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IdDataAttribute == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IdDataAttribute), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IsKeyDataAttribute == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IsKeyDataAttribute), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IsValid == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IsValid), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.RawValue == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.RawValue), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.SecondsAgo == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.SecondsAgo), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.SecondsToNextLog == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.SecondsToNextLog), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.Value == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.Value), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedWithUnit == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedWithUnit), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedValueOnlyOption.IsSet && installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedValueOnly == null)
                throw new ArgumentNullException(nameof(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedValueOnly), "Property is required for class InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.");

            writer.WriteString("code", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.Code);

            writer.WriteString("dataAttributeName", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataAttributeName);

            var dataTypeRawValue = InstallationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataTypeEnumToJsonValue(installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DataType);
            writer.WriteString("dataType", dataTypeRawValue);
            writer.WriteString("dbusPath", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DbusPath);

            writer.WriteString("dbusServiceType", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.DbusServiceType);

            writer.WriteString("formatValueOnly", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormatValueOnly);

            writer.WriteString("formatWithUnit", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormatWithUnit);

            writer.WriteString("formattedValue", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.FormattedValue);

            writer.WriteBoolean("hasOldData", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.HasOldData);

            writer.WriteString("idDataAttribute", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IdDataAttribute);

            writer.WriteNumber("instance", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.Instance);

            writer.WriteString("isKeyDataAttribute", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IsKeyDataAttribute);

            writer.WriteString("isValid", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.IsValid);

            writer.WriteString("rawValue", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.RawValue);

            writer.WriteString("secondsAgo", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.SecondsAgo);

            writer.WriteString("secondsToNextLog", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.SecondsToNextLog);

            writer.WriteString("value", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.Value);

            writer.WriteString("valueFormattedWithUnit", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedWithUnit);

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.NameEnum != null)
                writer.WriteString("nameEnum", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.NameEnum);
            else
                writer.WriteNull("nameEnum");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueEnum != null)
                writer.WriteString("valueEnum", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueEnum);
            else
                writer.WriteNull("valueEnum");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFloat != null)
                writer.WriteString("valueFloat", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFloat);
            else
                writer.WriteNull("valueFloat");

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedValueOnlyOption.IsSet)
                writer.WriteString("valueFormattedValueOnly", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueFormattedValueOnly);

            if (installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueString != null)
                writer.WriteString("valueString", installationsIdSiteWidgetsGPS200ResponseRecordsDataAttributesValue.ValueString);
            else
                writer.WriteNull("valueString");
        }
    }
}
