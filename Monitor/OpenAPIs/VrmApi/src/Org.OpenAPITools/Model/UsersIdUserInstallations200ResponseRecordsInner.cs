// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A single installation.
    /// </summary>
    public partial class UsersIdUserInstallations200ResponseRecordsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersIdUserInstallations200ResponseRecordsInner" /> class.
        /// </summary>
        /// <param name="idSite">idSite</param>
        /// <param name="accessLevel">The access level of the requesting user.</param>
        /// <param name="owner">True if the requesting user owns this installation.</param>
        /// <param name="isAdmin">True if the requesting user is an admin for this installation.</param>
        /// <param name="name">name</param>
        /// <param name="identifier">Installation identifier.</param>
        /// <param name="idUser">Installation owner id.</param>
        /// <param name="pvMax">Maximum PV for this installation.</param>
        /// <param name="timezone">Installation local timezone.</param>
        /// <param name="geofenceEnabled">True if the geofence is enabled.</param>
        /// <param name="realtimeUpdates">True if realtime updates are enabled.</param>
        /// <param name="hasMains">1 if the installation has mains, else 0.</param>
        /// <param name="hasGenerator">1 if the installation has a generator, else 0.</param>
        /// <param name="alarmMonitoring">If alarms and warnings should be sent. When 0 nothing is sent out, when 1 only alarms and when 2 both alarms and warnings.</param>
        /// <param name="invalidVRMAuthTokenUsedInLogRequest">1 if an invalid token was used for logging, else 0.</param>
        /// <param name="syscreated">Installation creation timestamp, UNIX format.</param>
        /// <param name="shared">True if sitesharing is enabled.</param>
        /// <param name="deviceIcon">Installation icon.</param>
        /// <param name="phonenumber">Installation phone number.</param>
        /// <param name="notes">Installation notes.</param>
        /// <param name="geofence">Installation geofence, in json format.</param>
        /// <param name="noDataAlarmTimeout">How many seconds after no installation data is received the alarm should go off.</param>
        /// <param name="alarm">True if there is an active alarm.</param>
        /// <param name="lastTimestamp">Timestamp of the most recently received data (UNIX format).</param>
        /// <param name="currentTime">Local time for the installation in 24h format (hh:mm).</param>
        /// <param name="timezoneOffset">How many seconds the installation is ahead of UTC.</param>
        /// <param name="demoMode">True if the installation is in demo mode.</param>
        /// <param name="mqttWebhost">Installation MQTT webhost, as a URL.</param>
        /// <param name="mqttHost">Installation MQTT host, as a URL.</param>
        /// <param name="highWorkload">True if the D-Bus round trip time is higher than the threshold.</param>
        /// <param name="currentAlarms">A list of the active alarms for this installation.</param>
        /// <param name="numAlarms">The amount of active alarms.</param>
        /// <param name="avatarUrl">The url for this site&#39;s avatar.</param>
        /// <param name="tags">Installation tags.</param>
        /// <param name="images">Installation images.</param>
        /// <param name="viewPermissions">viewPermissions</param>
        /// <param name="extended">Extended data about this installation.</param>
        [JsonConstructor]
        public UsersIdUserInstallations200ResponseRecordsInner(int idSite, int accessLevel, bool owner, bool isAdmin, string name, string identifier, int idUser, int pvMax, string timezone, bool geofenceEnabled, bool realtimeUpdates, int hasMains, int hasGenerator, int alarmMonitoring, int invalidVRMAuthTokenUsedInLogRequest, int syscreated, bool shared, string deviceIcon, string? phonenumber = default, string? notes = default, string? geofence = default, int? noDataAlarmTimeout = default, Option<bool?> alarm = default, Option<int?> lastTimestamp = default, Option<string?> currentTime = default, Option<int?> timezoneOffset = default, Option<bool?> demoMode = default, Option<string?> mqttWebhost = default, Option<string?> mqttHost = default, Option<bool?> highWorkload = default, Option<List<string>?> currentAlarms = default, Option<int?> numAlarms = default, Option<string?> avatarUrl = default, Option<List<UsersIdUserInstallations200ResponseRecordsInnerTagsInner>?> tags = default, Option<List<UsersIdUserInstallations200ResponseRecordsInnerImagesInner>?> images = default, Option<UsersIdUserInstallations200ResponseRecordsInnerViewPermissions?> viewPermissions = default, Option<List<UsersIdUserInstallations200ResponseRecordsInnerExtendedInner>?> extended = default)
        {
            IdSite = idSite;
            AccessLevel = accessLevel;
            Owner = owner;
            IsAdmin = isAdmin;
            Name = name;
            Identifier = identifier;
            IdUser = idUser;
            PvMax = pvMax;
            Timezone = timezone;
            GeofenceEnabled = geofenceEnabled;
            RealtimeUpdates = realtimeUpdates;
            HasMains = hasMains;
            HasGenerator = hasGenerator;
            AlarmMonitoring = alarmMonitoring;
            InvalidVRMAuthTokenUsedInLogRequest = invalidVRMAuthTokenUsedInLogRequest;
            Syscreated = syscreated;
            Shared = shared;
            DeviceIcon = deviceIcon;
            Phonenumber = phonenumber;
            Notes = notes;
            Geofence = geofence;
            NoDataAlarmTimeout = noDataAlarmTimeout;
            AlarmOption = alarm;
            LastTimestampOption = lastTimestamp;
            CurrentTimeOption = currentTime;
            TimezoneOffsetOption = timezoneOffset;
            DemoModeOption = demoMode;
            MqttWebhostOption = mqttWebhost;
            MqttHostOption = mqttHost;
            HighWorkloadOption = highWorkload;
            CurrentAlarmsOption = currentAlarms;
            NumAlarmsOption = numAlarms;
            AvatarUrlOption = avatarUrl;
            TagsOption = tags;
            ImagesOption = images;
            ViewPermissionsOption = viewPermissions;
            ExtendedOption = extended;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets IdSite
        /// </summary>
        [JsonPropertyName("idSite")]
        public int IdSite { get; set; }

        /// <summary>
        /// The access level of the requesting user.
        /// </summary>
        /// <value>The access level of the requesting user.</value>
        [JsonPropertyName("accessLevel")]
        public int AccessLevel { get; set; }

        /// <summary>
        /// True if the requesting user owns this installation.
        /// </summary>
        /// <value>True if the requesting user owns this installation.</value>
        [JsonPropertyName("owner")]
        public bool Owner { get; set; }

        /// <summary>
        /// True if the requesting user is an admin for this installation.
        /// </summary>
        /// <value>True if the requesting user is an admin for this installation.</value>
        [JsonPropertyName("is_admin")]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Installation identifier.
        /// </summary>
        /// <value>Installation identifier.</value>
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Installation owner id.
        /// </summary>
        /// <value>Installation owner id.</value>
        [JsonPropertyName("idUser")]
        public int IdUser { get; set; }

        /// <summary>
        /// Maximum PV for this installation.
        /// </summary>
        /// <value>Maximum PV for this installation.</value>
        [JsonPropertyName("pvMax")]
        public int PvMax { get; set; }

        /// <summary>
        /// Installation local timezone.
        /// </summary>
        /// <value>Installation local timezone.</value>
        [JsonPropertyName("timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// True if the geofence is enabled.
        /// </summary>
        /// <value>True if the geofence is enabled.</value>
        [JsonPropertyName("geofenceEnabled")]
        public bool GeofenceEnabled { get; set; }

        /// <summary>
        /// True if realtime updates are enabled.
        /// </summary>
        /// <value>True if realtime updates are enabled.</value>
        [JsonPropertyName("realtimeUpdates")]
        public bool RealtimeUpdates { get; set; }

        /// <summary>
        /// 1 if the installation has mains, else 0.
        /// </summary>
        /// <value>1 if the installation has mains, else 0.</value>
        [JsonPropertyName("hasMains")]
        public int HasMains { get; set; }

        /// <summary>
        /// 1 if the installation has a generator, else 0.
        /// </summary>
        /// <value>1 if the installation has a generator, else 0.</value>
        [JsonPropertyName("hasGenerator")]
        public int HasGenerator { get; set; }

        /// <summary>
        /// If alarms and warnings should be sent. When 0 nothing is sent out, when 1 only alarms and when 2 both alarms and warnings.
        /// </summary>
        /// <value>If alarms and warnings should be sent. When 0 nothing is sent out, when 1 only alarms and when 2 both alarms and warnings.</value>
        [JsonPropertyName("alarmMonitoring")]
        public int AlarmMonitoring { get; set; }

        /// <summary>
        /// 1 if an invalid token was used for logging, else 0.
        /// </summary>
        /// <value>1 if an invalid token was used for logging, else 0.</value>
        [JsonPropertyName("invalidVRMAuthTokenUsedInLogRequest")]
        public int InvalidVRMAuthTokenUsedInLogRequest { get; set; }

        /// <summary>
        /// Installation creation timestamp, UNIX format.
        /// </summary>
        /// <value>Installation creation timestamp, UNIX format.</value>
        [JsonPropertyName("syscreated")]
        public int Syscreated { get; set; }

        /// <summary>
        /// True if sitesharing is enabled.
        /// </summary>
        /// <value>True if sitesharing is enabled.</value>
        [JsonPropertyName("shared")]
        public bool Shared { get; set; }

        /// <summary>
        /// Installation icon.
        /// </summary>
        /// <value>Installation icon.</value>
        [JsonPropertyName("device_icon")]
        public string DeviceIcon { get; set; }

        /// <summary>
        /// Installation phone number.
        /// </summary>
        /// <value>Installation phone number.</value>
        [JsonPropertyName("phonenumber")]
        public string? Phonenumber { get; set; }

        /// <summary>
        /// Installation notes.
        /// </summary>
        /// <value>Installation notes.</value>
        [JsonPropertyName("notes")]
        public string? Notes { get; set; }

        /// <summary>
        /// Installation geofence, in json format.
        /// </summary>
        /// <value>Installation geofence, in json format.</value>
        [JsonPropertyName("geofence")]
        public string? Geofence { get; set; }

        /// <summary>
        /// How many seconds after no installation data is received the alarm should go off.
        /// </summary>
        /// <value>How many seconds after no installation data is received the alarm should go off.</value>
        [JsonPropertyName("noDataAlarmTimeout")]
        public int? NoDataAlarmTimeout { get; set; }

        /// <summary>
        /// Used to track the state of Alarm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AlarmOption { get; private set; }

        /// <summary>
        /// True if there is an active alarm.
        /// </summary>
        /// <value>True if there is an active alarm.</value>
        [JsonPropertyName("alarm")]
        public bool? Alarm { get { return this.AlarmOption; } set { this.AlarmOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LastTimestampOption { get; private set; }

        /// <summary>
        /// Timestamp of the most recently received data (UNIX format).
        /// </summary>
        /// <value>Timestamp of the most recently received data (UNIX format).</value>
        [JsonPropertyName("last_timestamp")]
        public int? LastTimestamp { get { return this.LastTimestampOption; } set { this.LastTimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrentTimeOption { get; private set; }

        /// <summary>
        /// Local time for the installation in 24h format (hh:mm).
        /// </summary>
        /// <value>Local time for the installation in 24h format (hh:mm).</value>
        [JsonPropertyName("current_time")]
        public string? CurrentTime { get { return this.CurrentTimeOption; } set { this.CurrentTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimezoneOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimezoneOffsetOption { get; private set; }

        /// <summary>
        /// How many seconds the installation is ahead of UTC.
        /// </summary>
        /// <value>How many seconds the installation is ahead of UTC.</value>
        [JsonPropertyName("timezone_offset")]
        public int? TimezoneOffset { get { return this.TimezoneOffsetOption; } set { this.TimezoneOffsetOption = new(value); } }

        /// <summary>
        /// Used to track the state of DemoMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DemoModeOption { get; private set; }

        /// <summary>
        /// True if the installation is in demo mode.
        /// </summary>
        /// <value>True if the installation is in demo mode.</value>
        [JsonPropertyName("demo_mode")]
        public bool? DemoMode { get { return this.DemoModeOption; } set { this.DemoModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of MqttWebhost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MqttWebhostOption { get; private set; }

        /// <summary>
        /// Installation MQTT webhost, as a URL.
        /// </summary>
        /// <value>Installation MQTT webhost, as a URL.</value>
        [JsonPropertyName("mqtt_webhost")]
        public string? MqttWebhost { get { return this.MqttWebhostOption; } set { this.MqttWebhostOption = new(value); } }

        /// <summary>
        /// Used to track the state of MqttHost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MqttHostOption { get; private set; }

        /// <summary>
        /// Installation MQTT host, as a URL.
        /// </summary>
        /// <value>Installation MQTT host, as a URL.</value>
        [JsonPropertyName("mqtt_host")]
        public string? MqttHost { get { return this.MqttHostOption; } set { this.MqttHostOption = new(value); } }

        /// <summary>
        /// Used to track the state of HighWorkload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HighWorkloadOption { get; private set; }

        /// <summary>
        /// True if the D-Bus round trip time is higher than the threshold.
        /// </summary>
        /// <value>True if the D-Bus round trip time is higher than the threshold.</value>
        [JsonPropertyName("high_workload")]
        public bool? HighWorkload { get { return this.HighWorkloadOption; } set { this.HighWorkloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentAlarms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> CurrentAlarmsOption { get; private set; }

        /// <summary>
        /// A list of the active alarms for this installation.
        /// </summary>
        /// <value>A list of the active alarms for this installation.</value>
        [JsonPropertyName("current_alarms")]
        public List<string>? CurrentAlarms { get { return this.CurrentAlarmsOption; } set { this.CurrentAlarmsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumAlarms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumAlarmsOption { get; private set; }

        /// <summary>
        /// The amount of active alarms.
        /// </summary>
        /// <value>The amount of active alarms.</value>
        [JsonPropertyName("num_alarms")]
        public int? NumAlarms { get { return this.NumAlarmsOption; } set { this.NumAlarmsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AvatarUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AvatarUrlOption { get; private set; }

        /// <summary>
        /// The url for this site&#39;s avatar.
        /// </summary>
        /// <value>The url for this site&#39;s avatar.</value>
        [JsonPropertyName("avatar_url")]
        public string? AvatarUrl { get { return this.AvatarUrlOption; } set { this.AvatarUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UsersIdUserInstallations200ResponseRecordsInnerTagsInner>?> TagsOption { get; private set; }

        /// <summary>
        /// Installation tags.
        /// </summary>
        /// <value>Installation tags.</value>
        [JsonPropertyName("tags")]
        public List<UsersIdUserInstallations200ResponseRecordsInnerTagsInner>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Images
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UsersIdUserInstallations200ResponseRecordsInnerImagesInner>?> ImagesOption { get; private set; }

        /// <summary>
        /// Installation images.
        /// </summary>
        /// <value>Installation images.</value>
        [JsonPropertyName("images")]
        public List<UsersIdUserInstallations200ResponseRecordsInnerImagesInner>? Images { get { return this.ImagesOption; } set { this.ImagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ViewPermissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UsersIdUserInstallations200ResponseRecordsInnerViewPermissions?> ViewPermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ViewPermissions
        /// </summary>
        [JsonPropertyName("view_permissions")]
        public UsersIdUserInstallations200ResponseRecordsInnerViewPermissions? ViewPermissions { get { return this.ViewPermissionsOption; } set { this.ViewPermissionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Extended
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UsersIdUserInstallations200ResponseRecordsInnerExtendedInner>?> ExtendedOption { get; private set; }

        /// <summary>
        /// Extended data about this installation.
        /// </summary>
        /// <value>Extended data about this installation.</value>
        [JsonPropertyName("extended")]
        public List<UsersIdUserInstallations200ResponseRecordsInnerExtendedInner>? Extended { get { return this.ExtendedOption; } set { this.ExtendedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsersIdUserInstallations200ResponseRecordsInner {\n");
            sb.Append("  IdSite: ").Append(IdSite).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  IdUser: ").Append(IdUser).Append("\n");
            sb.Append("  PvMax: ").Append(PvMax).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  GeofenceEnabled: ").Append(GeofenceEnabled).Append("\n");
            sb.Append("  RealtimeUpdates: ").Append(RealtimeUpdates).Append("\n");
            sb.Append("  HasMains: ").Append(HasMains).Append("\n");
            sb.Append("  HasGenerator: ").Append(HasGenerator).Append("\n");
            sb.Append("  AlarmMonitoring: ").Append(AlarmMonitoring).Append("\n");
            sb.Append("  InvalidVRMAuthTokenUsedInLogRequest: ").Append(InvalidVRMAuthTokenUsedInLogRequest).Append("\n");
            sb.Append("  Syscreated: ").Append(Syscreated).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  DeviceIcon: ").Append(DeviceIcon).Append("\n");
            sb.Append("  Phonenumber: ").Append(Phonenumber).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Geofence: ").Append(Geofence).Append("\n");
            sb.Append("  NoDataAlarmTimeout: ").Append(NoDataAlarmTimeout).Append("\n");
            sb.Append("  Alarm: ").Append(Alarm).Append("\n");
            sb.Append("  LastTimestamp: ").Append(LastTimestamp).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("  TimezoneOffset: ").Append(TimezoneOffset).Append("\n");
            sb.Append("  DemoMode: ").Append(DemoMode).Append("\n");
            sb.Append("  MqttWebhost: ").Append(MqttWebhost).Append("\n");
            sb.Append("  MqttHost: ").Append(MqttHost).Append("\n");
            sb.Append("  HighWorkload: ").Append(HighWorkload).Append("\n");
            sb.Append("  CurrentAlarms: ").Append(CurrentAlarms).Append("\n");
            sb.Append("  NumAlarms: ").Append(NumAlarms).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  ViewPermissions: ").Append(ViewPermissions).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UsersIdUserInstallations200ResponseRecordsInner" />
    /// </summary>
    public class UsersIdUserInstallations200ResponseRecordsInnerJsonConverter : JsonConverter<UsersIdUserInstallations200ResponseRecordsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="UsersIdUserInstallations200ResponseRecordsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UsersIdUserInstallations200ResponseRecordsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> idSite = default;
            Option<int?> accessLevel = default;
            Option<bool?> owner = default;
            Option<bool?> isAdmin = default;
            Option<string?> name = default;
            Option<string?> identifier = default;
            Option<int?> idUser = default;
            Option<int?> pvMax = default;
            Option<string?> timezone = default;
            Option<bool?> geofenceEnabled = default;
            Option<bool?> realtimeUpdates = default;
            Option<int?> hasMains = default;
            Option<int?> hasGenerator = default;
            Option<int?> alarmMonitoring = default;
            Option<int?> invalidVRMAuthTokenUsedInLogRequest = default;
            Option<int?> syscreated = default;
            Option<bool?> shared = default;
            Option<string?> deviceIcon = default;
            Option<string?> phonenumber = default;
            Option<string?> notes = default;
            Option<string?> geofence = default;
            Option<int?> noDataAlarmTimeout = default;
            Option<bool?> alarm = default;
            Option<int?> lastTimestamp = default;
            Option<string?> currentTime = default;
            Option<int?> timezoneOffset = default;
            Option<bool?> demoMode = default;
            Option<string?> mqttWebhost = default;
            Option<string?> mqttHost = default;
            Option<bool?> highWorkload = default;
            Option<List<string>?> currentAlarms = default;
            Option<int?> numAlarms = default;
            Option<string?> avatarUrl = default;
            Option<List<UsersIdUserInstallations200ResponseRecordsInnerTagsInner>?> tags = default;
            Option<List<UsersIdUserInstallations200ResponseRecordsInnerImagesInner>?> images = default;
            Option<UsersIdUserInstallations200ResponseRecordsInnerViewPermissions?> viewPermissions = default;
            Option<List<UsersIdUserInstallations200ResponseRecordsInnerExtendedInner>?> extended = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "idSite":
                            idSite = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "accessLevel":
                            accessLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "owner":
                            owner = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_admin":
                            isAdmin = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "identifier":
                            identifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idUser":
                            idUser = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pvMax":
                            pvMax = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "timezone":
                            timezone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "geofenceEnabled":
                            geofenceEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "realtimeUpdates":
                            realtimeUpdates = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "hasMains":
                            hasMains = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hasGenerator":
                            hasGenerator = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "alarmMonitoring":
                            alarmMonitoring = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "invalidVRMAuthTokenUsedInLogRequest":
                            invalidVRMAuthTokenUsedInLogRequest = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "syscreated":
                            syscreated = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "shared":
                            shared = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "device_icon":
                            deviceIcon = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phonenumber":
                            phonenumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "geofence":
                            geofence = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "noDataAlarmTimeout":
                            noDataAlarmTimeout = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "alarm":
                            alarm = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "last_timestamp":
                            lastTimestamp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "current_time":
                            currentTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timezone_offset":
                            timezoneOffset = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "demo_mode":
                            demoMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "mqtt_webhost":
                            mqttWebhost = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mqtt_host":
                            mqttHost = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "high_workload":
                            highWorkload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "current_alarms":
                            currentAlarms = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "num_alarms":
                            numAlarms = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "avatar_url":
                            avatarUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<List<UsersIdUserInstallations200ResponseRecordsInnerTagsInner>?>(JsonSerializer.Deserialize<List<UsersIdUserInstallations200ResponseRecordsInnerTagsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "images":
                            try
                            {
                                images = new Option<List<UsersIdUserInstallations200ResponseRecordsInnerImagesInner>?>(JsonSerializer.Deserialize<List<UsersIdUserInstallations200ResponseRecordsInnerImagesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            }
                            catch 
                            {
                                //images = null;
                            }
                            break;
                        case "view_permissions":
                            try
                            {
                                viewPermissions = new Option<UsersIdUserInstallations200ResponseRecordsInnerViewPermissions?>(JsonSerializer.Deserialize<UsersIdUserInstallations200ResponseRecordsInnerViewPermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            }
                            catch
                            {
                            }
                            break;
                        case "extended":
                            extended = new Option<List<UsersIdUserInstallations200ResponseRecordsInnerExtendedInner>?>(JsonSerializer.Deserialize<List<UsersIdUserInstallations200ResponseRecordsInnerExtendedInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!idSite.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(idSite));

            if (!accessLevel.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(accessLevel));

            if (!owner.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(owner));

            if (!isAdmin.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(isAdmin));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(name));

            if (!identifier.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(identifier));

            if (!idUser.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(idUser));

            if (!pvMax.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(pvMax));

            if (!timezone.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(timezone));

            if (!geofenceEnabled.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(geofenceEnabled));

            if (!realtimeUpdates.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(realtimeUpdates));

            if (!hasMains.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(hasMains));

            if (!hasGenerator.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(hasGenerator));

            if (!alarmMonitoring.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(alarmMonitoring));

            if (!invalidVRMAuthTokenUsedInLogRequest.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(invalidVRMAuthTokenUsedInLogRequest));

            if (!syscreated.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(syscreated));

            if (!shared.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(shared));

            if (!deviceIcon.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(deviceIcon));

            if (!phonenumber.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(phonenumber));

            if (!notes.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(notes));

            if (!geofence.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(geofence));

            if (!noDataAlarmTimeout.IsSet)
                throw new ArgumentException("Property is required for class UsersIdUserInstallations200ResponseRecordsInner.", nameof(noDataAlarmTimeout));

            if (idSite.IsSet && idSite.Value == null)
                throw new ArgumentNullException(nameof(idSite), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (accessLevel.IsSet && accessLevel.Value == null)
                throw new ArgumentNullException(nameof(accessLevel), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (owner.IsSet && owner.Value == null)
                throw new ArgumentNullException(nameof(owner), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (isAdmin.IsSet && isAdmin.Value == null)
                throw new ArgumentNullException(nameof(isAdmin), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (identifier.IsSet && identifier.Value == null)
                throw new ArgumentNullException(nameof(identifier), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (idUser.IsSet && idUser.Value == null)
                throw new ArgumentNullException(nameof(idUser), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (pvMax.IsSet && pvMax.Value == null)
                throw new ArgumentNullException(nameof(pvMax), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (timezone.IsSet && timezone.Value == null)
                throw new ArgumentNullException(nameof(timezone), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (geofenceEnabled.IsSet && geofenceEnabled.Value == null)
                throw new ArgumentNullException(nameof(geofenceEnabled), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (realtimeUpdates.IsSet && realtimeUpdates.Value == null)
                throw new ArgumentNullException(nameof(realtimeUpdates), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (hasMains.IsSet && hasMains.Value == null)
                throw new ArgumentNullException(nameof(hasMains), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (hasGenerator.IsSet && hasGenerator.Value == null)
                throw new ArgumentNullException(nameof(hasGenerator), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (alarmMonitoring.IsSet && alarmMonitoring.Value == null)
                throw new ArgumentNullException(nameof(alarmMonitoring), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (invalidVRMAuthTokenUsedInLogRequest.IsSet && invalidVRMAuthTokenUsedInLogRequest.Value == null)
                throw new ArgumentNullException(nameof(invalidVRMAuthTokenUsedInLogRequest), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (syscreated.IsSet && syscreated.Value == null)
                throw new ArgumentNullException(nameof(syscreated), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (shared.IsSet && shared.Value == null)
                throw new ArgumentNullException(nameof(shared), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (deviceIcon.IsSet && deviceIcon.Value == null)
                throw new ArgumentNullException(nameof(deviceIcon), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (alarm.IsSet && alarm.Value == null)
                throw new ArgumentNullException(nameof(alarm), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (lastTimestamp.IsSet && lastTimestamp.Value == null)
                throw new ArgumentNullException(nameof(lastTimestamp), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (currentTime.IsSet && currentTime.Value == null)
                throw new ArgumentNullException(nameof(currentTime), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (timezoneOffset.IsSet && timezoneOffset.Value == null)
                throw new ArgumentNullException(nameof(timezoneOffset), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (demoMode.IsSet && demoMode.Value == null)
                throw new ArgumentNullException(nameof(demoMode), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (mqttWebhost.IsSet && mqttWebhost.Value == null)
                throw new ArgumentNullException(nameof(mqttWebhost), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (mqttHost.IsSet && mqttHost.Value == null)
                throw new ArgumentNullException(nameof(mqttHost), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (highWorkload.IsSet && highWorkload.Value == null)
                throw new ArgumentNullException(nameof(highWorkload), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (currentAlarms.IsSet && currentAlarms.Value == null)
                throw new ArgumentNullException(nameof(currentAlarms), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (numAlarms.IsSet && numAlarms.Value == null)
                throw new ArgumentNullException(nameof(numAlarms), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (images.IsSet && images.Value == null)
                throw new ArgumentNullException(nameof(images), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (viewPermissions.IsSet && viewPermissions.Value == null)
                throw new ArgumentNullException(nameof(viewPermissions), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (extended.IsSet && extended.Value == null)
                throw new ArgumentNullException(nameof(extended), "Property is not nullable for class UsersIdUserInstallations200ResponseRecordsInner.");

            return new UsersIdUserInstallations200ResponseRecordsInner(idSite.Value!.Value!, accessLevel.Value!.Value!, owner.Value!.Value!, isAdmin.Value!.Value!, name.Value!, identifier.Value!, idUser.Value!.Value!, pvMax.Value!.Value!, timezone.Value!, geofenceEnabled.Value!.Value!, realtimeUpdates.Value!.Value!, hasMains.Value!.Value!, hasGenerator.Value!.Value!, alarmMonitoring.Value!.Value!, invalidVRMAuthTokenUsedInLogRequest.Value!.Value!, syscreated.Value!.Value!, shared.Value!.Value!, deviceIcon.Value!, phonenumber.Value!, notes.Value!, geofence.Value!, noDataAlarmTimeout.Value!, alarm, lastTimestamp, currentTime, timezoneOffset, demoMode, mqttWebhost, mqttHost, highWorkload, currentAlarms, numAlarms, avatarUrl, tags, images, viewPermissions, extended);
        }

        /// <summary>
        /// Serializes a <see cref="UsersIdUserInstallations200ResponseRecordsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usersIdUserInstallations200ResponseRecordsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UsersIdUserInstallations200ResponseRecordsInner usersIdUserInstallations200ResponseRecordsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, usersIdUserInstallations200ResponseRecordsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UsersIdUserInstallations200ResponseRecordsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usersIdUserInstallations200ResponseRecordsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UsersIdUserInstallations200ResponseRecordsInner usersIdUserInstallations200ResponseRecordsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (usersIdUserInstallations200ResponseRecordsInner.Name == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.Name), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.Identifier == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.Identifier), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.Timezone == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.Timezone), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.DeviceIcon == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.DeviceIcon), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.CurrentTimeOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.CurrentTime == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.CurrentTime), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.MqttWebhostOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.MqttWebhost == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.MqttWebhost), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.MqttHostOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.MqttHost == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.MqttHost), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.CurrentAlarmsOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.CurrentAlarms == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.CurrentAlarms), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.TagsOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.Tags == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.Tags), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.ImagesOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.Images == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.Images), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.ViewPermissionsOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.ViewPermissions == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.ViewPermissions), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            if (usersIdUserInstallations200ResponseRecordsInner.ExtendedOption.IsSet && usersIdUserInstallations200ResponseRecordsInner.Extended == null)
                throw new ArgumentNullException(nameof(usersIdUserInstallations200ResponseRecordsInner.Extended), "Property is required for class UsersIdUserInstallations200ResponseRecordsInner.");

            writer.WriteNumber("idSite", usersIdUserInstallations200ResponseRecordsInner.IdSite);

            writer.WriteNumber("accessLevel", usersIdUserInstallations200ResponseRecordsInner.AccessLevel);

            writer.WriteBoolean("owner", usersIdUserInstallations200ResponseRecordsInner.Owner);

            writer.WriteBoolean("is_admin", usersIdUserInstallations200ResponseRecordsInner.IsAdmin);

            writer.WriteString("name", usersIdUserInstallations200ResponseRecordsInner.Name);

            writer.WriteString("identifier", usersIdUserInstallations200ResponseRecordsInner.Identifier);

            writer.WriteNumber("idUser", usersIdUserInstallations200ResponseRecordsInner.IdUser);

            writer.WriteNumber("pvMax", usersIdUserInstallations200ResponseRecordsInner.PvMax);

            writer.WriteString("timezone", usersIdUserInstallations200ResponseRecordsInner.Timezone);

            writer.WriteBoolean("geofenceEnabled", usersIdUserInstallations200ResponseRecordsInner.GeofenceEnabled);

            writer.WriteBoolean("realtimeUpdates", usersIdUserInstallations200ResponseRecordsInner.RealtimeUpdates);

            writer.WriteNumber("hasMains", usersIdUserInstallations200ResponseRecordsInner.HasMains);

            writer.WriteNumber("hasGenerator", usersIdUserInstallations200ResponseRecordsInner.HasGenerator);

            writer.WriteNumber("alarmMonitoring", usersIdUserInstallations200ResponseRecordsInner.AlarmMonitoring);

            writer.WriteNumber("invalidVRMAuthTokenUsedInLogRequest", usersIdUserInstallations200ResponseRecordsInner.InvalidVRMAuthTokenUsedInLogRequest);

            writer.WriteNumber("syscreated", usersIdUserInstallations200ResponseRecordsInner.Syscreated);

            writer.WriteBoolean("shared", usersIdUserInstallations200ResponseRecordsInner.Shared);

            writer.WriteString("device_icon", usersIdUserInstallations200ResponseRecordsInner.DeviceIcon);

            if (usersIdUserInstallations200ResponseRecordsInner.Phonenumber != null)
                writer.WriteString("phonenumber", usersIdUserInstallations200ResponseRecordsInner.Phonenumber);
            else
                writer.WriteNull("phonenumber");

            if (usersIdUserInstallations200ResponseRecordsInner.Notes != null)
                writer.WriteString("notes", usersIdUserInstallations200ResponseRecordsInner.Notes);
            else
                writer.WriteNull("notes");

            if (usersIdUserInstallations200ResponseRecordsInner.Geofence != null)
                writer.WriteString("geofence", usersIdUserInstallations200ResponseRecordsInner.Geofence);
            else
                writer.WriteNull("geofence");

            if (usersIdUserInstallations200ResponseRecordsInner.NoDataAlarmTimeout != null)
                writer.WriteNumber("noDataAlarmTimeout", usersIdUserInstallations200ResponseRecordsInner.NoDataAlarmTimeout.Value);
            else
                writer.WriteNull("noDataAlarmTimeout");

            if (usersIdUserInstallations200ResponseRecordsInner.AlarmOption.IsSet)
                writer.WriteBoolean("alarm", usersIdUserInstallations200ResponseRecordsInner.AlarmOption.Value!.Value);

            if (usersIdUserInstallations200ResponseRecordsInner.LastTimestampOption.IsSet)
                writer.WriteNumber("last_timestamp", usersIdUserInstallations200ResponseRecordsInner.LastTimestampOption.Value!.Value);

            if (usersIdUserInstallations200ResponseRecordsInner.CurrentTimeOption.IsSet)
                writer.WriteString("current_time", usersIdUserInstallations200ResponseRecordsInner.CurrentTime);

            if (usersIdUserInstallations200ResponseRecordsInner.TimezoneOffsetOption.IsSet)
                writer.WriteNumber("timezone_offset", usersIdUserInstallations200ResponseRecordsInner.TimezoneOffsetOption.Value!.Value);

            if (usersIdUserInstallations200ResponseRecordsInner.DemoModeOption.IsSet)
                writer.WriteBoolean("demo_mode", usersIdUserInstallations200ResponseRecordsInner.DemoModeOption.Value!.Value);

            if (usersIdUserInstallations200ResponseRecordsInner.MqttWebhostOption.IsSet)
                writer.WriteString("mqtt_webhost", usersIdUserInstallations200ResponseRecordsInner.MqttWebhost);

            if (usersIdUserInstallations200ResponseRecordsInner.MqttHostOption.IsSet)
                writer.WriteString("mqtt_host", usersIdUserInstallations200ResponseRecordsInner.MqttHost);

            if (usersIdUserInstallations200ResponseRecordsInner.HighWorkloadOption.IsSet)
                writer.WriteBoolean("high_workload", usersIdUserInstallations200ResponseRecordsInner.HighWorkloadOption.Value!.Value);

            if (usersIdUserInstallations200ResponseRecordsInner.CurrentAlarmsOption.IsSet)
            {
                writer.WritePropertyName("current_alarms");
                JsonSerializer.Serialize(writer, usersIdUserInstallations200ResponseRecordsInner.CurrentAlarms, jsonSerializerOptions);
            }
            if (usersIdUserInstallations200ResponseRecordsInner.NumAlarmsOption.IsSet)
                writer.WriteNumber("num_alarms", usersIdUserInstallations200ResponseRecordsInner.NumAlarmsOption.Value!.Value);

            if (usersIdUserInstallations200ResponseRecordsInner.AvatarUrlOption.IsSet)
                if (usersIdUserInstallations200ResponseRecordsInner.AvatarUrlOption.Value != null)
                    writer.WriteString("avatar_url", usersIdUserInstallations200ResponseRecordsInner.AvatarUrl);
                else
                    writer.WriteNull("avatar_url");

            if (usersIdUserInstallations200ResponseRecordsInner.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, usersIdUserInstallations200ResponseRecordsInner.Tags, jsonSerializerOptions);
            }
            if (usersIdUserInstallations200ResponseRecordsInner.ImagesOption.IsSet)
            {
                writer.WritePropertyName("images");
                JsonSerializer.Serialize(writer, usersIdUserInstallations200ResponseRecordsInner.Images, jsonSerializerOptions);
            }
            if (usersIdUserInstallations200ResponseRecordsInner.ViewPermissionsOption.IsSet)
            {
                writer.WritePropertyName("view_permissions");
                JsonSerializer.Serialize(writer, usersIdUserInstallations200ResponseRecordsInner.ViewPermissions, jsonSerializerOptions);
            }
            if (usersIdUserInstallations200ResponseRecordsInner.ExtendedOption.IsSet)
            {
                writer.WritePropertyName("extended");
                JsonSerializer.Serialize(writer, usersIdUserInstallations200ResponseRecordsInner.Extended, jsonSerializerOptions);
            }
        }
    }
}
