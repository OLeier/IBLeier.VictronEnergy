// <auto-generated>
/*
 * VRM API
 *
 * ## Introduction This document provides a brief overview of some of the available endpoints and their parameters. The API is a REST API, accepting JSON as request body. You can use the try-it tool to play around with it, or use software like Postman.  ## Authentication Most endpoints require authentication, using a JWT token. This token should be placed in the `x-authorization` field in the HTTP header. There are two types of tokens. - Bearer token. Uses the `Bearer <token_value>` format. This is used when logging in to VRM, for example. Can be retrieved from [/auth/login](/operations/auth/login) or [/auth/loginAsDemo](/operations/auth/loginAsDemo). - Access token. Uses the `Token <token_value>` format. This is commonly used for third party applications using the VRM API. Can be created using [/users/{idUser}/accesstokens/create](/operations/users/idUser/accesstokens/create).  ## Rate limiting Most endpoints are by default rate limited with a rolling window of max 200 requests, where every 0.33 seconds a request gets removed from the rolling window. (so on average maximum of 3 requests per second won't get rate limited). There are different types of ratelimiting in VRM. If you receive a 429 with a JSON response, you can check the Retry-After response header to check the amount of seconds you have to wait until retrying.  ## WARNING & DISCLAIMER Whilst publicly available, Victron Energy does not offer support to professional customers or end-users that implement features using the here documented functionality, except in really specific situations (i.e such as a special arrangement with a large OEM customer).  The recommended method for support on the VRM API is to use the Modifications section on Victron Community. This space is frequently visited by many people using the API, and other methods of integrating with Victron products. Direct company support is only offered on a limited basis via your Victron representative.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UsersIdUserSearch200ResponseResults
    /// </summary>
    public partial class UsersIdUserSearch200ResponseResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersIdUserSearch200ResponseResults" /> class.
        /// </summary>
        /// <param name="siteId">installation id</param>
        /// <param name="siteIdentifier">site identifier</param>
        /// <param name="siteName">name of the site</param>
        /// <param name="avatarUrl">avatar_url</param>
        /// <param name="highlight">terms where the searched term is found with highlights</param>
        [JsonConstructor]
        public UsersIdUserSearch200ResponseResults(Option<int?> siteId = default, Option<string?> siteIdentifier = default, Option<string?> siteName = default, Option<string?> avatarUrl = default, Option<List<Object>?> highlight = default)
        {
            SiteIdOption = siteId;
            SiteIdentifierOption = siteIdentifier;
            SiteNameOption = siteName;
            AvatarUrlOption = avatarUrl;
            HighlightOption = highlight;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SiteIdOption { get; private set; }

        /// <summary>
        /// installation id
        /// </summary>
        /// <value>installation id</value>
        /* <example>1</example> */
        [JsonPropertyName("site_id")]
        public int? SiteId { get { return this.SiteIdOption; } set { this.SiteIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteIdentifierOption { get; private set; }

        /// <summary>
        /// site identifier
        /// </summary>
        /// <value>site identifier</value>
        /* <example>abcdef1234</example> */
        [JsonPropertyName("site_identifier")]
        public string? SiteIdentifier { get { return this.SiteIdentifierOption; } set { this.SiteIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteNameOption { get; private set; }

        /// <summary>
        /// name of the site
        /// </summary>
        /// <value>name of the site</value>
        /* <example>foobar</example> */
        [JsonPropertyName("site_name")]
        public string? SiteName { get { return this.SiteNameOption; } set { this.SiteNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of AvatarUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AvatarUrlOption { get; private set; }

        /// <summary>
        /// avatar_url
        /// </summary>
        /// <value>avatar_url</value>
        [JsonPropertyName("avatar_url")]
        public string? AvatarUrl { get { return this.AvatarUrlOption; } set { this.AvatarUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Highlight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> HighlightOption { get; private set; }

        /// <summary>
        /// terms where the searched term is found with highlights
        /// </summary>
        /// <value>terms where the searched term is found with highlights</value>
        /* <example>{&quot;site_name&quot;:[&quot;&lt;em&gt;foo&lt;/em&gt;bar&quot;]}</example> */
        [JsonPropertyName("highlight")]
        public List<Object>? Highlight { get { return this.HighlightOption; } set { this.HighlightOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsersIdUserSearch200ResponseResults {\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  SiteIdentifier: ").Append(SiteIdentifier).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  Highlight: ").Append(Highlight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UsersIdUserSearch200ResponseResults" />
    /// </summary>
    public class UsersIdUserSearch200ResponseResultsJsonConverter : JsonConverter<UsersIdUserSearch200ResponseResults>
    {
        /// <summary>
        /// Deserializes json to <see cref="UsersIdUserSearch200ResponseResults" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UsersIdUserSearch200ResponseResults Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> siteId = default;
            Option<string?> siteIdentifier = default;
            Option<string?> siteName = default;
            Option<string?> avatarUrl = default;
            Option<List<Object>?> highlight = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "site_id":
                            siteId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "site_identifier":
                            siteIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "site_name":
                            siteName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "avatar_url":
                            avatarUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "highlight":
                            highlight = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class UsersIdUserSearch200ResponseResults.");

            if (siteIdentifier.IsSet && siteIdentifier.Value == null)
                throw new ArgumentNullException(nameof(siteIdentifier), "Property is not nullable for class UsersIdUserSearch200ResponseResults.");

            if (siteName.IsSet && siteName.Value == null)
                throw new ArgumentNullException(nameof(siteName), "Property is not nullable for class UsersIdUserSearch200ResponseResults.");

            if (avatarUrl.IsSet && avatarUrl.Value == null)
                throw new ArgumentNullException(nameof(avatarUrl), "Property is not nullable for class UsersIdUserSearch200ResponseResults.");

            if (highlight.IsSet && highlight.Value == null)
                throw new ArgumentNullException(nameof(highlight), "Property is not nullable for class UsersIdUserSearch200ResponseResults.");

            return new UsersIdUserSearch200ResponseResults(siteId, siteIdentifier, siteName, avatarUrl, highlight);
        }

        /// <summary>
        /// Serializes a <see cref="UsersIdUserSearch200ResponseResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usersIdUserSearch200ResponseResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UsersIdUserSearch200ResponseResults usersIdUserSearch200ResponseResults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, usersIdUserSearch200ResponseResults, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UsersIdUserSearch200ResponseResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usersIdUserSearch200ResponseResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UsersIdUserSearch200ResponseResults usersIdUserSearch200ResponseResults, JsonSerializerOptions jsonSerializerOptions)
        {
            if (usersIdUserSearch200ResponseResults.SiteIdentifierOption.IsSet && usersIdUserSearch200ResponseResults.SiteIdentifier == null)
                throw new ArgumentNullException(nameof(usersIdUserSearch200ResponseResults.SiteIdentifier), "Property is required for class UsersIdUserSearch200ResponseResults.");

            if (usersIdUserSearch200ResponseResults.SiteNameOption.IsSet && usersIdUserSearch200ResponseResults.SiteName == null)
                throw new ArgumentNullException(nameof(usersIdUserSearch200ResponseResults.SiteName), "Property is required for class UsersIdUserSearch200ResponseResults.");

            if (usersIdUserSearch200ResponseResults.AvatarUrlOption.IsSet && usersIdUserSearch200ResponseResults.AvatarUrl == null)
                throw new ArgumentNullException(nameof(usersIdUserSearch200ResponseResults.AvatarUrl), "Property is required for class UsersIdUserSearch200ResponseResults.");

            if (usersIdUserSearch200ResponseResults.HighlightOption.IsSet && usersIdUserSearch200ResponseResults.Highlight == null)
                throw new ArgumentNullException(nameof(usersIdUserSearch200ResponseResults.Highlight), "Property is required for class UsersIdUserSearch200ResponseResults.");

            if (usersIdUserSearch200ResponseResults.SiteIdOption.IsSet)
                writer.WriteNumber("site_id", usersIdUserSearch200ResponseResults.SiteIdOption.Value!.Value);

            if (usersIdUserSearch200ResponseResults.SiteIdentifierOption.IsSet)
                writer.WriteString("site_identifier", usersIdUserSearch200ResponseResults.SiteIdentifier);

            if (usersIdUserSearch200ResponseResults.SiteNameOption.IsSet)
                writer.WriteString("site_name", usersIdUserSearch200ResponseResults.SiteName);

            if (usersIdUserSearch200ResponseResults.AvatarUrlOption.IsSet)
                writer.WriteString("avatar_url", usersIdUserSearch200ResponseResults.AvatarUrl);

            if (usersIdUserSearch200ResponseResults.HighlightOption.IsSet)
            {
                writer.WritePropertyName("highlight");
                JsonSerializer.Serialize(writer, usersIdUserSearch200ResponseResults.Highlight, jsonSerializerOptions);
            }
        }
    }
}
