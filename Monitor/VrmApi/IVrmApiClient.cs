// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Monitor.VrmApi
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Victron Remote Management API.
    /// </summary>
    public partial interface IVrmApiClient : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// Returns a token.
        /// </summary>
        /// X-Authorization: Bearer {token}.
        /// <param name='credential'>
        /// The credential for login
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LoginOKResponse>> LoginWithHttpMessagesAsync(Credential credential, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Will blacklist the token at the server side for further use.
        /// </summary>
        /// X-Authorization: Bearer {token}.
        /// <param name='xAuthorization'>
        /// X-Authorization: Bearer {token}.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> LogoutWithHttpMessagesAsync(string xAuthorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all installations/sites of a given user.
        /// </summary>
        /// (Restricted) admins can retrieve installations of all users,
        /// dealers can only retrieve installations for the users that are
        /// linked to them, normal users can only retrieve their own
        /// installations/sites.
        /// <param name='xAuthorization'>
        /// X-Authorization: Bearer {token}.
        /// </param>
        /// <param name='idUser'>
        /// The id of the user.
        /// </param>
        /// <param name='extended'>
        /// for extended values
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InstallationsOKResponse>> InstallationsWithHttpMessagesAsync(string xAuthorization, int idUser, int? extended = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve connected devices (e.g. to get device instance).
        /// </summary>
        /// Retrieve connected devices (e.g. to get device instance).
        /// <param name='xAuthorization'>
        /// X-Authorization: Bearer {token}.
        /// </param>
        /// <param name='idSite'>
        /// The id of the site.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SystemOverviewOKResponse>> SystemOverviewWithHttpMessagesAsync(string xAuthorization, int idSite, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Summary data.
        /// </summary>
        /// Returns latest recorded values for the Solar Charger Summary for
        /// for instance 255.
        /// <param name='xAuthorization'>
        /// X-Authorization: Bearer {token}.
        /// </param>
        /// <param name='idSite'>
        /// The id of the site.
        /// </param>
        /// <param name='instance'>
        /// The id of the instance.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SolarChargerSummaryOKResponse>> SolarChargerSummaryWithHttpMessagesAsync(string xAuthorization, int idSite, int instance, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
