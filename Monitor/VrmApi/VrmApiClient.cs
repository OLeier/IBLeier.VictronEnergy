// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Monitor.VrmApi
{
	using IBLeier.VictronEnergy.Monitor;
	using Microsoft.Rest;
	using Microsoft.Rest.Serialization;
	using Models;
	using Newtonsoft.Json;
	using System;
	using System.Collections.Generic;
	using System.Net;
	using System.Net.Http;
	using System.Net.Http.Headers;
	using System.Text;
	using System.Threading;
	using System.Threading.Tasks;

	/// <summary>
	/// Victron Remote Management API.
	/// </summary>
	public partial class VrmApiClient : ServiceClient<VrmApiClient>, IVrmApiClient
	{
		/// <summary>
		/// The base URI of the service.
		/// </summary>
		public Uri BaseUri { get; set; }

		/// <summary>
		/// Gets or sets json serialization settings.
		/// </summary>
		public JsonSerializerSettings SerializationSettings { get; private set; }

		/// <summary>
		/// Gets or sets json deserialization settings.
		/// </summary>
		public JsonSerializerSettings DeserializationSettings { get; private set; }

		/// <summary>
		/// Subscription credentials which uniquely identify client subscription.
		/// </summary>
		public ServiceClientCredentials Credentials { get; private set; }

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected VrmApiClient(params DelegatingHandler[] handlers) : base(handlers)
		{
			this.Initialize();
		}

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected VrmApiClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
		{
			this.Initialize();
		}

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected VrmApiClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException("baseUri");
			}
			this.BaseUri = baseUri;
		}

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected VrmApiClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException("baseUri");
			}
			this.BaseUri = baseUri;
		}

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public VrmApiClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
		{
			if (credentials == null)
			{
				throw new ArgumentNullException("credentials");
			}
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient(this);
			}
		}

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public VrmApiClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
		{
			if (credentials == null)
			{
				throw new ArgumentNullException("credentials");
			}
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient(this);
			}
		}

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public VrmApiClient(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException("baseUri");
			}
			if (credentials == null)
			{
				throw new ArgumentNullException("credentials");
			}
			this.BaseUri = baseUri;
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient(this);
			}
		}

		/// <summary>
		/// Initializes a new instance of the VrmApiClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public VrmApiClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException("baseUri");
			}
			if (credentials == null)
			{
				throw new ArgumentNullException("credentials");
			}
			this.BaseUri = baseUri;
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient(this);
			}
		}

		/// <summary>
		/// An optional partial-method to perform custom initialization.
		///</summary> 
		partial void CustomInitialize();
		/// <summary>
		/// Initializes client properties.
		/// </summary>
		private void Initialize()
		{
			this.BaseUri = new Uri("https://vrmapi.victronenergy.com/v2");
			SerializationSettings = new JsonSerializerSettings
			{
				Formatting = Formatting.Indented,
				DateFormatHandling = DateFormatHandling.IsoDateFormat,
				DateTimeZoneHandling = DateTimeZoneHandling.Utc,
				NullValueHandling = NullValueHandling.Ignore,
				ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
				ContractResolver = new ReadOnlyJsonContractResolver(),
				Converters = new List<JsonConverter>
					{
						new Iso8601TimeSpanConverter()
					}
			};
			DeserializationSettings = new JsonSerializerSettings
			{
				DateFormatHandling = DateFormatHandling.IsoDateFormat,
				DateTimeZoneHandling = DateTimeZoneHandling.Utc,
				NullValueHandling = NullValueHandling.Ignore,
				ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
				ContractResolver = new ReadOnlyJsonContractResolver(),
				Converters = new List<JsonConverter>
					{
						new Iso8601TimeSpanConverter()
					}
			};
			CustomInitialize();
		}
		/// <summary>
		/// Returns a token.
		/// </summary>
		/// X-Authorization: Bearer {token}.
		/// <param name='credential'>
		/// The credential for login
		/// </param>
		/// <param name='customHeaders'>
		/// Headers that will be added to request.
		/// </param>
		/// <param name='cancellationToken'>
		/// The cancellation token.
		/// </param>
		/// <return>
		/// A response object containing the response body and response headers.
		/// </return>
		public async Task<HttpOperationResponse<LoginOKResponse>> LoginWithHttpMessagesAsync(Credential credential, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (credential == null)
			{
				throw new ValidationException(ValidationRules.CannotBeNull, "credential");
			}
			// Tracing
			bool _shouldTrace = ServiceClientTracing.IsEnabled;
			string _invocationId = null;
			if (_shouldTrace)
			{
				_invocationId = ServiceClientTracing.NextInvocationId.ToString();
				Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
				tracingParameters.Add("credential", credential);
				tracingParameters.Add("cancellationToken", cancellationToken);
				ServiceClientTracing.Enter(_invocationId, this, "Login", tracingParameters);
			}
			// Construct URL
			var _baseUrl = this.BaseUri.AbsoluteUri;
			var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "auth/login").ToString();
			// Create HTTP transport objects
			HttpRequestMessage _httpRequest = new HttpRequestMessage();
			HttpResponseMessage _httpResponse = null;
			_httpRequest.Method = new HttpMethod("POST");
			_httpRequest.RequestUri = new Uri(_url);
			// Set Headers
			if (customHeaders != null)
			{
				foreach (var _header in customHeaders)
				{
					if (_httpRequest.Headers.Contains(_header.Key))
					{
						_httpRequest.Headers.Remove(_header.Key);
					}
					_httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
				}
			}

			// Serialize Request
			string _requestContent = null;
			if (credential != null)
			{
				_requestContent = SafeJsonConvert.SerializeObject(credential, this.SerializationSettings);
				_httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
				_httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
			}
			// Set Credentials
			if (this.Credentials != null)
			{
				cancellationToken.ThrowIfCancellationRequested();
				await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			}
			// Send Request
			if (_shouldTrace)
			{
				ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
			}
			cancellationToken.ThrowIfCancellationRequested();
			_httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			if (_shouldTrace)
			{
				ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
			}
			HttpStatusCode _statusCode = _httpResponse.StatusCode;
			cancellationToken.ThrowIfCancellationRequested();
			string _responseContent = null;
			if ((int)_statusCode != 200)
			{
				var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
				ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
				if (_shouldTrace)
				{
					ServiceClientTracing.Error(_invocationId, ex);
				}
				_httpRequest.Dispose();
				if (_httpResponse != null)
				{
					_httpResponse.Dispose();
				}
				throw ex;
			}
			// Create Result
			var _result = new HttpOperationResponse<LoginOKResponse>();
			_result.Request = _httpRequest;
			_result.Response = _httpResponse;
			// Deserialize Response
			if ((int)_statusCode == 200)
			{
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					_result.Body = SafeJsonConvert.DeserializeObject<LoginOKResponse>(_responseContent, this.DeserializationSettings);
				}
				catch (JsonException ex)
				{
					_httpRequest.Dispose();
					if (_httpResponse != null)
					{
						_httpResponse.Dispose();
					}
					Logging.Log("VrmApiClient_LoginWithHttpMessagesAsync-JsonException", _responseContent);
					throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
				}
			}
			if (_shouldTrace)
			{
				ServiceClientTracing.Exit(_invocationId, _result);
			}
			return _result;
		}

		/// <summary>
		/// Will blacklist the token at the server side for further use.
		/// </summary>
		/// X-Authorization: Bearer {token}.
		/// <param name='xAuthorization'>
		/// X-Authorization: Bearer {token}.
		/// </param>
		/// <param name='customHeaders'>
		/// Headers that will be added to request.
		/// </param>
		/// <param name='cancellationToken'>
		/// The cancellation token.
		/// </param>
		/// <return>
		/// A response object containing the response body and response headers.
		/// </return>
		public async Task<HttpOperationResponse> LogoutWithHttpMessagesAsync(string xAuthorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (xAuthorization == null)
			{
				throw new ValidationException(ValidationRules.CannotBeNull, "xAuthorization");
			}
			// Tracing
			bool _shouldTrace = ServiceClientTracing.IsEnabled;
			string _invocationId = null;
			if (_shouldTrace)
			{
				_invocationId = ServiceClientTracing.NextInvocationId.ToString();
				Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
				tracingParameters.Add("xAuthorization", xAuthorization);
				tracingParameters.Add("cancellationToken", cancellationToken);
				ServiceClientTracing.Enter(_invocationId, this, "Logout", tracingParameters);
			}
			// Construct URL
			var _baseUrl = this.BaseUri.AbsoluteUri;
			var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "auth/logout").ToString();
			// Create HTTP transport objects
			HttpRequestMessage _httpRequest = new HttpRequestMessage();
			HttpResponseMessage _httpResponse = null;
			_httpRequest.Method = new HttpMethod("POST");
			_httpRequest.RequestUri = new Uri(_url);
			// Set Headers
			if (xAuthorization != null)
			{
				if (_httpRequest.Headers.Contains("X-Authorization"))
				{
					_httpRequest.Headers.Remove("X-Authorization");
				}
				_httpRequest.Headers.TryAddWithoutValidation("X-Authorization", xAuthorization);
			}
			if (customHeaders != null)
			{
				foreach (var _header in customHeaders)
				{
					if (_httpRequest.Headers.Contains(_header.Key))
					{
						_httpRequest.Headers.Remove(_header.Key);
					}
					_httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
				}
			}

			// Serialize Request
			string _requestContent = null;
			// Set Credentials
			if (this.Credentials != null)
			{
				cancellationToken.ThrowIfCancellationRequested();
				await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			}
			// Send Request
			if (_shouldTrace)
			{
				ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
			}
			cancellationToken.ThrowIfCancellationRequested();
			_httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			if (_shouldTrace)
			{
				ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
			}
			HttpStatusCode _statusCode = _httpResponse.StatusCode;
			cancellationToken.ThrowIfCancellationRequested();
			string _responseContent = null;
			if ((int)_statusCode != 200)
			{
				var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
				ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
				if (_shouldTrace)
				{
					ServiceClientTracing.Error(_invocationId, ex);
				}
				_httpRequest.Dispose();
				if (_httpResponse != null)
				{
					_httpResponse.Dispose();
				}
				throw ex;
			}
			// Create Result
			var _result = new HttpOperationResponse();
			_result.Request = _httpRequest;
			_result.Response = _httpResponse;
			if (_shouldTrace)
			{
				ServiceClientTracing.Exit(_invocationId, _result);
			}
			return _result;
		}

		/// <summary>
		/// Get all installations/sites of a given user.
		/// </summary>
		/// (Restricted) admins can retrieve installations of all users, dealers can
		/// only retrieve installations for the users that are linked to them, normal
		/// users can only retrieve their own installations/sites.
		/// <param name='xAuthorization'>
		/// X-Authorization: Bearer {token}.
		/// </param>
		/// <param name='idUser'>
		/// The id of the user.
		/// </param>
		/// <param name='extended'>
		/// for extended values
		/// </param>
		/// <param name='customHeaders'>
		/// Headers that will be added to request.
		/// </param>
		/// <param name='cancellationToken'>
		/// The cancellation token.
		/// </param>
		/// <return>
		/// A response object containing the response body and response headers.
		/// </return>
		public async Task<HttpOperationResponse<InstallationsOKResponse>> InstallationsWithHttpMessagesAsync(string xAuthorization, int idUser, int? extended = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (xAuthorization == null)
			{
				throw new ValidationException(ValidationRules.CannotBeNull, "xAuthorization");
			}
			// Tracing
			bool _shouldTrace = ServiceClientTracing.IsEnabled;
			string _invocationId = null;
			if (_shouldTrace)
			{
				_invocationId = ServiceClientTracing.NextInvocationId.ToString();
				Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
				tracingParameters.Add("xAuthorization", xAuthorization);
				tracingParameters.Add("idUser", idUser);
				tracingParameters.Add("extended", extended);
				tracingParameters.Add("cancellationToken", cancellationToken);
				ServiceClientTracing.Enter(_invocationId, this, "Installations", tracingParameters);
			}
			// Construct URL
			var _baseUrl = this.BaseUri.AbsoluteUri;
			var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "users/{idUser}/installations").ToString();
			_url = _url.Replace("{idUser}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(idUser, this.SerializationSettings).Trim('"')));
			List<string> _queryParameters = new List<string>();
			if (extended != null)
			{
				_queryParameters.Add(string.Format("extended={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(extended, this.SerializationSettings).Trim('"'))));
			}
			if (_queryParameters.Count > 0)
			{
				_url += "?" + string.Join("&", _queryParameters);
			}
			// Create HTTP transport objects
			HttpRequestMessage _httpRequest = new HttpRequestMessage();
			HttpResponseMessage _httpResponse = null;
			_httpRequest.Method = new HttpMethod("GET");
			_httpRequest.RequestUri = new Uri(_url);
			// Set Headers
			if (xAuthorization != null)
			{
				if (_httpRequest.Headers.Contains("X-Authorization"))
				{
					_httpRequest.Headers.Remove("X-Authorization");
				}
				_httpRequest.Headers.TryAddWithoutValidation("X-Authorization", xAuthorization);
			}
			if (customHeaders != null)
			{
				foreach (var _header in customHeaders)
				{
					if (_httpRequest.Headers.Contains(_header.Key))
					{
						_httpRequest.Headers.Remove(_header.Key);
					}
					_httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
				}
			}

			// Serialize Request
			string _requestContent = null;
			// Set Credentials
			if (this.Credentials != null)
			{
				cancellationToken.ThrowIfCancellationRequested();
				await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			}
			// Send Request
			if (_shouldTrace)
			{
				ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
			}
			cancellationToken.ThrowIfCancellationRequested();
			_httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			if (_shouldTrace)
			{
				ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
			}
			HttpStatusCode _statusCode = _httpResponse.StatusCode;
			cancellationToken.ThrowIfCancellationRequested();
			string _responseContent = null;
			if ((int)_statusCode != 200)
			{
				var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
				ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
				if (_shouldTrace)
				{
					ServiceClientTracing.Error(_invocationId, ex);
				}
				_httpRequest.Dispose();
				if (_httpResponse != null)
				{
					_httpResponse.Dispose();
				}
				throw ex;
			}
			// Create Result
			var _result = new HttpOperationResponse<InstallationsOKResponse>();
			_result.Request = _httpRequest;
			_result.Response = _httpResponse;
			// Deserialize Response
			if ((int)_statusCode == 200)
			{
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					_result.Body = SafeJsonConvert.DeserializeObject<InstallationsOKResponse>(_responseContent, this.DeserializationSettings);
				}
				catch (JsonException ex)
				{
					_httpRequest.Dispose();
					if (_httpResponse != null)
					{
						_httpResponse.Dispose();
					}
					Logging.Log("VrmApiClient_InstallationsWithHttpMessagesAsync-JsonException", _responseContent);
					throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
				}
			}
			if (_shouldTrace)
			{
				ServiceClientTracing.Exit(_invocationId, _result);
			}
			return _result;
		}

		/// <summary>
		/// Retrieve connected devices (e.g. to get device instance).
		/// </summary>
		/// Retrieve connected devices (e.g. to get device instance).
		/// <param name='xAuthorization'>
		/// X-Authorization: Bearer {token}.
		/// </param>
		/// <param name='idSite'>
		/// The id of the site.
		/// </param>
		/// <param name='customHeaders'>
		/// Headers that will be added to request.
		/// </param>
		/// <param name='cancellationToken'>
		/// The cancellation token.
		/// </param>
		/// <return>
		/// A response object containing the response body and response headers.
		/// </return>
		public async Task<HttpOperationResponse<SystemOverviewOKResponse>> SystemOverviewWithHttpMessagesAsync(string xAuthorization, int idSite, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (xAuthorization == null)
			{
				throw new ValidationException(ValidationRules.CannotBeNull, "xAuthorization");
			}
			// Tracing
			bool _shouldTrace = ServiceClientTracing.IsEnabled;
			string _invocationId = null;
			if (_shouldTrace)
			{
				_invocationId = ServiceClientTracing.NextInvocationId.ToString();
				Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
				tracingParameters.Add("xAuthorization", xAuthorization);
				tracingParameters.Add("idSite", idSite);
				tracingParameters.Add("cancellationToken", cancellationToken);
				ServiceClientTracing.Enter(_invocationId, this, "SystemOverview", tracingParameters);
			}
			// Construct URL
			var _baseUrl = this.BaseUri.AbsoluteUri;
			var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "installations/{idSite}/system-overview").ToString();
			_url = _url.Replace("{idSite}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(idSite, this.SerializationSettings).Trim('"')));
			// Create HTTP transport objects
			HttpRequestMessage _httpRequest = new HttpRequestMessage();
			HttpResponseMessage _httpResponse = null;
			_httpRequest.Method = new HttpMethod("GET");
			_httpRequest.RequestUri = new Uri(_url);
			// Set Headers
			if (xAuthorization != null)
			{
				if (_httpRequest.Headers.Contains("X-Authorization"))
				{
					_httpRequest.Headers.Remove("X-Authorization");
				}
				_httpRequest.Headers.TryAddWithoutValidation("X-Authorization", xAuthorization);
			}
			if (customHeaders != null)
			{
				foreach (var _header in customHeaders)
				{
					if (_httpRequest.Headers.Contains(_header.Key))
					{
						_httpRequest.Headers.Remove(_header.Key);
					}
					_httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
				}
			}

			// Serialize Request
			string _requestContent = null;
			// Set Credentials
			if (this.Credentials != null)
			{
				cancellationToken.ThrowIfCancellationRequested();
				await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			}
			// Send Request
			if (_shouldTrace)
			{
				ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
			}
			cancellationToken.ThrowIfCancellationRequested();
			_httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			if (_shouldTrace)
			{
				ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
			}
			HttpStatusCode _statusCode = _httpResponse.StatusCode;
			cancellationToken.ThrowIfCancellationRequested();
			string _responseContent = null;
			if ((int)_statusCode != 200)
			{
				var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
				ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
				if (_shouldTrace)
				{
					ServiceClientTracing.Error(_invocationId, ex);
				}
				_httpRequest.Dispose();
				if (_httpResponse != null)
				{
					_httpResponse.Dispose();
				}
				throw ex;
			}
			// Create Result
			var _result = new HttpOperationResponse<SystemOverviewOKResponse>();
			_result.Request = _httpRequest;
			_result.Response = _httpResponse;
			// Deserialize Response
			if ((int)_statusCode == 200)
			{
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					_result.Body = SafeJsonConvert.DeserializeObject<SystemOverviewOKResponse>(_responseContent, this.DeserializationSettings);
				}
				catch (JsonException ex)
				{
					_httpRequest.Dispose();
					if (_httpResponse != null)
					{
						_httpResponse.Dispose();
					}
					Logging.Log("VrmApiClient_SystemOverviewWithHttpMessagesAsync-JsonException", _responseContent);
					throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
				}
			}
			if (_shouldTrace)
			{
				ServiceClientTracing.Exit(_invocationId, _result);
			}
			return _result;
		}

		/// <summary>
		/// Summary data.
		/// </summary>
		/// Returns latest recorded values for the Solar Charger Summary for for
		/// instance 255.
		/// <param name='xAuthorization'>
		/// X-Authorization: Bearer {token}.
		/// </param>
		/// <param name='idSite'>
		/// The id of the site.
		/// </param>
		/// <param name='instance'>
		/// The id of the instance.
		/// </param>
		/// <param name='customHeaders'>
		/// Headers that will be added to request.
		/// </param>
		/// <param name='cancellationToken'>
		/// The cancellation token.
		/// </param>
		/// <return>
		/// A response object containing the response body and response headers.
		/// </return>
		public async Task<HttpOperationResponse<SolarChargerSummaryOKResponse>> SolarChargerSummaryWithHttpMessagesAsync(string xAuthorization, int idSite, int instance, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (xAuthorization == null)
			{
				throw new ValidationException(ValidationRules.CannotBeNull, "xAuthorization");
			}
			// Tracing
			bool _shouldTrace = ServiceClientTracing.IsEnabled;
			string _invocationId = null;
			if (_shouldTrace)
			{
				_invocationId = ServiceClientTracing.NextInvocationId.ToString();
				Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
				tracingParameters.Add("xAuthorization", xAuthorization);
				tracingParameters.Add("idSite", idSite);
				tracingParameters.Add("instance", instance);
				tracingParameters.Add("cancellationToken", cancellationToken);
				ServiceClientTracing.Enter(_invocationId, this, "SolarChargerSummary", tracingParameters);
			}
			// Construct URL
			var _baseUrl = this.BaseUri.AbsoluteUri;
			var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "installations/{idSite}/widgets/SolarChargerSummary").ToString();
			_url = _url.Replace("{idSite}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(idSite, this.SerializationSettings).Trim('"')));
			List<string> _queryParameters = new List<string>();
			_queryParameters.Add(string.Format("instance={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(instance, this.SerializationSettings).Trim('"'))));
			if (_queryParameters.Count > 0)
			{
				_url += "?" + string.Join("&", _queryParameters);
			}
			// Create HTTP transport objects
			HttpRequestMessage _httpRequest = new HttpRequestMessage();
			HttpResponseMessage _httpResponse = null;
			_httpRequest.Method = new HttpMethod("GET");
			_httpRequest.RequestUri = new Uri(_url);
			// Set Headers
			if (xAuthorization != null)
			{
				if (_httpRequest.Headers.Contains("X-Authorization"))
				{
					_httpRequest.Headers.Remove("X-Authorization");
				}
				_httpRequest.Headers.TryAddWithoutValidation("X-Authorization", xAuthorization);
			}
			if (customHeaders != null)
			{
				foreach (var _header in customHeaders)
				{
					if (_httpRequest.Headers.Contains(_header.Key))
					{
						_httpRequest.Headers.Remove(_header.Key);
					}
					_httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
				}
			}

			// Serialize Request
			string _requestContent = null;
			// Set Credentials
			if (this.Credentials != null)
			{
				cancellationToken.ThrowIfCancellationRequested();
				await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			}
			// Send Request
			if (_shouldTrace)
			{
				ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
			}
			cancellationToken.ThrowIfCancellationRequested();
			_httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
			if (_shouldTrace)
			{
				ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
			}
			HttpStatusCode _statusCode = _httpResponse.StatusCode;
			cancellationToken.ThrowIfCancellationRequested();
			string _responseContent = null;
			if ((int)_statusCode != 200)
			{
				var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
				ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
				if (_shouldTrace)
				{
					ServiceClientTracing.Error(_invocationId, ex);
				}
				_httpRequest.Dispose();
				if (_httpResponse != null)
				{
					_httpResponse.Dispose();
				}
				throw ex;
			}
			// Create Result
			var _result = new HttpOperationResponse<SolarChargerSummaryOKResponse>();
			_result.Request = _httpRequest;
			_result.Response = _httpResponse;
			// Deserialize Response
			if ((int)_statusCode == 200)
			{
				_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					_result.Body = SafeJsonConvert.DeserializeObject<SolarChargerSummaryOKResponse>(_responseContent, this.DeserializationSettings);
				}
				catch (JsonException ex)
				{
					_httpRequest.Dispose();
					if (_httpResponse != null)
					{
						_httpResponse.Dispose();
					}
					Logging.Log("VrmApiClient_SolarChargerSummaryWithHttpMessagesAsync-JsonException", _responseContent);
					throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
				}
			}
			if (_shouldTrace)
			{
				ServiceClientTracing.Exit(_invocationId, _result);
			}
			return _result;
		}

	}
}
